/* ###*B*###
 * Erika Enterprise, version 3
 *
 * Copyright (C) 2018 Evidence s.r.l.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License, version 2, for more details.
 *
 * You should have received a copy of the GNU General Public License,
 * version 2, along with this program; if not, see
 * <https://www.gnu.org/licenses/old-licenses/gpl-2.0.html >.
 *
 * This program is distributed to you subject to the following
 * clarifications and special exceptions to the GNU General Public
 * License, version 2.
 *
 * THIRD PARTIES' MATERIALS
 *
 * Certain materials included in this library are provided by third
 * parties under licenses other than the GNU General Public License. You
 * may only use, copy, link to, modify and redistribute this library
 * following the terms of license indicated below for third parties'
 * materials.
 *
 * In case you make modified versions of this library which still include
 * said third parties' materials, you are obligated to grant this special
 * exception.
 *
 * The complete list of Third party materials allowed with ERIKA
 * Enterprise version 3, together with the terms and conditions of each
 * license, is present in the file THIRDPARTY.TXT in the root of the
 * project.
 * ###*E*### */

/** \file   conf.oil
 *  \brief  System Configuration.
 *
 *  This file contains the System Configuration for Erika Enterprise.
 *
 *  \author  Errico Guidieri
 *  \date    2017
 */

CPU mySystem {

  OS myOs {
    EE_OPT = "OS_EE_APPL_BUILD_DEBUG";
    EE_OPT = "OS_EE_BUILD_DEBUG";
    EE_OPT = "OSEE_DEBUG";
    // EE_OPT = "OS_EE_VERBOSE";
    EE_OPT = "OSEE_BYPASS_CLOCK_CONFIGURATION";

    CFLAGS  = "-I..";
    LDFLAGS = "-Wl,--gc-sections";

    USERESSCHEDULER = FALSE;

    CPU_DATA = TRICORE {
      MULTI_STACK = TRUE;
      COMPILER = GCC {
        MINIMAL_OPTS = TRUE;
      };
      /*
      COMPILER = GCC;
      */
      IDLEHOOK = TRUE {
        HOOKNAME = "idle_hook";
      };
      CPU_CLOCK = 80.0;
    };

    MCU_DATA = TC27X {
      DERIVATIVE = "tc397xe";
      REVISION = "D";
    };

    LIB = ISAR_MCAL {
      /* Used to select library version. */
      VERSION = "6.0.0";
      /* Create libisarmcal.a */
      STAND_ALONE = TRUE;
      /* Drivers Enabled. */
      MCU_DRIVER = TRUE;
      PORT_DRIVER = TRUE;
      IRQ_DRIVER = TRUE;
      CAN_DRIVER = TRUE;
      IRQ_DRIVER = TRUE;
      /* Enable DET */
      USE_DET = TRUE;
      DIO_DRIVER = TRUE;
    };

    KERNEL_TYPE = OSEK {
      CLASS = BCC1;
    };
  };

  APPDATA myApp {
    APP_SRC = "code.c";
    APP_SRC = "CanIf_Cbk.c";
  };

  COUNTER SystemTimer {
    MINCYCLE = 1;
    MAXALLOWEDVALUE = 65535;
    TICKSPERBASE = 1;
    TYPE = HARDWARE {
      SYSTEM_TIMER = TRUE;
      PRIORITY     = 1;
      DEVICE       = "STM_SR0";
    };
    SECONDSPERTICK = 0.001;
  };

  ALARM AlarmTask1 {
    COUNTER = SystemTimer;
    ACTION = ACTIVATETASK {
      TASK = Task1;
    };
    AUTOSTART = TRUE {
      ALARMTIME = 10;
      CYCLETIME = 10;
    };
  };

  ALARM AlarmTask2 {
    COUNTER = SystemTimer;
    ACTION = ACTIVATETASK {
      TASK = Task2;
    };
    AUTOSTART = TRUE {
      ALARMTIME = 500;
      CYCLETIME = 500;
    };
  };

  TASK Task1 {
    PRIORITY = 1;
    /*STACK = PRIVATE {
      SIZE = 128;
    };*/
    SCHEDULE = FULL;
  };

  TASK Task2 {
    PRIORITY = 2;
    /*STACK = PRIVATE {
      SIZE = 128;
    };*/
    SCHEDULE = FULL;
  };

  ISR Can0_Tx {
    CATEGORY = 2;
    SOURCE   = "CANINT0";
    HANDLER  = "CANSR0_ISR";
    PRIORITY = 3;
  };

  ISR Can0_Rx {
    CATEGORY = 2;
    SOURCE   = "CANINT4";
    HANDLER  = "CANSR4_ISR";
    PRIORITY = 4;
  };

};
