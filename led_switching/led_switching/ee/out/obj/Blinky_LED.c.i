#line 1 "D:/RTOS_PROJEKT/erica/aurix_workspace/tc38_led/ee/Blinky_LED.c"
/**********************************************************************************************************************
 * \file Blinky_LED.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/

#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Port\\Std\\IfxPort.h"
/**
 * \file IfxPort.h
 * \brief PORT  basic functionality
 * \ingroup IfxLld_Port
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 *
 * \defgroup IfxLld_Port_Std_Enum Enumerations
 * \ingroup IfxLld_Port_Std
 * \defgroup IfxLld_Port_Std_DataStructures Data structures
 * \ingroup IfxLld_Port_Std
 * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
 * \ingroup IfxLld_Port_Std
 * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
 * \ingroup IfxLld_Port_Std
 */




/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/


#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\_Impl\\IfxPort_cfg.h"
/**
 * \file IfxPort_cfg.h
 * \brief PORT on-chip implementation data
 * \ingroup IfxLld_Port
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * \defgroup IfxLld_Port PORTS
 * \ingroup IfxLld
 * \defgroup IfxLld_Port_Impl Implementation
 * \ingroup IfxLld_Port
 * \defgroup IfxLld_Port_Std Standard Driver
 * \ingroup IfxLld_Port
 */




/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/


#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\IfxCpu_Intrinsics.h"
/**
 * \file IfxCpu_Intrinsics.h
 * \ingroup IfxLld_Cpu_Intrinsics Intrinsics
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxLld_Cpu_Intrinsics Intrinsics
 * \ingroup IfxLld_Cpu_Std
 *
 */


/******************************************************************************/

#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Ifx_Types.h"
/**
 * \file Ifx_Types.h
 * \brief This files defines all types used by the IFX HAL and libraries
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */




/******************************************************************************/

#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Infra\\Platform\\Tricore\\Compilers\\Compilers.h"
/**
 * \file Compilers.h
 *
 * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
 *
 * $Date: 2014-04-07 12:13:19 GMT$
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */




/******************************************************************************/


#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Configurations\\Ifx_Cfg.h"
/**********************************************************************************************************************
 * \file Ifx_Cfg.h
 * \brief Project configuration file.
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/




/*********************************************************************************************************************/
/*------------------------------------------Configuration for IfxScu_cfg.h-------------------------------------------*/
/*********************************************************************************************************************/
/* External oscillator frequency in Hz */

/* System PLL frequency in Hz */


/* Peripheral PLL1 frequency in Hz */

/* Peripheral PLL2 frequency in Hz */


/*********************************************************************************************************************/
/*-----------------------------------Configuration for Software managed interrupt------------------------------------*/
/*********************************************************************************************************************/
/* #define IFX_USE_SW_MANAGED_INT */ /* Decomment this line if the project needs to use Software managed interrupts */

/*********************************************************************************************************************/
/*---------------------------------Configuration for Trap Hook Functions' Extensions---------------------------------*/
/*********************************************************************************************************************/
/* #define IFX_CFG_EXTEND_TRAP_HOOKS */ /* Decomment this line if the project needs to extend trap hook functions */


#line 47 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Infra\\Platform\\Tricore\\Compilers\\Compilers.h"

/*this file shall not be modified by the user, IFX_XXXX defines shall be defined in Ifx_Cfg.h */





































#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Infra\\Platform\\Tricore\\Compilers\\CompilerTasking.h"
/**
 * \file CompilerTasking.h
 *
 * \version iLLD_New
 * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */




/******************************************************************************/


#line 1 "C:\\Infineon\\AURIX-Studio-1.8.0\\plugins\\com.infineon.aurix.tools_1.8.0\\build_system\\tools\\Compilers\\Tasking_1.1r8\\ctc\\include\\stddef.h"
/**************************************************************************
**                                                                        *
**  FILE        :  stddef.h                                               *
**                                                                        *
**  DESCRIPTION :  Include file with macros for common use                *
**                                                                        *
**  Copyright 1996-2022 Altium BV                                         *
**                                                                        *
**************************************************************************/






#pragma nomisrac 19.7,19.10,20.1







typedef __size_t        size_t;




typedef __wchar_t       wchar_t;



typedef __ptrdiff_t     ptrdiff_t;













#pragma nomisrac restore


#line 47 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Infra\\Platform\\Tricore\\Compilers\\CompilerTasking.h"

/*Linker definitions which are specific to Tasking */
/* IFX_CFG_USE_COMPILER_DEFAULT_LINKER shall be defined in Ifx_Cfg.h
 * to use the default compiler linker varaibles and startup */



/*Start: Common definitions ********************************************** */



/*End: Common definitions ********************************************** */

/*Start: Core 0 definitions ********************************************** */

















/*Wrapper macros for the tool specific definitions */















/******************************************************************************/






/* FXIME check how to pack structure members */





/* Note that __REVISION__ is only available for tasking compiler! */


/******************************************************************************/








/* *INDENT-OFF* */









/* *INDENT-ON* */

/******************************************************************************/



/******************************************************************************/
/*Memory qualifiers*/























/******************************************************************************/


#line 86 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Infra\\Platform\\Tricore\\Compilers\\Compilers.h"

















































/* Functions prototypes                                                       */
/******************************************************************************/
void Ifx_C_Init(void);
/******************************************************************************/



#line 47 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Ifx_Types.h"

#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Platform_Types.h"
/**
 * \file Platform_Types.h
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */



/******************************************************************************
**                      Includes                                             **
******************************************************************************/

/******************************************************************************
**                      Global Macro Definitions                             **
******************************************************************************/








/* [cover parentID={5294D975-045A-4d91-9A1A-B1765FAB4653}] */
/* CPU register width type definition */



/* Register width of CPU*/

/* [/cover] */


/* [cover parentID={FBA2FA55-430B-4dfb-82B1-C791F0878F9B}] */
/* Bit order type definition*/


/* Bit order of Register level*/

/* [/cover] */


/* [cover parentID={0E2E6A28-264A-4d32-96EE-5F5C93286311}] */
/* Byte order type definition*/


/* Byte order on Memory level*/

/* [/cover] */


/* TRUE, FALSE symbol for Boolean types*/
/* [cover parentID={FF7F9840-8904-4b7d-83A7-988524B795DE}] */






/* [/cover] */
/******************************************************************************
**                      Global Type Definitions                              **
******************************************************************************/
/* AUTOSAR integer data types*/

/* unsigned char with a bit length that is the shortest one natively supported
  by the platform.*/
/* [cover parentID={F7B51F71-6687-4e05-8408-7F5AAC55C638}] boolean [/cover]*/
typedef unsigned char       boolean;        /* for use with TRUE/FALSE      */

/* 8bit unsigned :  0 .. 255 [0X00 .. 0XFF]*/
/* [cover parentID={4269E5AB-7F28-4803-8D60-7B4EC91CB087}] uint8 [/cover] */
typedef unsigned char       uint8;

/* 16bit unsigned:  0..65535 [0x0000..0xFFFF]*/
/* [cover parentID={66E964CA-35D5-4013-BB61-1E824636D713}] uint16 [/cover] */
typedef unsigned short      uint16;

/* 32bit unsigned:  0..4294967295 [0x00000000..0xFFFFFFFF]*/
/* [cover parentID={DA33B7A0-7CD3-45e7-9C9A-6D63FB8BA3DC}] uint32 [/cover] */
typedef unsigned long       uint32;

/* 64bit unsigned
*          0..18446744073709551615   [0x0000000000000000..0xFFFFFFFFFFFFFFFF]*/
/* [cover parentID={3409E2A3-BF2D-44a5-9B00-A72300848166}] uint64 */
typedef unsigned long long  uint64;

/* 8bit signed, 7 bit + 1 bit sign -128..+127 [0x80..0x7F]*/
/* [cover parentID={94E0756B-993D-4cae-9499-416CDFD6FEAF}] sint8[/cover]*/
typedef signed char         sint8;

/* 16bit signed, 15 bit + 1 bit sign -32768..+32767 [0x8000..0x7FFF]*/
/* [cover parentID={B3482DFF-8DFF-41bd-95E0-0406E2451CB0}] sint16 [/cover]*/
typedef short               sint16;

/* 32bit signed, 31 bit + 1 bit sign
 -2147483648..+2147483647 [0x80000000..0x7FFFFFFF]*/
/* [cover parentID={B027B471-A1A2-456c-A015-35F4A34A88EF}] sint32 [/cover]*/
typedef long                sint32;
/*
* 64bit signed, 63 bit + 1 bit sign
* -9223372036854775808..9223372036854775807
* [0x8000000000000000..0x7FFFFFFFFFFFFFFF]
*/
/* [cover parentID={3CF3471C-EB1A-450c-B78F-4B96D226A1F5}] sint64 [/cover]*/
typedef long long           sint64;

/* At least 8 bit*/
/* [cover parentID={F8719785-0A16-486e-AB85-0A2859402037}] uint8_least[/cover]*/
typedef unsigned long       uint8_least;

/* At least 16 bit*/
/* [cover parentID={BEAD868D-0EC1-44f0-AFEE-B57401CC9E65}]uint16_least[/cover]*/
typedef unsigned long       uint16_least;

/* least 32 bit*/
/* [cover parentID={9B9CC46A-0F61-4d25-8001-679CF210C135}]uint32_least[/cover]*/
typedef unsigned long       uint32_least;

/* At least 7 bit + 1 bit sign*/
/* [cover parentID={5C0DE046-8407-4708-8D26-41B96731D89D}]sint8_least[/cover]*/
typedef signed long         sint8_least;

/* At least 15 bit + 1 bit sign*/
/* [cover parentID={0A83DB6E-ECD8-42f0-B97C-057F9FBFEB6E}]sint16_least[/cover]*/
typedef signed long         sint16_least;

/* At least 31 bit + 1 bit sign*/
/* [cover parentID={A65F0248-A0A7-4ab7-BAFA-A5428F4E8A96}]sint32_least[/cover]*/
typedef signed long         sint32_least;

/* IEEE754-2008 single precision
* -3.4028235e+38..+3.4028235e+38*/
/* [cover parentID={BBC4F70E-DA81-4d37-BCA4-628A89B29517}] float32  [/cover]*/
typedef float               float32;        /* IEEE754-2008 single precision */

/* IEEE754-2008 double precision
* -1.7976931348623157e+308..+1.7976931348623157e+308*/
/* [cover parentID={0D62172C-9309-493a-8028-06A7299D7906}] float64 [/cover]*/
typedef double              float64;        /* IEEE754-2008 double precision */


/******************************************************************************
**                      Global Constant Declarations                         **
******************************************************************************/

/******************************************************************************
**                      Global Variable Declarations                         **
******************************************************************************/

/******************************************************************************
**                      Global Function Declarations                         **
******************************************************************************/


#line 48 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Ifx_Types.h"

/*******************************************************************************
**                      Global Data Types                                     **
**                      (Types not defined by AUTOSAR)                        **
*******************************************************************************/
typedef const char        *pchar;                           /**< \brief const char pointer                               */
typedef void              *pvoid;                           /**< \brief void pointer                                     */
typedef volatile void     *vvoid;                           /**< \brief volatile void pointer                            */
typedef void              (*voidfuncvoid) (void);           /**< \brief void pointer which takes void argument           */

typedef struct
{
    float32 real;               /**< \brief Real part */
    float32 imag;               /**< \brief Imaginary part */
} cfloat32;

typedef struct
{
    sint32 real;				/**< \brief Real part */
    sint32 imag;				/**< \brief Imaginary part */
} csint32;

typedef struct
{
    sint16 real;				/**< \brief Real part */
    sint16 imag;				/**< \brief Imaginary part */
} csint16;

typedef sint64             Ifx_TickTime;    /**< \brief Time in ticks */












typedef sint16 Ifx_SizeT;                       /**< \brief Type used for data stream size */


/** \brief Circular buffer definition. */
typedef struct
{
    void  *base;                   /**< \brief buffer base address */
    uint16 index;                  /**< \brief buffer current index */
    uint16 length;                 /**< \brief buffer length*/
} Ifx_CircularBuffer;

typedef uint16 Ifx_Priority;       /**< \brief Used in interrupt service priorities */
typedef uint32 Ifx_TimerValue;     /**< \brief Used in timer values */
typedef sint32 Ifx_SignedTimerVal; /**< \brief Used in signed timer values */

typedef pvoid  Ifx_AddressValue;   /**< \brief Used in address values */

typedef struct
{
    uint16 priority;
    uint16 provider;
} Ifx_IsrSetting;

/** \brief Signal active state definition. */
typedef enum
{
    Ifx_ActiveState_low  = 0,       /**< \brief The signal is low active */
    Ifx_ActiveState_high = 1        /**< \brief The signal is high active */
} Ifx_ActiveState;

typedef enum
{
    Ifx_ParityMode_even = 0,
    Ifx_ParityMode_odd  = 1
} Ifx_ParityMode;

/** \brief input multiplexer definition used in PinMaps
 */
typedef enum
{
    Ifx_RxSel_a,
    Ifx_RxSel_b,
    Ifx_RxSel_c,
    Ifx_RxSel_d,
    Ifx_RxSel_e,
    Ifx_RxSel_f,
    Ifx_RxSel_g,
    Ifx_RxSel_h
} Ifx_RxSel;

/** \brief Module address and index map */
typedef struct
{
    volatile void *module;      /**< \brief Module address */
    sint32         index;       /**< \brief Module index */
} IfxModule_IndexMap;

typedef struct
{
    Ifx_TickTime timestamp;
    uint8        data;
}Ifx_DataBufferMode_TimeStampSingle;

/*
 * typedef struct
 * {
 *  Ifx_TickTime timestamp;
 *  uint8 count[1];     // Number of valid data
 *  uint8 data[7];
 * }Ifx_DataBufferMode_TimeStampBurst;
 */

typedef enum
{
    Ifx_DataBufferMode_normal = 0,           /**< \brief normal mode, each received byte is moved to the rx fifo */
    Ifx_DataBufferMode_timeStampSingle,      /**< \brief Single byte type stamp mode. The rx fifo is filled in with Ifx_DataBufferMode_TimeStampSingle items. */
//    Ifx_DataBufferMode_timeStameBurst      /**< \brief Burst byte type stamp mode. The rx fifo is filled in with Ifx_DataBufferMode_TimeStampBurst items. */
}Ifx_DataBufferMode;

/**
 * Defines the PWM modes
 *
 * The 1st member shall start with value 0, and the next members value shall be the previous member +1
 * pwmMode_off shall be the member with the higher index
 * \note enum order and values should not be modified, except Ifx_Pwm_Mode_init and Ifx_Pwm_Mode_count
 */
typedef enum
{
    Ifx_Pwm_Mode_centerAligned         = 0, /**< \brief Center aligned mode */
    Ifx_Pwm_Mode_centerAlignedInverted = 1, /**< \brief Center aligned inverted aligned mode */
    Ifx_Pwm_Mode_leftAligned           = 2, /**< \brief Left aligned mode. The PWM period starts with a rising edge */
    Ifx_Pwm_Mode_rightAligned          = 3, /**< \brief Right aligned mode. The PWM period starts with a falling edge*/
    Ifx_Pwm_Mode_off                   = 4, /**< \brief All switch open */
    Ifx_Pwm_Mode_init                  = 5, /**< \brief Initialisation mode, do not use at run time */
    Ifx_Pwm_Mode_count                      /**< \brief Number of defined modes */
} Ifx_Pwm_Mode;






#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Ifx_TypesTasking.h"
/**
 * \file Ifx_TypesTasking.h
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2012 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


/******************************************************************************/




/******************************************************************************/

/******************************************************************************/


#line 191 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Ifx_Types.h"














typedef struct
{
    __fract real;				/**< \brief Real part */
    __fract imag;				/**< \brief Imaginary part */
} cfract;

typedef struct
{
    __sfract real;				/**< \brief Real part */
    __sfract imag;				/**< \brief Imaginary part */
} csfract;









#line 48 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\IfxCpu_Intrinsics.h"









#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h"
/**
 * \file IfxCpu_IntrinsicsTasking.h
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxLld_Cpu_Intrinsics_Tasking Intrinsics for TASKING compiler
 * \ingroup IfxLld_Cpu_Intrinsics
 *
 */


/******************************************************************************/

/******************************************************************************/
/* *INDENT-OFF* */


/** Function call without return
 */


/** Jump and link
 */
static inline void Ifx__jump_and_link(void (*fun)(void))
{
	__asm("jli %0"::"a"(fun));
}

static inline void Ifx__moveToDataParam0(unsigned int var)
{
	__asm("mov d4, %0"::"d"(var));
}

static inline void Ifx__moveToAddrParam0(const void *var)
{
	__asm("mov.aa a4, %0"::"a"(var));
}

static inline unsigned int Ifx__getDataParamRet(void)
{
	unsigned int var;
	__asm(" mov\t %0, d2":"=d"(var));
	return var;
}

static inline void Ifx__moveToDataParamRet(unsigned int var)
{
	__asm("mov d2, %0"::"d"(var));
}

static inline void Ifx__jumpToFunction(const void *fun)
{
	__asm("\tji %0"::"a"(fun));
}

static inline void Ifx__jumpToFunctionWithLink(const void *fun)
{
	Ifx__jump_and_link((void (*)(void))fun);
}

static inline void Ifx__jumpBackToLink(void)
{
	__asm("ji a11");
}

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_any_type Cross type arithmetic operation
 *
 * Macro compatible with float, fix point, signed integer and unsigned integer
 *
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */




/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_singed_integer Signed integer operation
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */

/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_unsinged_integer Unsigned integer operation
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */

/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_float Floating point operation
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */




















/** \} */
/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_fractional Fractional Arithmetic Support
 The next table provides an overview of intrinsic functions to convert fractional values. Note that the
 TASKING VX-toolset C compiler for TriCore fully supports the fractional type so normally you should not
 need these intrinsic functions (except for __mulfractlong). For compatibility reasons the TASKING C
 compiler does support these functions.
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */






/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_insert Insert / Extract Bit-fields and Bits
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */









/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_interrupt_handling Interrupt Handling
 The next table provides an overview of the intrinsic functions to read or set interrupt handling.
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */




/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_miscellaneous Miscellaneous Intrinsic Functions
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */

/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_packed Packed Data Type Support
 The next table provides an overview of the intrinsic functions for initialization of packed data type.
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */

/** \} */


/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_register Register Handling
 The next table provides an overview of the intrinsic functions that you can use to access control registers.
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */



/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_saturation Saturation Arithmetic Support
 These intrinsics support saturation arithmetic
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */









/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_single_assembly Insert Single Assembly Instruction
 The next table provides an overview of the intrinsic functions that you can use to insert a single assembly
 instruction.You can also use inline assembly but these intrinsics provide a shorthand for frequently used
 assembly instructions.
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */

static inline void Ifx__nops(void* cnt)
{
    __asm("nop16 \n\t"
          "loop %0,*-2"
          ::"a"(((char*)cnt) - 1));
}



/** Insert a memory barrier
 */











static inline void Ifx__ldmstAsm(volatile void *addr, uint32 mask, uint32 data)
{
    __asm("\tmov d3, %1 \n"
          "\tmov d2, %2 \n"
          "\tldmst [%0],e2"
          ::"a"(addr), "d"(mask), "d"(data):"d2", "d3");

}

/** Convert float to fract
 */
static inline __fract Ifx__float_to_fract(float a)
{
    __fract res;
    __asm("ftoq31  %0,%1,%2":"=d"(res):"d"(a), "d"(0):"memory");
    return res;
}



/** Convert float to sfract
 */
static inline __sfract Ifx__float_to_sfract(float a)
{
    __fract tmp = Ifx__float_to_fract(a);
    return __round16(tmp);
}




static inline void Ifx__stopPerfCounters(void)
{ //__mtcr (CPU_CCTRL, 0);
    __asm(
            "    mov d0,#0\n"
            "    mtcr #0xFC00,d0\n"
            "    isync\n"
            :::"d0");
}

/** \} */

/* FIXME use inline instead of #define */
/* FIXME is it really required to have #define __setareg(areg,val) ___setareg(areg,val) or can __setareg() implemented directly */




/** \brief This function is a implementation of a binary semaphore using compare and swap instruction
 * \param address address of resource.
 * \param value This variable is updated with status of address
 * \param condition if the value of address matches with the value of condition, then swap of value & address occurs.
 *
 */



/** \brief Convert a fixpoint value to float32
 *
 * This function converts a value from a fixpoint format to a float32 format.
 *
 *
 * \param value value to be converted.
 * \param shift position of the fix point. Range = [-256, 255] => (Qx.y format where x = shift+1).
 *
 * \return Returns the converted value in the float32 format.
 *
 */
static inline float32 Ifx__fixpoint_to_float32(__fract value, sint32 shift)
{
    float32 result;

    __asm(
        "   q31tof\t%0, %1, %2  \n"
        : "=d" (result)
        : "d" (value), "d" (shift));
    return result;
}

static inline void* Ifx__getA11(void)
{
    unsigned int *res;
    __asm("mov.aa %0, a11": "=a" (res) : :"a11");
    return res;
}

static inline void Ifx__setStackPointer(void *stackAddr)
{
    __asm("mov.aa a10, %0": : "a" (stackAddr) :"a10");
}

static inline uint32 IfxCpu_calculateCrc32(uint32 *startaddress, uint8 length)
{
    uint32 returnvalue;
    __asm("MOV d0, #0x0"); /* set seed value to 0 */
    for (;length > 0; length--)
    {
        /* calculate the CRC over all data */
        __asm("LD.W d1,[%0]" : : "a" (startaddress));
        __asm("CRC32 d0,d0,d1");
        startaddress++;
    }
    __asm("MOV %0,d0" : "=d" (returnvalue)); /* return result of CRC*/
    return returnvalue;
}

static inline uint32 IfxCpu_getRandomVal(uint32 a, uint32 x, uint32 m)
{
	uint32 result;
    __asm("      mul.u     e14,%1,%2      ; d15 = Eh; d14 = El    \n"
        "        mov       d12,d14        ;   e12 = El            \n"
        "        mov       d13,#0         ;                       \n"
        "        madd.u    e14,e12,d15,#5 ; e14 = El + 5 * d15    \n"
        " 1:     jge.u     d14,%3,2n      ;                       \n"
        "        jz        d15,3n         ;                       \n"
        " 2:     subx      d14,d14,%3     ;  e12=e12-m            \n"
        "        subc      d15,d15,d13    ; d13=d13-0             \n"
        "        loopu     1p             ;                       \n"
        " 3:     mov       %0,d14         ;                       \n"
        : "=d"(result) : "d"(a), "d"(x), "d"(m) : "e14","e12");
    return result;
}

static inline sint32 Ifx__popcnt(sint32 a)
{ 
	sint32 res; 
	__asm("popcnt.w %0,%1":"=d"(res):"d"(a)); 
		return res; 
}


/* Macros for backward compatibility of the intrinsics*/
/******************************************************************************/










































































































































































































































/******************************************************************************/
/* *INDENT-ON* */
/******************************************************************************/

#line 57 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\IfxCpu_Intrinsics.h"
























//______________________________________________________________________________

/** Convert context pointer to address pointer
 * \param[in] cx context pointer
 * \return address pointer
 */
static inline void *__cx_to_addr(uint32 cx)
{
    uint32 seg_nr = __extru(cx, 16, 4);
    return (void *)__insert(seg_nr << 28, cx, 6, 16);
}


/** Convert address pointer to context pointer
 * \param[in] addr address pointer
 * \return context pointer
 */
static inline uint32 __addr_to_cx(void *addr)
{
    uint32 seg_nr, seg_idx;
    seg_nr  = __extru((int)addr, 28, 4) << 16;
    seg_idx = __extru((int)addr, 6, 16);
    return seg_nr | seg_idx;
}


/******************************************************************************/
static inline void __ldmst_c(volatile void *address, unsigned mask, unsigned value)
{
    *(volatile uint32 *)address = (*(volatile uint32 *)address & ~(mask)) | (mask & value);
}


/** 32bit load operation
 */
static inline uint32 __ld32(void *addr)
{
    return *(volatile uint32 *)addr;
}


/** 32bit store operation
 */
static inline void __st32(void *addr, uint32 value)
{
    *(volatile uint32 *)addr = value;
}


/** 64bit load operation
 */
static inline uint64 __ld64(void *addr)
{
    return *(volatile uint64 *)addr;
}


/** 64bit store operation
 */
static inline void __st64(void *addr, uint64 value)
{
    *(volatile uint64 *)addr = value;
}


/** 64bit load operation which returns the lower and upper 32bit word
 */
static inline void __ld64_lu(void *addr, uint32 *valueLower, uint32 *valueUpper)
{
    register uint64 value;
    value       = __ld64(addr);
    *valueLower = (uint32)value;
    *valueUpper = (uint32)(value >> 32);
}


/** 64bit store operation which stores a lower and upper 32bit word
 */
static inline void __st64_lu(void *addr, uint32 valueLower, uint32 valueUpper)
{
    register uint64 value = ((uint64)valueUpper << 32) | valueLower;
    __st64(addr, value);
}


/******************************************************************************/

#line 58 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\_Impl\\IfxPort_cfg.h"

#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Infra\\Sfr\\TC38A\\_Reg\\IfxPort_reg.h"
/**
 * \file IfxPort_reg.h
 * \brief
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: TC38XA_UM_V1.5.0
 * Specification: TC3xx User Manual V1.5.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_P_Registers_Cfg P address
 * \ingroup IfxSfr_P_Registers
 * 
 * \defgroup IfxSfr_P_Registers_Cfg_BaseAddress Base address
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P00 2-P00
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P01 2-P01
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P02 2-P02
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P10 2-P10
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P11 2-P11
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P12 2-P12
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P13 2-P13
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P14 2-P14
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P15 2-P15
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P20 2-P20
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P21 2-P21
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P22 2-P22
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P23 2-P23
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P24 2-P24
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P25 2-P25
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P26 2-P26
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P30 2-P30
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P31 2-P31
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P32 2-P32
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P33 2-P33
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P34 2-P34
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P40 2-P40
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 * \defgroup IfxSfr_P_Registers_Cfg_P41 2-P41
 * \ingroup IfxSfr_P_Registers_Cfg
 *
 *
 */


/******************************************************************************/

#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Infra\\Sfr\\TC38A\\_Reg\\IfxPort_regdef.h"
/**
 * \file IfxPort_regdef.h
 * \brief
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: TC38XA_UM_V1.5.0
 * Specification: TC3xx User Manual V1.5.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_P_Registers P Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_P_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_P_Registers
 * 
 * \defgroup IfxSfr_P_Registers_union Register unions
 * \ingroup IfxSfr_P_Registers
 * 
 * \defgroup IfxSfr_P_Registers_struct Memory map
 * \ingroup IfxSfr_P_Registers
 */


/******************************************************************************/

#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Infra\\Sfr\\TC38A\\_Reg\\Ifx_TypesReg.h"
/**
 * \file Ifx_TypesReg.h
 * \brief
 * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
 *
 * Version: IFXREGTYPES_V1.0.R0
 *
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * Data type access rules for peripheral space
 * data type                               | Allowed access size   | Alignment of address in memory
 * ----------------------------------------|-----------------------|-----------------------------------
 * Ifx_UReg_8Bit, Ifx_SReg_8Bit            | Byte                  | Byte (1H)                         
 * Ifx_UReg_16Bit, Ifx_SReg_16Bit          | Byte, Half-Word       | 2 bytes (2H)                      
 * Ifx_UReg_32Bit, Ifx_SReg_32Bit          | Byte, Half-Word, Word | 4 bytes (4H)                      
 * Ifx_Strict_16Bit                        | Half-Word             | 2 bytes (2H)                      
 * Ifx_Strict_32Bit                        | Word                  | 4 bytes (4H)                      
 * 
 * 
 * Alignment rules for peripheral space (From TriCoreTM TC1.6.2 core architecture manual, 2.2.1 Alignment Requirements)
 * Access type                             | Access size           | Required alignment of address in memory    
 * ----------------------------------------|-----------------------|-----------------------------------
 * Load, Store Data Register               | Byte (8-bits)         | Byte (1H)                         
 * Load, Store Data Register               | Half-Word (16-bits)   | 2 bytes (2H)                      
 * Load, Store Data Register               | Word (32-bits)        | 4 bytes (4H)                      
 * Load, Store Data Register               | Double-Word (64-bits) | 8 bytes (8H)                      
 * Load, Store Address Register            | Word                  | 4 bytes (4H)                      
 * Load, Store Address Register            | Double-Word           | 8 bytes (8H)                      
 * SWAP.W, LDMST, ST.T                     | Word                  | 4 bytes (4H)                      
 * CMPSWAP.W, SWAPMSK.W                    | Word                  | 4 bytes (4H)                      
 * Context Load / Store / Restore / Save   | 16 x 32-bit registers | Not Permitted                     
 * 
 * 
 * 
 *  Peripheral space : segment F and E (From TriCoreTM TC1.6.2 core architecture manual, 8.3.4 Default Memory types for all segments)
 */



/******************************************************************************/


 
 
 
 

















typedef unsigned char  Ifx_UReg_8Bit;
typedef unsigned short Ifx_UReg_16Bit;
typedef unsigned int   Ifx_UReg_32Bit;
typedef signed char    Ifx_SReg_8Bit;
typedef signed short   Ifx_SReg_16Bit;
typedef signed int     Ifx_SReg_32Bit;


/******************************************************************************/

#line 58 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Infra\\Sfr\\TC38A\\_Reg\\IfxPort_regdef.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_P_Registers_Bitfields
 * \{  */
/** \brief Port n Access Enable Register 0 */
typedef struct _Ifx_P_ACCEN0_Bits
{
    Ifx_UReg_32Bit EN0:1;             /**< \brief [0:0] Access Enable for Master TAG ID 0 (rw) */
    Ifx_UReg_32Bit EN1:1;             /**< \brief [1:1] Access Enable for Master TAG ID 1 (rw) */
    Ifx_UReg_32Bit EN2:1;             /**< \brief [2:2] Access Enable for Master TAG ID 2 (rw) */
    Ifx_UReg_32Bit EN3:1;             /**< \brief [3:3] Access Enable for Master TAG ID 3 (rw) */
    Ifx_UReg_32Bit EN4:1;             /**< \brief [4:4] Access Enable for Master TAG ID 4 (rw) */
    Ifx_UReg_32Bit EN5:1;             /**< \brief [5:5] Access Enable for Master TAG ID 5 (rw) */
    Ifx_UReg_32Bit EN6:1;             /**< \brief [6:6] Access Enable for Master TAG ID 6 (rw) */
    Ifx_UReg_32Bit EN7:1;             /**< \brief [7:7] Access Enable for Master TAG ID 7 (rw) */
    Ifx_UReg_32Bit EN8:1;             /**< \brief [8:8] Access Enable for Master TAG ID 8 (rw) */
    Ifx_UReg_32Bit EN9:1;             /**< \brief [9:9] Access Enable for Master TAG ID 9 (rw) */
    Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Access Enable for Master TAG ID 10 (rw) */
    Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Access Enable for Master TAG ID 11 (rw) */
    Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Access Enable for Master TAG ID 12 (rw) */
    Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Access Enable for Master TAG ID 13 (rw) */
    Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Access Enable for Master TAG ID 14 (rw) */
    Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Access Enable for Master TAG ID 15 (rw) */
    Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Access Enable for Master TAG ID 16 (rw) */
    Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Access Enable for Master TAG ID 17 (rw) */
    Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Access Enable for Master TAG ID 18 (rw) */
    Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Access Enable for Master TAG ID 19 (rw) */
    Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Access Enable for Master TAG ID 20 (rw) */
    Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Access Enable for Master TAG ID 21 (rw) */
    Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Access Enable for Master TAG ID 22 (rw) */
    Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Access Enable for Master TAG ID 23 (rw) */
    Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Access Enable for Master TAG ID 24 (rw) */
    Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Access Enable for Master TAG ID 25 (rw) */
    Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Access Enable for Master TAG ID 26 (rw) */
    Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Access Enable for Master TAG ID 27 (rw) */
    Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Access Enable for Master TAG ID 28 (rw) */
    Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Access Enable for Master TAG ID 29 (rw) */
    Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Access Enable for Master TAG ID 30 (rw) */
    Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Access Enable for Master TAG ID 31 (rw) */
} Ifx_P_ACCEN0_Bits;

/** \brief Port n Access Enable Register 1 */
typedef struct _Ifx_P_ACCEN1_Bits
{
    Ifx_UReg_32Bit reserved_0:32;     /**< \brief [31:0] \internal Reserved */
} Ifx_P_ACCEN1_Bits;

/** \brief Port n Emergency Stop Register */
typedef struct _Ifx_P_ESR_Bits
{
    Ifx_UReg_32Bit EN0:1;             /**< \brief [0:0] Emergency Stop Enable for Pin 0 (rw) */
    Ifx_UReg_32Bit EN1:1;             /**< \brief [1:1] Emergency Stop Enable for Pin 1 (rw) */
    Ifx_UReg_32Bit EN2:1;             /**< \brief [2:2] Emergency Stop Enable for Pin 2 (rw) */
    Ifx_UReg_32Bit EN3:1;             /**< \brief [3:3] Emergency Stop Enable for Pin 3 (rw) */
    Ifx_UReg_32Bit EN4:1;             /**< \brief [4:4] Emergency Stop Enable for Pin 4 (rw) */
    Ifx_UReg_32Bit EN5:1;             /**< \brief [5:5] Emergency Stop Enable for Pin 5 (rw) */
    Ifx_UReg_32Bit EN6:1;             /**< \brief [6:6] Emergency Stop Enable for Pin 6 (rw) */
    Ifx_UReg_32Bit EN7:1;             /**< \brief [7:7] Emergency Stop Enable for Pin 7 (rw) */
    Ifx_UReg_32Bit EN8:1;             /**< \brief [8:8] Emergency Stop Enable for Pin 8 (rw) */
    Ifx_UReg_32Bit EN9:1;             /**< \brief [9:9] Emergency Stop Enable for Pin 9 (rw) */
    Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Emergency Stop Enable for Pin 10 (rw) */
    Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Emergency Stop Enable for Pin 11 (rw) */
    Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Emergency Stop Enable for Pin 12 (rw) */
    Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Emergency Stop Enable for Pin 13 (rw) */
    Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Emergency Stop Enable for Pin 14 (rw) */
    Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Emergency Stop Enable for Pin 15 (rw) */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_P_ESR_Bits;

/** \brief Port n Identification Register */
typedef struct _Ifx_P_ID_Bits
{
    Ifx_UReg_32Bit MODREV:8;          /**< \brief [7:0] Module Revision Number (r) */
    Ifx_UReg_32Bit MODTYPE:8;         /**< \brief [15:8] Module Type (r) */
    Ifx_UReg_32Bit MODNUMBER:16;      /**< \brief [31:16] Module Number (r) */
} Ifx_P_ID_Bits;

/** \brief Port n Input Register */
typedef struct _Ifx_P_IN_Bits
{
    Ifx_UReg_32Bit P0:1;              /**< \brief [0:0] Input Bit 0 (rh) */
    Ifx_UReg_32Bit P1:1;              /**< \brief [1:1] Input Bit 1 (rh) */
    Ifx_UReg_32Bit P2:1;              /**< \brief [2:2] Input Bit 2 (rh) */
    Ifx_UReg_32Bit P3:1;              /**< \brief [3:3] Input Bit 3 (rh) */
    Ifx_UReg_32Bit P4:1;              /**< \brief [4:4] Input Bit 4 (rh) */
    Ifx_UReg_32Bit P5:1;              /**< \brief [5:5] Input Bit 5 (rh) */
    Ifx_UReg_32Bit P6:1;              /**< \brief [6:6] Input Bit 6 (rh) */
    Ifx_UReg_32Bit P7:1;              /**< \brief [7:7] Input Bit 7 (rh) */
    Ifx_UReg_32Bit P8:1;              /**< \brief [8:8] Input Bit 8 (rh) */
    Ifx_UReg_32Bit P9:1;              /**< \brief [9:9] Input Bit 9 (rh) */
    Ifx_UReg_32Bit P10:1;             /**< \brief [10:10] Input Bit 10 (rh) */
    Ifx_UReg_32Bit P11:1;             /**< \brief [11:11] Input Bit 11 (rh) */
    Ifx_UReg_32Bit P12:1;             /**< \brief [12:12] Input Bit 12 (rh) */
    Ifx_UReg_32Bit P13:1;             /**< \brief [13:13] Input Bit 13 (rh) */
    Ifx_UReg_32Bit P14:1;             /**< \brief [14:14] Input Bit 14 (rh) */
    Ifx_UReg_32Bit P15:1;             /**< \brief [15:15] Input Bit 15 (rh) */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_P_IN_Bits;

/** \brief Port n Input/Output Control Register 0 */
typedef struct _Ifx_P_IOCR0_Bits
{
    Ifx_UReg_32Bit reserved_0:3;      /**< \brief [2:0] \internal Reserved */
    Ifx_UReg_32Bit PC0:5;             /**< \brief [7:3] Port Control for Pin 0 (rw) */
    Ifx_UReg_32Bit reserved_8:3;      /**< \brief [10:8] \internal Reserved */
    Ifx_UReg_32Bit PC1:5;             /**< \brief [15:11] Port Control for Pin 1 (rw) */
    Ifx_UReg_32Bit reserved_16:3;     /**< \brief [18:16] \internal Reserved */
    Ifx_UReg_32Bit PC2:5;             /**< \brief [23:19] Port Control for Pin 2 (rw) */
    Ifx_UReg_32Bit reserved_24:3;     /**< \brief [26:24] \internal Reserved */
    Ifx_UReg_32Bit PC3:5;             /**< \brief [31:27] Port Control for Pin 3 (rw) */
} Ifx_P_IOCR0_Bits;

/** \brief Port n Input/Output Control Register 12 */
typedef struct _Ifx_P_IOCR12_Bits
{
    Ifx_UReg_32Bit reserved_0:3;      /**< \brief [2:0] \internal Reserved */
    Ifx_UReg_32Bit PC12:5;            /**< \brief [7:3] Port Control for Port n Pin 12 (rw) */
    Ifx_UReg_32Bit reserved_8:3;      /**< \brief [10:8] \internal Reserved */
    Ifx_UReg_32Bit PC13:5;            /**< \brief [15:11] Port Control for Port n Pin 13 (rw) */
    Ifx_UReg_32Bit reserved_16:3;     /**< \brief [18:16] \internal Reserved */
    Ifx_UReg_32Bit PC14:5;            /**< \brief [23:19] Port Control for Port n Pin 14 (rw) */
    Ifx_UReg_32Bit reserved_24:3;     /**< \brief [26:24] \internal Reserved */
    Ifx_UReg_32Bit PC15:5;            /**< \brief [31:27] Port Control for Port n Pin 15 (rw) */
} Ifx_P_IOCR12_Bits;

/** \brief Port n Input/Output Control Register 4 */
typedef struct _Ifx_P_IOCR4_Bits
{
    Ifx_UReg_32Bit reserved_0:3;      /**< \brief [2:0] \internal Reserved */
    Ifx_UReg_32Bit PC4:5;             /**< \brief [7:3] Port Control for Port n Pin 4 (rw) */
    Ifx_UReg_32Bit reserved_8:3;      /**< \brief [10:8] \internal Reserved */
    Ifx_UReg_32Bit PC5:5;             /**< \brief [15:11] Port Control for Port n Pin 5 (rw) */
    Ifx_UReg_32Bit reserved_16:3;     /**< \brief [18:16] \internal Reserved */
    Ifx_UReg_32Bit PC6:5;             /**< \brief [23:19] Port Control for Port n Pin 6 (rw) */
    Ifx_UReg_32Bit reserved_24:3;     /**< \brief [26:24] \internal Reserved */
    Ifx_UReg_32Bit PC7:5;             /**< \brief [31:27] Port Control for Port n Pin 7 (rw) */
} Ifx_P_IOCR4_Bits;

/** \brief Port n Input/Output Control Register 8 */
typedef struct _Ifx_P_IOCR8_Bits
{
    Ifx_UReg_32Bit reserved_0:3;      /**< \brief [2:0] \internal Reserved */
    Ifx_UReg_32Bit PC8:5;             /**< \brief [7:3] Port Control for Port n Pin 8 (rw) */
    Ifx_UReg_32Bit reserved_8:3;      /**< \brief [10:8] \internal Reserved */
    Ifx_UReg_32Bit PC9:5;             /**< \brief [15:11] Port Control for Port n Pin 9 (rw) */
    Ifx_UReg_32Bit reserved_16:3;     /**< \brief [18:16] \internal Reserved */
    Ifx_UReg_32Bit PC10:5;            /**< \brief [23:19] Port Control for Port n Pin 10 (rw) */
    Ifx_UReg_32Bit reserved_24:3;     /**< \brief [26:24] \internal Reserved */
    Ifx_UReg_32Bit PC11:5;            /**< \brief [31:27] Port Control for Port n Pin 11 (rw) */
} Ifx_P_IOCR8_Bits;

/** \brief Port n LVDS Pad Control Register ${x} */
typedef struct _Ifx_P_LPCR_Bits
{
    Ifx_UReg_32Bit REN_CTRL:1;        /**< \brief [0:0] LVDS RX_EN controller (rw) */
    Ifx_UReg_32Bit RX_EN:1;           /**< \brief [1:1] Enable Receive LVDS (rw) */
    Ifx_UReg_32Bit TERM:1;            /**< \brief [2:2] Select Receiver Termination Mode (rw) */
    Ifx_UReg_32Bit LRXTERM:3;         /**< \brief [5:3] LVDS RX Poly-resistor configuration value (rw) */
    Ifx_UReg_32Bit LVDSM:1;           /**< \brief [6:6] LVDS-M Mode (rw) */
    Ifx_UReg_32Bit PS:1;              /**< \brief [7:7] Pad Supply Selection (rw) */
    Ifx_UReg_32Bit TEN_CTRL:1;        /**< \brief [8:8] LVDS TX_EN controller (rw) */
    Ifx_UReg_32Bit TX_EN:1;           /**< \brief [9:9] Enable Transmit LVDS (rw) */
    Ifx_UReg_32Bit VDIFFADJ:2;        /**< \brief [11:10] LVDS Output Amplitude Tuning (rw) */
    Ifx_UReg_32Bit VOSDYN:1;          /**< \brief [12:12] Tune Bit of VOS Control Loop Static/Dynamic (rw) */
    Ifx_UReg_32Bit VOSEXT:1;          /**< \brief [13:13] Tune Bit of VOS Control Loop Internal/External (rw) */
    Ifx_UReg_32Bit TX_PD:1;           /**< \brief [14:14] LVDS Power Down (rw) */
    Ifx_UReg_32Bit TX_PWDPD:1;        /**< \brief [15:15] Enable TX Power down pull down. (rw) */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_P_LPCR_Bits;

/** \brief Port n Output Modification Clear Register */
typedef struct _Ifx_P_OMCR_Bits
{
    Ifx_UReg_32Bit reserved_0:16;     /**< \brief [15:0] \internal Reserved */
    Ifx_UReg_32Bit PCL0:1;            /**< \brief [16:16] Clear Bit 0 (w) */
    Ifx_UReg_32Bit PCL1:1;            /**< \brief [17:17] Clear Bit 1 (w) */
    Ifx_UReg_32Bit PCL2:1;            /**< \brief [18:18] Clear Bit 2 (w) */
    Ifx_UReg_32Bit PCL3:1;            /**< \brief [19:19] Clear Bit 3 (w) */
    Ifx_UReg_32Bit PCL4:1;            /**< \brief [20:20] Clear Bit 4 (w) */
    Ifx_UReg_32Bit PCL5:1;            /**< \brief [21:21] Clear Bit 5 (w) */
    Ifx_UReg_32Bit PCL6:1;            /**< \brief [22:22] Clear Bit 6 (w) */
    Ifx_UReg_32Bit PCL7:1;            /**< \brief [23:23] Clear Bit 7 (w) */
    Ifx_UReg_32Bit PCL8:1;            /**< \brief [24:24] Clear Bit 8 (w) */
    Ifx_UReg_32Bit PCL9:1;            /**< \brief [25:25] Clear Bit 9 (w) */
    Ifx_UReg_32Bit PCL10:1;           /**< \brief [26:26] Clear Bit 10 (w) */
    Ifx_UReg_32Bit PCL11:1;           /**< \brief [27:27] Clear Bit 11 (w) */
    Ifx_UReg_32Bit PCL12:1;           /**< \brief [28:28] Clear Bit 12 (w) */
    Ifx_UReg_32Bit PCL13:1;           /**< \brief [29:29] Clear Bit 13 (w) */
    Ifx_UReg_32Bit PCL14:1;           /**< \brief [30:30] Clear Bit 14 (w) */
    Ifx_UReg_32Bit PCL15:1;           /**< \brief [31:31] Clear Bit 15 (w) */
} Ifx_P_OMCR_Bits;

/** \brief Port n Output Modification Clear Register 0 */
typedef struct _Ifx_P_OMCR0_Bits
{
    Ifx_UReg_32Bit reserved_0:16;     /**< \brief [15:0] \internal Reserved */
    Ifx_UReg_32Bit PCL0:1;            /**< \brief [16:16] Clear Bit 0 (w) */
    Ifx_UReg_32Bit PCL1:1;            /**< \brief [17:17] Clear Bit 1 (w) */
    Ifx_UReg_32Bit PCL2:1;            /**< \brief [18:18] Clear Bit 2 (w) */
    Ifx_UReg_32Bit PCL3:1;            /**< \brief [19:19] Clear Bit 3 (w) */
    Ifx_UReg_32Bit reserved_20:12;    /**< \brief [31:20] \internal Reserved */
} Ifx_P_OMCR0_Bits;

/** \brief Port n Output Modification Clear Register 12 */
typedef struct _Ifx_P_OMCR12_Bits
{
    Ifx_UReg_32Bit reserved_0:28;     /**< \brief [27:0] \internal Reserved */
    Ifx_UReg_32Bit PCL12:1;           /**< \brief [28:28] Clear Bit 12 (w) */
    Ifx_UReg_32Bit PCL13:1;           /**< \brief [29:29] Clear Bit 13 (w) */
    Ifx_UReg_32Bit PCL14:1;           /**< \brief [30:30] Clear Bit 14 (w) */
    Ifx_UReg_32Bit PCL15:1;           /**< \brief [31:31] Clear Bit 15 (w) */
} Ifx_P_OMCR12_Bits;

/** \brief Port n Output Modification Clear Register 4 */
typedef struct _Ifx_P_OMCR4_Bits
{
    Ifx_UReg_32Bit reserved_0:20;     /**< \brief [19:0] \internal Reserved */
    Ifx_UReg_32Bit PCL4:1;            /**< \brief [20:20] Clear Bit 4 (w) */
    Ifx_UReg_32Bit PCL5:1;            /**< \brief [21:21] Clear Bit 5 (w) */
    Ifx_UReg_32Bit PCL6:1;            /**< \brief [22:22] Clear Bit 6 (w) */
    Ifx_UReg_32Bit PCL7:1;            /**< \brief [23:23] Clear Bit 7 (w) */
    Ifx_UReg_32Bit reserved_24:8;     /**< \brief [31:24] \internal Reserved */
} Ifx_P_OMCR4_Bits;

/** \brief Port n Output Modification Clear Register 8 */
typedef struct _Ifx_P_OMCR8_Bits
{
    Ifx_UReg_32Bit reserved_0:24;     /**< \brief [23:0] \internal Reserved */
    Ifx_UReg_32Bit PCL8:1;            /**< \brief [24:24] Clear Bit 8 (w) */
    Ifx_UReg_32Bit PCL9:1;            /**< \brief [25:25] Clear Bit 9 (w) */
    Ifx_UReg_32Bit PCL10:1;           /**< \brief [26:26] Clear Bit 10 (w) */
    Ifx_UReg_32Bit PCL11:1;           /**< \brief [27:27] Clear Bit 11 (w) */
    Ifx_UReg_32Bit reserved_28:4;     /**< \brief [31:28] \internal Reserved */
} Ifx_P_OMCR8_Bits;

/** \brief Port n Output Modification Register */
typedef struct _Ifx_P_OMR_Bits
{
    Ifx_UReg_32Bit PS0:1;             /**< \brief [0:0] Set Bit 0 (w) */
    Ifx_UReg_32Bit PS1:1;             /**< \brief [1:1] Set Bit 1 (w) */
    Ifx_UReg_32Bit PS2:1;             /**< \brief [2:2] Set Bit 2 (w) */
    Ifx_UReg_32Bit PS3:1;             /**< \brief [3:3] Set Bit 3 (w) */
    Ifx_UReg_32Bit PS4:1;             /**< \brief [4:4] Set Bit 4 (w) */
    Ifx_UReg_32Bit PS5:1;             /**< \brief [5:5] Set Bit 5 (w) */
    Ifx_UReg_32Bit PS6:1;             /**< \brief [6:6] Set Bit 6 (w) */
    Ifx_UReg_32Bit PS7:1;             /**< \brief [7:7] Set Bit 7 (w) */
    Ifx_UReg_32Bit PS8:1;             /**< \brief [8:8] Set Bit 8 (w) */
    Ifx_UReg_32Bit PS9:1;             /**< \brief [9:9] Set Bit 9 (w) */
    Ifx_UReg_32Bit PS10:1;            /**< \brief [10:10] Set Bit 10 (w) */
    Ifx_UReg_32Bit PS11:1;            /**< \brief [11:11] Set Bit 11 (w) */
    Ifx_UReg_32Bit PS12:1;            /**< \brief [12:12] Set Bit 12 (w) */
    Ifx_UReg_32Bit PS13:1;            /**< \brief [13:13] Set Bit 13 (w) */
    Ifx_UReg_32Bit PS14:1;            /**< \brief [14:14] Set Bit 14 (w) */
    Ifx_UReg_32Bit PS15:1;            /**< \brief [15:15] Set Bit 15 (w) */
    Ifx_UReg_32Bit PCL0:1;            /**< \brief [16:16] Clear Bit 0 (w) */
    Ifx_UReg_32Bit PCL1:1;            /**< \brief [17:17] Clear Bit 1 (w) */
    Ifx_UReg_32Bit PCL2:1;            /**< \brief [18:18] Clear Bit 2 (w) */
    Ifx_UReg_32Bit PCL3:1;            /**< \brief [19:19] Clear Bit 3 (w) */
    Ifx_UReg_32Bit PCL4:1;            /**< \brief [20:20] Clear Bit 4 (w) */
    Ifx_UReg_32Bit PCL5:1;            /**< \brief [21:21] Clear Bit 5 (w) */
    Ifx_UReg_32Bit PCL6:1;            /**< \brief [22:22] Clear Bit 6 (w) */
    Ifx_UReg_32Bit PCL7:1;            /**< \brief [23:23] Clear Bit 7 (w) */
    Ifx_UReg_32Bit PCL8:1;            /**< \brief [24:24] Clear Bit 8 (w) */
    Ifx_UReg_32Bit PCL9:1;            /**< \brief [25:25] Clear Bit 9 (w) */
    Ifx_UReg_32Bit PCL10:1;           /**< \brief [26:26] Clear Bit 10 (w) */
    Ifx_UReg_32Bit PCL11:1;           /**< \brief [27:27] Clear Bit 11 (w) */
    Ifx_UReg_32Bit PCL12:1;           /**< \brief [28:28] Clear Bit 12 (w) */
    Ifx_UReg_32Bit PCL13:1;           /**< \brief [29:29] Clear Bit 13 (w) */
    Ifx_UReg_32Bit PCL14:1;           /**< \brief [30:30] Clear Bit 14 (w) */
    Ifx_UReg_32Bit PCL15:1;           /**< \brief [31:31] Clear Bit 15 (w) */
} Ifx_P_OMR_Bits;

/** \brief Port n Output Modification Set Register */
typedef struct _Ifx_P_OMSR_Bits
{
    Ifx_UReg_32Bit PS0:1;             /**< \brief [0:0] Set Bit 0 (w) */
    Ifx_UReg_32Bit PS1:1;             /**< \brief [1:1] Set Bit 1 (w) */
    Ifx_UReg_32Bit PS2:1;             /**< \brief [2:2] Set Bit 2 (w) */
    Ifx_UReg_32Bit PS3:1;             /**< \brief [3:3] Set Bit 3 (w) */
    Ifx_UReg_32Bit PS4:1;             /**< \brief [4:4] Set Bit 4 (w) */
    Ifx_UReg_32Bit PS5:1;             /**< \brief [5:5] Set Bit 5 (w) */
    Ifx_UReg_32Bit PS6:1;             /**< \brief [6:6] Set Bit 6 (w) */
    Ifx_UReg_32Bit PS7:1;             /**< \brief [7:7] Set Bit 7 (w) */
    Ifx_UReg_32Bit PS8:1;             /**< \brief [8:8] Set Bit 8 (w) */
    Ifx_UReg_32Bit PS9:1;             /**< \brief [9:9] Set Bit 9 (w) */
    Ifx_UReg_32Bit PS10:1;            /**< \brief [10:10] Set Bit 10 (w) */
    Ifx_UReg_32Bit PS11:1;            /**< \brief [11:11] Set Bit 11 (w) */
    Ifx_UReg_32Bit PS12:1;            /**< \brief [12:12] Set Bit 12 (w) */
    Ifx_UReg_32Bit PS13:1;            /**< \brief [13:13] Set Bit 13 (w) */
    Ifx_UReg_32Bit PS14:1;            /**< \brief [14:14] Set Bit 14 (w) */
    Ifx_UReg_32Bit PS15:1;            /**< \brief [15:15] Set Bit 15 (w) */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_P_OMSR_Bits;

/** \brief Port n Output Modification Set Register 0 */
typedef struct _Ifx_P_OMSR0_Bits
{
    Ifx_UReg_32Bit PS0:1;             /**< \brief [0:0] Set Bit 0 (w) */
    Ifx_UReg_32Bit PS1:1;             /**< \brief [1:1] Set Bit 1 (w) */
    Ifx_UReg_32Bit PS2:1;             /**< \brief [2:2] Set Bit 2 (w) */
    Ifx_UReg_32Bit PS3:1;             /**< \brief [3:3] Set Bit 3 (w) */
    Ifx_UReg_32Bit reserved_4:28;     /**< \brief [31:4] \internal Reserved */
} Ifx_P_OMSR0_Bits;

/** \brief Port n Output Modification Set Register 12 */
typedef struct _Ifx_P_OMSR12_Bits
{
    Ifx_UReg_32Bit reserved_0:12;     /**< \brief [11:0] \internal Reserved */
    Ifx_UReg_32Bit PS12:1;            /**< \brief [12:12] Set Bit 12 (w) */
    Ifx_UReg_32Bit PS13:1;            /**< \brief [13:13] Set Bit 13 (w) */
    Ifx_UReg_32Bit PS14:1;            /**< \brief [14:14] Set Bit 14 (w) */
    Ifx_UReg_32Bit PS15:1;            /**< \brief [15:15] Set Bit 15 (w) */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_P_OMSR12_Bits;

/** \brief Port n Output Modification Set Register 4 */
typedef struct _Ifx_P_OMSR4_Bits
{
    Ifx_UReg_32Bit reserved_0:4;      /**< \brief [3:0] \internal Reserved */
    Ifx_UReg_32Bit PS4:1;             /**< \brief [4:4] Set Bit 4 (w) */
    Ifx_UReg_32Bit PS5:1;             /**< \brief [5:5] Set Bit 5 (w) */
    Ifx_UReg_32Bit PS6:1;             /**< \brief [6:6] Set Bit 6 (w) */
    Ifx_UReg_32Bit PS7:1;             /**< \brief [7:7] Set Bit 7 (w) */
    Ifx_UReg_32Bit reserved_8:24;     /**< \brief [31:8] \internal Reserved */
} Ifx_P_OMSR4_Bits;

/** \brief Port n Output Modification Set Register 8 */
typedef struct _Ifx_P_OMSR8_Bits
{
    Ifx_UReg_32Bit reserved_0:8;      /**< \brief [7:0] \internal Reserved */
    Ifx_UReg_32Bit PS8:1;             /**< \brief [8:8] Set Bit 8 (w) */
    Ifx_UReg_32Bit PS9:1;             /**< \brief [9:9] Set Bit 9 (w) */
    Ifx_UReg_32Bit PS10:1;            /**< \brief [10:10] Set Bit 10 (w) */
    Ifx_UReg_32Bit PS11:1;            /**< \brief [11:11] Set Bit 11 (w) */
    Ifx_UReg_32Bit reserved_12:20;    /**< \brief [31:12] \internal Reserved */
} Ifx_P_OMSR8_Bits;

/** \brief Port n Output Register */
typedef struct _Ifx_P_OUT_Bits
{
    Ifx_UReg_32Bit P0:1;              /**< \brief [0:0] Output Bit 0 (rwh) */
    Ifx_UReg_32Bit P1:1;              /**< \brief [1:1] Output Bit 1 (rwh) */
    Ifx_UReg_32Bit P2:1;              /**< \brief [2:2] Output Bit 2 (rwh) */
    Ifx_UReg_32Bit P3:1;              /**< \brief [3:3] Output Bit 3 (rwh) */
    Ifx_UReg_32Bit P4:1;              /**< \brief [4:4] Output Bit 4 (rwh) */
    Ifx_UReg_32Bit P5:1;              /**< \brief [5:5] Output Bit 5 (rwh) */
    Ifx_UReg_32Bit P6:1;              /**< \brief [6:6] Output Bit 6 (rwh) */
    Ifx_UReg_32Bit P7:1;              /**< \brief [7:7] Output Bit 7 (rwh) */
    Ifx_UReg_32Bit P8:1;              /**< \brief [8:8] Output Bit 8 (rwh) */
    Ifx_UReg_32Bit P9:1;              /**< \brief [9:9] Output Bit 9 (rwh) */
    Ifx_UReg_32Bit P10:1;             /**< \brief [10:10] Output Bit 10 (rwh) */
    Ifx_UReg_32Bit P11:1;             /**< \brief [11:11] Output Bit 11 (rwh) */
    Ifx_UReg_32Bit P12:1;             /**< \brief [12:12] Output Bit 12 (rwh) */
    Ifx_UReg_32Bit P13:1;             /**< \brief [13:13] Output Bit 13 (rwh) */
    Ifx_UReg_32Bit P14:1;             /**< \brief [14:14] Output Bit 14 (rwh) */
    Ifx_UReg_32Bit P15:1;             /**< \brief [15:15] Output Bit 15 (rwh) */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_P_OUT_Bits;

/** \brief Port n Pin Controller Select Register */
typedef struct _Ifx_P_PCSR_Bits
{
    Ifx_UReg_32Bit SEL0:1;            /**< \brief [0:0] Output Select for Pin 0 (rw) */
    Ifx_UReg_32Bit SEL1:1;            /**< \brief [1:1] Output Select for Pin 1 (rw) */
    Ifx_UReg_32Bit SEL2:1;            /**< \brief [2:2] Output Select for Pin 2 (rw) */
    Ifx_UReg_32Bit SEL3:1;            /**< \brief [3:3] Output Select for Pin 3 (rw) */
    Ifx_UReg_32Bit SEL4:1;            /**< \brief [4:4] Output Select for Pin 4 (rw) */
    Ifx_UReg_32Bit SEL5:1;            /**< \brief [5:5] Output Select for Pin 5 (rw) */
    Ifx_UReg_32Bit SEL6:1;            /**< \brief [6:6] Output Select for Pin 6 (rw) */
    Ifx_UReg_32Bit SEL7:1;            /**< \brief [7:7] Output Select for Pin 7 (rw) */
    Ifx_UReg_32Bit SEL8:1;            /**< \brief [8:8] Output Select for Pin 8 (rw) */
    Ifx_UReg_32Bit SEL9:1;            /**< \brief [9:9] Output Select for Pin 9 (rw) */
    Ifx_UReg_32Bit SEL10:1;           /**< \brief [10:10] Output Select for Pin 10 (rw) */
    Ifx_UReg_32Bit SEL11:1;           /**< \brief [11:11] Output Select for Pin 11 (rw) */
    Ifx_UReg_32Bit SEL12:1;           /**< \brief [12:12] Output Select for Pin 12 (rw) */
    Ifx_UReg_32Bit SEL13:1;           /**< \brief [13:13] Output Select for Pin 13 (rw) */
    Ifx_UReg_32Bit SEL14:1;           /**< \brief [14:14] Output Select for Pin 14 (rw) */
    Ifx_UReg_32Bit SEL15:1;           /**< \brief [15:15] Output Select for Pin 15 (rw) */
    Ifx_UReg_32Bit reserved_16:15;    /**< \brief [30:16] \internal Reserved */
    Ifx_UReg_32Bit LCK:1;             /**< \brief [31:31] Lock Status (rh) */
} Ifx_P_PCSR_Bits;

/** \brief Port n Pin Function Decision Control Register */
typedef struct _Ifx_P_PDISC_Bits
{
    Ifx_UReg_32Bit PDIS0:1;           /**< \brief [0:0] Pin Function Decision Control for Pin 0 (rw) */
    Ifx_UReg_32Bit PDIS1:1;           /**< \brief [1:1] Pin Function Decision Control for Pin 1 (rw) */
    Ifx_UReg_32Bit PDIS2:1;           /**< \brief [2:2] Pin Function Decision Control for Pin 2 (rw) */
    Ifx_UReg_32Bit PDIS3:1;           /**< \brief [3:3] Pin Function Decision Control for Pin 3 (rw) */
    Ifx_UReg_32Bit PDIS4:1;           /**< \brief [4:4] Pin Function Decision Control for Pin 4 (rw) */
    Ifx_UReg_32Bit PDIS5:1;           /**< \brief [5:5] Pin Function Decision Control for Pin 5 (rw) */
    Ifx_UReg_32Bit PDIS6:1;           /**< \brief [6:6] Pin Function Decision Control for Pin 6 (rw) */
    Ifx_UReg_32Bit PDIS7:1;           /**< \brief [7:7] Pin Function Decision Control for Pin 7 (rw) */
    Ifx_UReg_32Bit PDIS8:1;           /**< \brief [8:8] Pin Function Decision Control for Pin 8 (rw) */
    Ifx_UReg_32Bit PDIS9:1;           /**< \brief [9:9] Pin Function Decision Control for Pin 9 (rw) */
    Ifx_UReg_32Bit PDIS10:1;          /**< \brief [10:10] Pin Function Decision Control for Pin 10 (rw) */
    Ifx_UReg_32Bit PDIS11:1;          /**< \brief [11:11] Pin Function Decision Control for Pin 11 (rw) */
    Ifx_UReg_32Bit PDIS12:1;          /**< \brief [12:12] Pin Function Decision Control for Pin 12 (rw) */
    Ifx_UReg_32Bit PDIS13:1;          /**< \brief [13:13] Pin Function Decision Control for Pin 13 (rw) */
    Ifx_UReg_32Bit PDIS14:1;          /**< \brief [14:14] Pin Function Decision Control for Pin 14 (rw) */
    Ifx_UReg_32Bit PDIS15:1;          /**< \brief [15:15] Pin Function Decision Control for Pin 15 (rw) */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_P_PDISC_Bits;

/** \brief Port n Pad Driver Mode Register 0 */
typedef struct _Ifx_P_PDR0_Bits
{
    Ifx_UReg_32Bit PD0:2;             /**< \brief [1:0] Pad Driver Mode for Pin 0 (rw) */
    Ifx_UReg_32Bit PL0:2;             /**< \brief [3:2] Pad Level Selection for Pin 0 (rw) */
    Ifx_UReg_32Bit PD1:2;             /**< \brief [5:4] Pad Driver Mode for Pin 1 (rw) */
    Ifx_UReg_32Bit PL1:2;             /**< \brief [7:6] Pad Level Selection for Pin 1 (rw) */
    Ifx_UReg_32Bit PD2:2;             /**< \brief [9:8] Pad Driver Mode for Pin 2 (rw) */
    Ifx_UReg_32Bit PL2:2;             /**< \brief [11:10] Pad Level Selection for Pin 2 (rw) */
    Ifx_UReg_32Bit PD3:2;             /**< \brief [13:12] Pad Driver Mode for Pin 3 (rw) */
    Ifx_UReg_32Bit PL3:2;             /**< \brief [15:14] Pad Level Selection for Pin 3 (rw) */
    Ifx_UReg_32Bit PD4:2;             /**< \brief [17:16] Pad Driver Mode for Pin 4 (rw) */
    Ifx_UReg_32Bit PL4:2;             /**< \brief [19:18] Pad Level Selection for Pin 4 (rw) */
    Ifx_UReg_32Bit PD5:2;             /**< \brief [21:20] Pad Driver Mode for Pin 5 (rw) */
    Ifx_UReg_32Bit PL5:2;             /**< \brief [23:22] Pad Level Selection for Pin 5 (rw) */
    Ifx_UReg_32Bit PD6:2;             /**< \brief [25:24] Pad Driver Mode for Pin 6 (rw) */
    Ifx_UReg_32Bit PL6:2;             /**< \brief [27:26] Pad Level Selection for Pin 6 (rw) */
    Ifx_UReg_32Bit PD7:2;             /**< \brief [29:28] Pad Driver Mode for Pin 7 (rw) */
    Ifx_UReg_32Bit PL7:2;             /**< \brief [31:30] Pad Level Selection for Pin 7 (rw) */
} Ifx_P_PDR0_Bits;

/** \brief Port n Pad Driver Mode Register 1 */
typedef struct _Ifx_P_PDR1_Bits
{
    Ifx_UReg_32Bit PD8:2;             /**< \brief [1:0] Pad Driver Mode for Pin 8 (rw) */
    Ifx_UReg_32Bit PL8:2;             /**< \brief [3:2] Pad Level Selection for Pin 8 (rw) */
    Ifx_UReg_32Bit PD9:2;             /**< \brief [5:4] Pad Driver Mode for Pin 9 (rw) */
    Ifx_UReg_32Bit PL9:2;             /**< \brief [7:6] Pad Level Selection for Pin 9 (rw) */
    Ifx_UReg_32Bit PD10:2;            /**< \brief [9:8] Pad Driver Mode for Pin 10 (rw) */
    Ifx_UReg_32Bit PL10:2;            /**< \brief [11:10] Pad Level Selection for Pin 10 (rw) */
    Ifx_UReg_32Bit PD11:2;            /**< \brief [13:12] Pad Driver Mode for Pin 11 (rw) */
    Ifx_UReg_32Bit PL11:2;            /**< \brief [15:14] Pad Level Selection for Pin 11 (rw) */
    Ifx_UReg_32Bit PD12:2;            /**< \brief [17:16] Pad Driver Mode for Pin 12 (rw) */
    Ifx_UReg_32Bit PL12:2;            /**< \brief [19:18] Pad Level Selection for Pin 12 (rw) */
    Ifx_UReg_32Bit PD13:2;            /**< \brief [21:20] Pad Driver Mode for Pin 13 (rw) */
    Ifx_UReg_32Bit PL13:2;            /**< \brief [23:22] Pad Level Selection for Pin 13 (rw) */
    Ifx_UReg_32Bit PD14:2;            /**< \brief [25:24] Pad Driver Mode for Pin 14 (rw) */
    Ifx_UReg_32Bit PL14:2;            /**< \brief [27:26] Pad Level Selection for Pin 14 (rw) */
    Ifx_UReg_32Bit PD15:2;            /**< \brief [29:28] Pad Driver Mode for Pin 15 (rw) */
    Ifx_UReg_32Bit PL15:2;            /**< \brief [31:30] Pad Level Selection for Pin 15 (rw) */
} Ifx_P_PDR1_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_p_Registers_union
 * \{   */
/** \brief Port n Access Enable Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_ACCEN0_Bits B;              /**< \brief Bitfield access */
} Ifx_P_ACCEN0;

/** \brief Port n Access Enable Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_ACCEN1_Bits B;              /**< \brief Bitfield access */
} Ifx_P_ACCEN1;

/** \brief Port n Emergency Stop Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_ESR_Bits B;                 /**< \brief Bitfield access */
} Ifx_P_ESR;

/** \brief Port n Identification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_ID_Bits B;                  /**< \brief Bitfield access */
} Ifx_P_ID;

/** \brief Port n Input Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_IN_Bits B;                  /**< \brief Bitfield access */
} Ifx_P_IN;

/** \brief Port n Input/Output Control Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_IOCR0_Bits B;               /**< \brief Bitfield access */
} Ifx_P_IOCR0;

/** \brief Port n Input/Output Control Register 12   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_IOCR12_Bits B;              /**< \brief Bitfield access */
} Ifx_P_IOCR12;

/** \brief Port n Input/Output Control Register 4   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_IOCR4_Bits B;               /**< \brief Bitfield access */
} Ifx_P_IOCR4;

/** \brief Port n Input/Output Control Register 8   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_IOCR8_Bits B;               /**< \brief Bitfield access */
} Ifx_P_IOCR8;

/** \brief Port n LVDS Pad Control Register ${x}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_LPCR_Bits B;                /**< \brief Bitfield access */
} Ifx_P_LPCR;

/** \brief Port n Output Modification Clear Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OMCR_Bits B;                /**< \brief Bitfield access */
} Ifx_P_OMCR;

/** \brief Port n Output Modification Clear Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OMCR0_Bits B;               /**< \brief Bitfield access */
} Ifx_P_OMCR0;

/** \brief Port n Output Modification Clear Register 12   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OMCR12_Bits B;              /**< \brief Bitfield access */
} Ifx_P_OMCR12;

/** \brief Port n Output Modification Clear Register 4   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OMCR4_Bits B;               /**< \brief Bitfield access */
} Ifx_P_OMCR4;

/** \brief Port n Output Modification Clear Register 8   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OMCR8_Bits B;               /**< \brief Bitfield access */
} Ifx_P_OMCR8;

/** \brief Port n Output Modification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OMR_Bits B;                 /**< \brief Bitfield access */
} Ifx_P_OMR;

/** \brief Port n Output Modification Set Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OMSR_Bits B;                /**< \brief Bitfield access */
} Ifx_P_OMSR;

/** \brief Port n Output Modification Set Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OMSR0_Bits B;               /**< \brief Bitfield access */
} Ifx_P_OMSR0;

/** \brief Port n Output Modification Set Register 12   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OMSR12_Bits B;              /**< \brief Bitfield access */
} Ifx_P_OMSR12;

/** \brief Port n Output Modification Set Register 4   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OMSR4_Bits B;               /**< \brief Bitfield access */
} Ifx_P_OMSR4;

/** \brief Port n Output Modification Set Register 8   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OMSR8_Bits B;               /**< \brief Bitfield access */
} Ifx_P_OMSR8;

/** \brief Port n Output Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OUT_Bits B;                 /**< \brief Bitfield access */
} Ifx_P_OUT;

/** \brief Port n Pin Controller Select Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_PCSR_Bits B;                /**< \brief Bitfield access */
} Ifx_P_PCSR;

/** \brief Port n Pin Function Decision Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_PDISC_Bits B;               /**< \brief Bitfield access */
} Ifx_P_PDISC;

/** \brief Port n Pad Driver Mode Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_PDR0_Bits B;                /**< \brief Bitfield access */
} Ifx_P_PDR0;

/** \brief Port n Pad Driver Mode Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_PDR1_Bits B;                /**< \brief Bitfield access */
} Ifx_P_PDR1;

/** \}  */

/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief P object */
typedef volatile struct _Ifx_P
{
       Ifx_P_OUT                           OUT;                    /**< \brief 0, Port n Output Register*/
       Ifx_P_OMR                           OMR;                    /**< \brief 4, Port n Output Modification Register*/
       Ifx_P_ID                            ID;                     /**< \brief 8, Port n Identification Register*/
       Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       Ifx_P_IOCR0                         IOCR0;                  /**< \brief 10, Port n Input/Output Control Register 0*/
       Ifx_P_IOCR4                         IOCR4;                  /**< \brief 14, Port n Input/Output Control Register 4*/
       Ifx_P_IOCR8                         IOCR8;                  /**< \brief 18, Port n Input/Output Control Register 8*/
       Ifx_P_IOCR12                        IOCR12;                 /**< \brief 1C, Port n Input/Output Control Register 12*/
       Ifx_UReg_8Bit                       reserved_20[4];         /**< \brief 20, \internal Reserved */
       Ifx_P_IN                            IN;                     /**< \brief 24, Port n Input Register*/
       Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       Ifx_P_PDR0                          PDR0;                   /**< \brief 40, Port n Pad Driver Mode Register 0*/
       Ifx_P_PDR1                          PDR1;                   /**< \brief 44, Port n Pad Driver Mode Register 1*/
       Ifx_UReg_8Bit                       reserved_48[8];         /**< \brief 48, \internal Reserved */
       Ifx_P_ESR                           ESR;                    /**< \brief 50, Port n Emergency Stop Register*/
       Ifx_UReg_8Bit                       reserved_54[12];        /**< \brief 54, \internal Reserved */
       Ifx_P_PDISC                         PDISC;                  /**< \brief 60, Port n Pin Function Decision Control Register*/
       Ifx_P_PCSR                          PCSR;                   /**< \brief 64, Port n Pin Controller Select Register*/
       Ifx_UReg_8Bit                       reserved_68[8];         /**< \brief 68, \internal Reserved */
       Ifx_P_OMSR0                         OMSR0;                  /**< \brief 70, Port n Output Modification Set Register 0*/
       Ifx_P_OMSR4                         OMSR4;                  /**< \brief 74, Port n Output Modification Set Register 4*/
       Ifx_P_OMSR8                         OMSR8;                  /**< \brief 78, Port n Output Modification Set Register 8*/
       Ifx_P_OMSR12                        OMSR12;                 /**< \brief 7C, Port n Output Modification Set Register 12*/
       Ifx_P_OMCR0                         OMCR0;                  /**< \brief 80, Port n Output Modification Clear Register 0*/
       Ifx_P_OMCR4                         OMCR4;                  /**< \brief 84, Port n Output Modification Clear Register 4*/
       Ifx_P_OMCR8                         OMCR8;                  /**< \brief 88, Port n Output Modification Clear Register 8*/
       Ifx_P_OMCR12                        OMCR12;                 /**< \brief 8C, Port n Output Modification Clear Register 12*/
       Ifx_P_OMSR                          OMSR;                   /**< \brief 90, Port n Output Modification Set Register*/
       Ifx_P_OMCR                          OMCR;                   /**< \brief 94, Port n Output Modification Clear Register*/
       Ifx_UReg_8Bit                       reserved_98[8];         /**< \brief 98, \internal Reserved */
       Ifx_P_LPCR                          LPCR[8];                /**< \brief A0, Port n LVDS Pad Control Register ${x}*/
       Ifx_UReg_8Bit                       reserved_C0[56];        /**< \brief C0, \internal Reserved */
       Ifx_P_ACCEN1                        ACCEN1;                 /**< \brief F8, Port n Access Enable Register 1*/
       Ifx_P_ACCEN0                        ACCEN0;                 /**< \brief FC, Port n Access Enable Register 0*/
} Ifx_P;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/


#line 123 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Infra\\Sfr\\TC38A\\_Reg\\IfxPort_reg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/** \addtogroup IfxSfr_P_Registers_Cfg_BaseAddress
 * \{  */

/** \brief P object */























/** \}  */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P00
 * \{  */
/** \brief 0, Port 00 Output Register */


/** \brief 4, Port 00 Output Modification Register */


/** \brief 8, Port 00 Identification Register */


/** \brief 10, Port 00 Input/Output Control Register 0 */


/** \brief 14, Port 00 Input/Output Control Register 4 */


/** \brief 18, Port 00 Input/Output Control Register 8 */


/** \brief 1C, Port 00 Input/Output Control Register 12 */


/** \brief 24, Port 00 Input Register */


/** \brief 40, Port 00 Pad Driver Mode Register 0 */


/** \brief 44, Port 00 Pad Driver Mode Register 1 */


/** \brief 50, Port 00 Emergency Stop Register */


/** \brief 60, Port 00 Pin Function Decision Control Register */


/** \brief 64, Port 00 Pin Controller Select Register */


/** \brief 70, Port 00 Output Modification Set Register 0 */


/** \brief 74, Port 00 Output Modification Set Register 4 */


/** \brief 78, Port 00 Output Modification Set Register 8 */


/** \brief 7C, Port 00 Output Modification Set Register 12 */


/** \brief 80, Port 00 Output Modification Clear Register 0 */


/** \brief 84, Port 00 Output Modification Clear Register 4 */


/** \brief 88, Port 00 Output Modification Clear Register 8 */


/** \brief 8C, Port 00 Output Modification Clear Register 12 */


/** \brief 90, Port 00 Output Modification Set Register */


/** \brief 94, Port 00 Output Modification Clear Register */


/** \brief F8, Port 00 Access Enable Register 1 */


/** \brief FC, Port 00 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P01
 * \{  */
/** \brief 0, Port 01 Output Register */


/** \brief 4, Port 01 Output Modification Register */


/** \brief 8, Port 01 Identification Register */


/** \brief 10, Port 01 Input/Output Control Register 0 */


/** \brief 14, Port 01 Input/Output Control Register 4 */


/** \brief 18, Port 01 Input/Output Control Register 8 */


/** \brief 1C, Port 01 Input/Output Control Register 12 */


/** \brief 24, Port 01 Input Register */


/** \brief 40, Port 01 Pad Driver Mode Register 0 */


/** \brief 44, Port 01 Pad Driver Mode Register 1 */


/** \brief 50, Port 01 Emergency Stop Register */


/** \brief 60, Port 01 Pin Function Decision Control Register */


/** \brief 64, Port 01 Pin Controller Select Register */


/** \brief 70, Port 01 Output Modification Set Register 0 */


/** \brief 74, Port 01 Output Modification Set Register 4 */


/** \brief 78, Port 01 Output Modification Set Register 8 */


/** \brief 7C, Port 01 Output Modification Set Register 12 */


/** \brief 80, Port 01 Output Modification Clear Register 0 */


/** \brief 84, Port 01 Output Modification Clear Register 4 */


/** \brief 88, Port 01 Output Modification Clear Register 8 */


/** \brief 8C, Port 01 Output Modification Clear Register 12 */


/** \brief 90, Port 01 Output Modification Set Register */


/** \brief 94, Port 01 Output Modification Clear Register */


/** \brief F8, Port 01 Access Enable Register 1 */


/** \brief FC, Port 01 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P02
 * \{  */
/** \brief 0, Port 02 Output Register */


/** \brief 4, Port 02 Output Modification Register */


/** \brief 8, Port 02 Identification Register */


/** \brief 10, Port 02 Input/Output Control Register 0 */


/** \brief 14, Port 02 Input/Output Control Register 4 */


/** \brief 18, Port 02 Input/Output Control Register 8 */


/** \brief 1C, Port 02 Input/Output Control Register 12 */


/** \brief 24, Port 02 Input Register */


/** \brief 40, Port 02 Pad Driver Mode Register 0 */


/** \brief 44, Port 02 Pad Driver Mode Register 1 */


/** \brief 50, Port 02 Emergency Stop Register */


/** \brief 60, Port 02 Pin Function Decision Control Register */


/** \brief 64, Port 02 Pin Controller Select Register */


/** \brief 70, Port 02 Output Modification Set Register 0 */


/** \brief 74, Port 02 Output Modification Set Register 4 */


/** \brief 78, Port 02 Output Modification Set Register 8 */


/** \brief 7C, Port 02 Output Modification Set Register 12 */


/** \brief 80, Port 02 Output Modification Clear Register 0 */


/** \brief 84, Port 02 Output Modification Clear Register 4 */


/** \brief 88, Port 02 Output Modification Clear Register 8 */


/** \brief 8C, Port 02 Output Modification Clear Register 12 */


/** \brief 90, Port 02 Output Modification Set Register */


/** \brief 94, Port 02 Output Modification Clear Register */


/** \brief F8, Port 02 Access Enable Register 1 */


/** \brief FC, Port 02 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P10
 * \{  */
/** \brief 0, Port 10 Output Register */


/** \brief 4, Port 10 Output Modification Register */


/** \brief 8, Port 10 Identification Register */


/** \brief 10, Port 10 Input/Output Control Register 0 */


/** \brief 14, Port 10 Input/Output Control Register 4 */


/** \brief 18, Port 10 Input/Output Control Register 8 */


/** \brief 1C, Port 10 Input/Output Control Register 12 */


/** \brief 24, Port 10 Input Register */


/** \brief 40, Port 10 Pad Driver Mode Register 0 */


/** \brief 44, Port 10 Pad Driver Mode Register 1 */


/** \brief 50, Port 10 Emergency Stop Register */


/** \brief 60, Port 10 Pin Function Decision Control Register */


/** \brief 64, Port 10 Pin Controller Select Register */


/** \brief 70, Port 10 Output Modification Set Register 0 */


/** \brief 74, Port 10 Output Modification Set Register 4 */


/** \brief 78, Port 10 Output Modification Set Register 8 */


/** \brief 7C, Port 10 Output Modification Set Register 12 */


/** \brief 80, Port 10 Output Modification Clear Register 0 */


/** \brief 84, Port 10 Output Modification Clear Register 4 */


/** \brief 88, Port 10 Output Modification Clear Register 8 */


/** \brief 8C, Port 10 Output Modification Clear Register 12 */


/** \brief 90, Port 10 Output Modification Set Register */


/** \brief 94, Port 10 Output Modification Clear Register */


/** \brief F8, Port 10 Access Enable Register 1 */


/** \brief FC, Port 10 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P11
 * \{  */
/** \brief 0, Port 11 Output Register */


/** \brief 4, Port 11 Output Modification Register */


/** \brief 8, Port 11 Identification Register */


/** \brief 10, Port 11 Input/Output Control Register 0 */


/** \brief 14, Port 11 Input/Output Control Register 4 */


/** \brief 18, Port 11 Input/Output Control Register 8 */


/** \brief 1C, Port 11 Input/Output Control Register 12 */


/** \brief 24, Port 11 Input Register */


/** \brief 40, Port 11 Pad Driver Mode Register 0 */


/** \brief 44, Port 11 Pad Driver Mode Register 1 */


/** \brief 50, Port 11 Emergency Stop Register */


/** \brief 60, Port 11 Pin Function Decision Control Register */


/** \brief 64, Port 11 Pin Controller Select Register */


/** \brief 70, Port 11 Output Modification Set Register 0 */


/** \brief 74, Port 11 Output Modification Set Register 4 */


/** \brief 78, Port 11 Output Modification Set Register 8 */


/** \brief 7C, Port 11 Output Modification Set Register 12 */


/** \brief 80, Port 11 Output Modification Clear Register 0 */


/** \brief 84, Port 11 Output Modification Clear Register 4 */


/** \brief 88, Port 11 Output Modification Clear Register 8 */


/** \brief 8C, Port 11 Output Modification Clear Register 12 */


/** \brief 90, Port 11 Output Modification Set Register */


/** \brief 94, Port 11 Output Modification Clear Register */


/** \brief F8, Port 11 Access Enable Register 1 */


/** \brief FC, Port 11 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P12
 * \{  */
/** \brief 0, Port 12 Output Register */


/** \brief 4, Port 12 Output Modification Register */


/** \brief 8, Port 12 Identification Register */


/** \brief 10, Port 12 Input/Output Control Register 0 */


/** \brief 24, Port 12 Input Register */


/** \brief 40, Port 12 Pad Driver Mode Register 0 */


/** \brief 50, Port 12 Emergency Stop Register */


/** \brief 60, Port 12 Pin Function Decision Control Register */


/** \brief 64, Port 12 Pin Controller Select Register */


/** \brief 70, Port 12 Output Modification Set Register 0 */


/** \brief 80, Port 12 Output Modification Clear Register 0 */


/** \brief 90, Port 12 Output Modification Set Register */


/** \brief 94, Port 12 Output Modification Clear Register */


/** \brief F8, Port 12 Access Enable Register 1 */


/** \brief FC, Port 12 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P13
 * \{  */
/** \brief 0, Port 13 Output Register */


/** \brief 4, Port 13 Output Modification Register */


/** \brief 8, Port 13 Identification Register */


/** \brief 10, Port 13 Input/Output Control Register 0 */


/** \brief 14, Port 13 Input/Output Control Register 4 */


/** \brief 18, Port 13 Input/Output Control Register 8 */


/** \brief 1C, Port 13 Input/Output Control Register 12 */


/** \brief 24, Port 13 Input Register */


/** \brief 40, Port 13 Pad Driver Mode Register 0 */


/** \brief 44, Port 13 Pad Driver Mode Register 1 */


/** \brief 50, Port 13 Emergency Stop Register */


/** \brief 60, Port 13 Pin Function Decision Control Register */


/** \brief 64, Port 13 Pin Controller Select Register */


/** \brief 70, Port 13 Output Modification Set Register 0 */


/** \brief 74, Port 13 Output Modification Set Register 4 */


/** \brief 78, Port 13 Output Modification Set Register 8 */


/** \brief 7C, Port 13 Output Modification Set Register 12 */


/** \brief 80, Port 13 Output Modification Clear Register 0 */


/** \brief 84, Port 13 Output Modification Clear Register 4 */


/** \brief 88, Port 13 Output Modification Clear Register 8 */


/** \brief 8C, Port 13 Output Modification Clear Register 12 */


/** \brief 90, Port 13 Output Modification Set Register */


/** \brief 94, Port 13 Output Modification Clear Register */


/** \brief A0, Port 13 LVDS Pad Control Register 0 */


/** \brief A4, Port 13 LVDS Pad Control Register 1 */


/** \brief A8, Port 13 LVDS Pad Control Register 2 */


/** \brief AC, Port 13 LVDS Pad Control Register 3 */


/** \brief F8, Port 13 Access Enable Register 1 */


/** \brief FC, Port 13 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P14
 * \{  */
/** \brief 0, Port 14 Output Register */


/** \brief 4, Port 14 Output Modification Register */


/** \brief 8, Port 14 Identification Register */


/** \brief 10, Port 14 Input/Output Control Register 0 */


/** \brief 14, Port 14 Input/Output Control Register 4 */


/** \brief 18, Port 14 Input/Output Control Register 8 */


/** \brief 1C, Port 14 Input/Output Control Register 12 */


/** \brief 24, Port 14 Input Register */


/** \brief 40, Port 14 Pad Driver Mode Register 0 */


/** \brief 44, Port 14 Pad Driver Mode Register 1 */


/** \brief 50, Port 14 Emergency Stop Register */


/** \brief 60, Port 14 Pin Function Decision Control Register */


/** \brief 64, Port 14 Pin Controller Select Register */


/** \brief 70, Port 14 Output Modification Set Register 0 */


/** \brief 74, Port 14 Output Modification Set Register 4 */


/** \brief 78, Port 14 Output Modification Set Register 8 */


/** \brief 7C, Port 14 Output Modification Set Register 12 */


/** \brief 80, Port 14 Output Modification Clear Register 0 */


/** \brief 84, Port 14 Output Modification Clear Register 4 */


/** \brief 88, Port 14 Output Modification Clear Register 8 */


/** \brief 8C, Port 14 Output Modification Clear Register 12 */


/** \brief 90, Port 14 Output Modification Set Register */


/** \brief 94, Port 14 Output Modification Clear Register */


/** \brief B4, Port 14 LVDS Pad Control Register 5 */


/** \brief F8, Port 14 Access Enable Register 1 */


/** \brief FC, Port 14 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P15
 * \{  */
/** \brief 0, Port 15 Output Register */


/** \brief 4, Port 15 Output Modification Register */


/** \brief 8, Port 15 Identification Register */


/** \brief 10, Port 15 Input/Output Control Register 0 */


/** \brief 14, Port 15 Input/Output Control Register 4 */


/** \brief 18, Port 15 Input/Output Control Register 8 */


/** \brief 1C, Port 15 Input/Output Control Register 12 */


/** \brief 24, Port 15 Input Register */


/** \brief 40, Port 15 Pad Driver Mode Register 0 */


/** \brief 44, Port 15 Pad Driver Mode Register 1 */


/** \brief 50, Port 15 Emergency Stop Register */


/** \brief 60, Port 15 Pin Function Decision Control Register */


/** \brief 64, Port 15 Pin Controller Select Register */


/** \brief 70, Port 15 Output Modification Set Register 0 */


/** \brief 74, Port 15 Output Modification Set Register 4 */


/** \brief 78, Port 15 Output Modification Set Register 8 */


/** \brief 7C, Port 15 Output Modification Set Register 12 */


/** \brief 80, Port 15 Output Modification Clear Register 0 */


/** \brief 84, Port 15 Output Modification Clear Register 4 */


/** \brief 88, Port 15 Output Modification Clear Register 8 */


/** \brief 8C, Port 15 Output Modification Clear Register 12 */


/** \brief 90, Port 15 Output Modification Set Register */


/** \brief 94, Port 15 Output Modification Clear Register */


/** \brief F8, Port 15 Access Enable Register 1 */


/** \brief FC, Port 15 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P20
 * \{  */
/** \brief 0, Port 20 Output Register */


/** \brief 4, Port 20 Output Modification Register */


/** \brief 8, Port 20 Identification Register */


/** \brief 10, Port 20 Input/Output Control Register 0 */


/** \brief 14, Port 20 Input/Output Control Register 4 */


/** \brief 18, Port 20 Input/Output Control Register 8 */


/** \brief 1C, Port 20 Input/Output Control Register 12 */


/** \brief 24, Port 20 Input Register */


/** \brief 40, Port 20 Pad Driver Mode Register 0 */


/** \brief 44, Port 20 Pad Driver Mode Register 1 */


/** \brief 50, Port 20 Emergency Stop Register */


/** \brief 60, Port 20 Pin Function Decision Control Register */


/** \brief 64, Port 20 Pin Controller Select Register */


/** \brief 70, Port 20 Output Modification Set Register 0 */


/** \brief 74, Port 20 Output Modification Set Register 4 */


/** \brief 78, Port 20 Output Modification Set Register 8 */


/** \brief 7C, Port 20 Output Modification Set Register 12 */


/** \brief 80, Port 20 Output Modification Clear Register 0 */


/** \brief 84, Port 20 Output Modification Clear Register 4 */


/** \brief 88, Port 20 Output Modification Clear Register 8 */


/** \brief 8C, Port 20 Output Modification Clear Register 12 */


/** \brief 90, Port 20 Output Modification Set Register */


/** \brief 94, Port 20 Output Modification Clear Register */


/** \brief F8, Port 20 Access Enable Register 1 */


/** \brief FC, Port 20 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P21
 * \{  */
/** \brief 0, Port 21 Output Register */


/** \brief 4, Port 21 Output Modification Register */


/** \brief 8, Port 21 Identification Register */


/** \brief 10, Port 21 Input/Output Control Register 0 */


/** \brief 14, Port 21 Input/Output Control Register 4 */


/** \brief 24, Port 21 Input Register */


/** \brief 40, Port 21 Pad Driver Mode Register 0 */


/** \brief 50, Port 21 Emergency Stop Register */


/** \brief 60, Port 21 Pin Function Decision Control Register */


/** \brief 64, Port 21 Pin Controller Select Register */


/** \brief 70, Port 21 Output Modification Set Register 0 */


/** \brief 74, Port 21 Output Modification Set Register 4 */


/** \brief 80, Port 21 Output Modification Clear Register 0 */


/** \brief 84, Port 21 Output Modification Clear Register 4 */


/** \brief 90, Port 21 Output Modification Set Register */


/** \brief 94, Port 21 Output Modification Clear Register */


/** \brief A0, Port 21 LVDS Pad Control Register 0 */


/** \brief A4, Port 21 LVDS Pad Control Register 1 */


/** \brief A8, Port 21 LVDS Pad Control Register 2 */


/** \brief F8, Port 21 Access Enable Register 1 */


/** \brief FC, Port 21 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P22
 * \{  */
/** \brief 0, Port 22 Output Register */


/** \brief 4, Port 22 Output Modification Register */


/** \brief 8, Port 22 Identification Register */


/** \brief 10, Port 22 Input/Output Control Register 0 */


/** \brief 14, Port 22 Input/Output Control Register 4 */


/** \brief 18, Port 22 Input/Output Control Register 8 */


/** \brief 24, Port 22 Input Register */


/** \brief 40, Port 22 Pad Driver Mode Register 0 */


/** \brief 44, Port 22 Pad Driver Mode Register 1 */


/** \brief 50, Port 22 Emergency Stop Register */


/** \brief 60, Port 22 Pin Function Decision Control Register */


/** \brief 64, Port 22 Pin Controller Select Register */


/** \brief 70, Port 22 Output Modification Set Register 0 */


/** \brief 74, Port 22 Output Modification Set Register 4 */


/** \brief 78, Port 22 Output Modification Set Register 8 */


/** \brief 80, Port 22 Output Modification Clear Register 0 */


/** \brief 84, Port 22 Output Modification Clear Register 4 */


/** \brief 88, Port 22 Output Modification Clear Register 8 */


/** \brief 90, Port 22 Output Modification Set Register */


/** \brief 94, Port 22 Output Modification Clear Register */


/** \brief A0, Port 22 LVDS Pad Control Register 0 */


/** \brief A4, Port 22 LVDS Pad Control Register 1 */


/** \brief F8, Port 22 Access Enable Register 1 */


/** \brief FC, Port 22 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P23
 * \{  */
/** \brief 0, Port 23 Output Register */


/** \brief 4, Port 23 Output Modification Register */


/** \brief 8, Port 23 Identification Register */


/** \brief 10, Port 23 Input/Output Control Register 0 */


/** \brief 14, Port 23 Input/Output Control Register 4 */


/** \brief 24, Port 23 Input Register */


/** \brief 40, Port 23 Pad Driver Mode Register 0 */


/** \brief 50, Port 23 Emergency Stop Register */


/** \brief 60, Port 23 Pin Function Decision Control Register */


/** \brief 64, Port 23 Pin Controller Select Register */


/** \brief 70, Port 23 Output Modification Set Register 0 */


/** \brief 74, Port 23 Output Modification Set Register 4 */


/** \brief 80, Port 23 Output Modification Clear Register 0 */


/** \brief 84, Port 23 Output Modification Clear Register 4 */


/** \brief 90, Port 23 Output Modification Set Register */


/** \brief 94, Port 23 Output Modification Clear Register */


/** \brief F8, Port 23 Access Enable Register 1 */


/** \brief FC, Port 23 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P24
 * \{  */
/** \brief 0, Port 24 Output Register */


/** \brief 4, Port 24 Output Modification Register */


/** \brief 8, Port 24 Identification Register */


/** \brief 10, Port 24 Input/Output Control Register 0 */


/** \brief 14, Port 24 Input/Output Control Register 4 */


/** \brief 18, Port 24 Input/Output Control Register 8 */


/** \brief 1C, Port 24 Input/Output Control Register 12 */


/** \brief 24, Port 24 Input Register */


/** \brief 40, Port 24 Pad Driver Mode Register 0 */


/** \brief 44, Port 24 Pad Driver Mode Register 1 */


/** \brief 50, Port 24 Emergency Stop Register */


/** \brief 60, Port 24 Pin Function Decision Control Register */


/** \brief 64, Port 24 Pin Controller Select Register */


/** \brief 70, Port 24 Output Modification Set Register 0 */


/** \brief 74, Port 24 Output Modification Set Register 4 */


/** \brief 78, Port 24 Output Modification Set Register 8 */


/** \brief 7C, Port 24 Output Modification Set Register 12 */


/** \brief 80, Port 24 Output Modification Clear Register 0 */


/** \brief 84, Port 24 Output Modification Clear Register 4 */


/** \brief 88, Port 24 Output Modification Clear Register 8 */


/** \brief 8C, Port 24 Output Modification Clear Register 12 */


/** \brief 90, Port 24 Output Modification Set Register */


/** \brief 94, Port 24 Output Modification Clear Register */


/** \brief F8, Port 24 Access Enable Register 1 */


/** \brief FC, Port 24 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P25
 * \{  */
/** \brief 0, Port 25 Output Register */


/** \brief 4, Port 25 Output Modification Register */


/** \brief 8, Port 25 Identification Register */


/** \brief 10, Port 25 Input/Output Control Register 0 */


/** \brief 14, Port 25 Input/Output Control Register 4 */


/** \brief 18, Port 25 Input/Output Control Register 8 */


/** \brief 1C, Port 25 Input/Output Control Register 12 */


/** \brief 24, Port 25 Input Register */


/** \brief 40, Port 25 Pad Driver Mode Register 0 */


/** \brief 44, Port 25 Pad Driver Mode Register 1 */


/** \brief 50, Port 25 Emergency Stop Register */


/** \brief 60, Port 25 Pin Function Decision Control Register */


/** \brief 64, Port 25 Pin Controller Select Register */


/** \brief 70, Port 25 Output Modification Set Register 0 */


/** \brief 74, Port 25 Output Modification Set Register 4 */


/** \brief 78, Port 25 Output Modification Set Register 8 */


/** \brief 7C, Port 25 Output Modification Set Register 12 */


/** \brief 80, Port 25 Output Modification Clear Register 0 */


/** \brief 84, Port 25 Output Modification Clear Register 4 */


/** \brief 88, Port 25 Output Modification Clear Register 8 */


/** \brief 8C, Port 25 Output Modification Clear Register 12 */


/** \brief 90, Port 25 Output Modification Set Register */


/** \brief 94, Port 25 Output Modification Clear Register */


/** \brief F8, Port 25 Access Enable Register 1 */


/** \brief FC, Port 25 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P26
 * \{  */
/** \brief 0, Port 26 Output Register */


/** \brief 4, Port 26 Output Modification Register */


/** \brief 8, Port 26 Identification Register */


/** \brief 10, Port 26 Input/Output Control Register 0 */


/** \brief 24, Port 26 Input Register */


/** \brief 40, Port 26 Pad Driver Mode Register 0 */


/** \brief 50, Port 26 Emergency Stop Register */


/** \brief 60, Port 26 Pin Function Decision Control Register */


/** \brief 64, Port 26 Pin Controller Select Register */


/** \brief 70, Port 26 Output Modification Set Register 0 */


/** \brief 80, Port 26 Output Modification Clear Register 0 */


/** \brief 90, Port 26 Output Modification Set Register */


/** \brief 94, Port 26 Output Modification Clear Register */


/** \brief F8, Port 26 Access Enable Register 1 */


/** \brief FC, Port 26 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P30
 * \{  */
/** \brief 0, Port 30 Output Register */


/** \brief 4, Port 30 Output Modification Register */


/** \brief 8, Port 30 Identification Register */


/** \brief 10, Port 30 Input/Output Control Register 0 */


/** \brief 14, Port 30 Input/Output Control Register 4 */


/** \brief 18, Port 30 Input/Output Control Register 8 */


/** \brief 1C, Port 30 Input/Output Control Register 12 */


/** \brief 24, Port 30 Input Register */


/** \brief 40, Port 30 Pad Driver Mode Register 0 */


/** \brief 44, Port 30 Pad Driver Mode Register 1 */


/** \brief 50, Port 30 Emergency Stop Register */


/** \brief 60, Port 30 Pin Function Decision Control Register */


/** \brief 64, Port 30 Pin Controller Select Register */


/** \brief 70, Port 30 Output Modification Set Register 0 */


/** \brief 74, Port 30 Output Modification Set Register 4 */


/** \brief 78, Port 30 Output Modification Set Register 8 */


/** \brief 7C, Port 30 Output Modification Set Register 12 */


/** \brief 80, Port 30 Output Modification Clear Register 0 */


/** \brief 84, Port 30 Output Modification Clear Register 4 */


/** \brief 88, Port 30 Output Modification Clear Register 8 */


/** \brief 8C, Port 30 Output Modification Clear Register 12 */


/** \brief 90, Port 30 Output Modification Set Register */


/** \brief 94, Port 30 Output Modification Clear Register */


/** \brief F8, Port 30 Access Enable Register 1 */


/** \brief FC, Port 30 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P31
 * \{  */
/** \brief 0, Port 31 Output Register */


/** \brief 4, Port 31 Output Modification Register */


/** \brief 8, Port 31 Identification Register */


/** \brief 10, Port 31 Input/Output Control Register 0 */


/** \brief 14, Port 31 Input/Output Control Register 4 */


/** \brief 18, Port 31 Input/Output Control Register 8 */


/** \brief 1C, Port 31 Input/Output Control Register 12 */


/** \brief 24, Port 31 Input Register */


/** \brief 40, Port 31 Pad Driver Mode Register 0 */


/** \brief 44, Port 31 Pad Driver Mode Register 1 */


/** \brief 50, Port 31 Emergency Stop Register */


/** \brief 60, Port 31 Pin Function Decision Control Register */


/** \brief 64, Port 31 Pin Controller Select Register */


/** \brief 70, Port 31 Output Modification Set Register 0 */


/** \brief 74, Port 31 Output Modification Set Register 4 */


/** \brief 78, Port 31 Output Modification Set Register 8 */


/** \brief 7C, Port 31 Output Modification Set Register 12 */


/** \brief 80, Port 31 Output Modification Clear Register 0 */


/** \brief 84, Port 31 Output Modification Clear Register 4 */


/** \brief 88, Port 31 Output Modification Clear Register 8 */


/** \brief 8C, Port 31 Output Modification Clear Register 12 */


/** \brief 90, Port 31 Output Modification Set Register */


/** \brief 94, Port 31 Output Modification Clear Register */


/** \brief F8, Port 31 Access Enable Register 1 */


/** \brief FC, Port 31 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P32
 * \{  */
/** \brief 0, Port 32 Output Register */


/** \brief 4, Port 32 Output Modification Register */


/** \brief 8, Port 32 Identification Register */


/** \brief 10, Port 32 Input/Output Control Register 0 */


/** \brief 14, Port 32 Input/Output Control Register 4 */


/** \brief 24, Port 32 Input Register */


/** \brief 40, Port 32 Pad Driver Mode Register 0 */


/** \brief 50, Port 32 Emergency Stop Register */


/** \brief 60, Port 32 Pin Function Decision Control Register */


/** \brief 64, Port 32 Pin Controller Select Register */


/** \brief 70, Port 32 Output Modification Set Register 0 */


/** \brief 74, Port 32 Output Modification Set Register 4 */


/** \brief 80, Port 32 Output Modification Clear Register 0 */


/** \brief 84, Port 32 Output Modification Clear Register 4 */


/** \brief 90, Port 32 Output Modification Set Register */


/** \brief 94, Port 32 Output Modification Clear Register */


/** \brief F8, Port 32 Access Enable Register 1 */


/** \brief FC, Port 32 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P33
 * \{  */
/** \brief 0, Port 33 Output Register */


/** \brief 4, Port 33 Output Modification Register */


/** \brief 8, Port 33 Identification Register */


/** \brief 10, Port 33 Input/Output Control Register 0 */


/** \brief 14, Port 33 Input/Output Control Register 4 */


/** \brief 18, Port 33 Input/Output Control Register 8 */


/** \brief 1C, Port 33 Input/Output Control Register 12 */


/** \brief 24, Port 33 Input Register */


/** \brief 40, Port 33 Pad Driver Mode Register 0 */


/** \brief 44, Port 33 Pad Driver Mode Register 1 */


/** \brief 50, Port 33 Emergency Stop Register */


/** \brief 60, Port 33 Pin Function Decision Control Register */


/** \brief 64, Port 33 Pin Controller Select Register */


/** \brief 70, Port 33 Output Modification Set Register 0 */


/** \brief 74, Port 33 Output Modification Set Register 4 */


/** \brief 78, Port 33 Output Modification Set Register 8 */


/** \brief 7C, Port 33 Output Modification Set Register 12 */


/** \brief 80, Port 33 Output Modification Clear Register 0 */


/** \brief 84, Port 33 Output Modification Clear Register 4 */


/** \brief 88, Port 33 Output Modification Clear Register 8 */


/** \brief 8C, Port 33 Output Modification Clear Register 12 */


/** \brief 90, Port 33 Output Modification Set Register */


/** \brief 94, Port 33 Output Modification Clear Register */


/** \brief F8, Port 33 Access Enable Register 1 */


/** \brief FC, Port 33 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P34
 * \{  */
/** \brief 0, Port 34 Output Register */


/** \brief 4, Port 34 Output Modification Register */


/** \brief 8, Port 34 Identification Register */


/** \brief 10, Port 34 Input/Output Control Register 0 */


/** \brief 14, Port 34 Input/Output Control Register 4 */


/** \brief 24, Port 34 Input Register */


/** \brief 40, Port 34 Pad Driver Mode Register 0 */


/** \brief 50, Port 34 Emergency Stop Register */


/** \brief 60, Port 34 Pin Function Decision Control Register */


/** \brief 64, Port 34 Pin Controller Select Register */


/** \brief 70, Port 34 Output Modification Set Register 0 */


/** \brief 74, Port 34 Output Modification Set Register 4 */


/** \brief 80, Port 34 Output Modification Clear Register 0 */


/** \brief 84, Port 34 Output Modification Clear Register 4 */


/** \brief 90, Port 34 Output Modification Set Register */


/** \brief 94, Port 34 Output Modification Clear Register */


/** \brief F8, Port 34 Access Enable Register 1 */


/** \brief FC, Port 34 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P40
 * \{  */
/** \brief 0, Port 40 Output Register */


/** \brief 4, Port 40 Output Modification Register */


/** \brief 8, Port 40 Identification Register */


/** \brief 10, Port 40 Input/Output Control Register 0 */


/** \brief 14, Port 40 Input/Output Control Register 4 */


/** \brief 18, Port 40 Input/Output Control Register 8 */


/** \brief 1C, Port 40 Input/Output Control Register 12 */


/** \brief 24, Port 40 Input Register */


/** \brief 40, Port 40 Pad Driver Mode Register 0 */


/** \brief 44, Port 40 Pad Driver Mode Register 1 */


/** \brief 50, Port 40 Emergency Stop Register */


/** \brief 60, Port 40 Pin Function Decision Control Register */


/** \brief 64, Port 40 Pin Controller Select Register */


/** \brief 70, Port 40 Output Modification Set Register 0 */


/** \brief 74, Port 40 Output Modification Set Register 4 */


/** \brief 78, Port 40 Output Modification Set Register 8 */


/** \brief 7C, Port 40 Output Modification Set Register 12 */


/** \brief 80, Port 40 Output Modification Clear Register 0 */


/** \brief 84, Port 40 Output Modification Clear Register 4 */


/** \brief 88, Port 40 Output Modification Clear Register 8 */


/** \brief 8C, Port 40 Output Modification Clear Register 12 */


/** \brief 90, Port 40 Output Modification Set Register */


/** \brief 94, Port 40 Output Modification Clear Register */


/** \brief F8, Port 40 Access Enable Register 1 */


/** \brief FC, Port 40 Access Enable Register 0 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_Cfg_P41
 * \{  */
/** \brief 0, Port 41 Output Register */


/** \brief 4, Port 41 Output Modification Register */


/** \brief 8, Port 41 Identification Register */


/** \brief 10, Port 41 Input/Output Control Register 0 */


/** \brief 14, Port 41 Input/Output Control Register 4 */


/** \brief 18, Port 41 Input/Output Control Register 8 */


/** \brief 24, Port 41 Input Register */


/** \brief 40, Port 41 Pad Driver Mode Register 0 */


/** \brief 44, Port 41 Pad Driver Mode Register 1 */


/** \brief 50, Port 41 Emergency Stop Register */


/** \brief 60, Port 41 Pin Function Decision Control Register */


/** \brief 64, Port 41 Pin Controller Select Register */


/** \brief 70, Port 41 Output Modification Set Register 0 */


/** \brief 74, Port 41 Output Modification Set Register 4 */


/** \brief 78, Port 41 Output Modification Set Register 8 */


/** \brief 80, Port 41 Output Modification Clear Register 0 */


/** \brief 84, Port 41 Output Modification Clear Register 4 */


/** \brief 88, Port 41 Output Modification Clear Register 8 */


/** \brief 90, Port 41 Output Modification Set Register */


/** \brief 94, Port 41 Output Modification Clear Register */


/** \brief F8, Port 41 Access Enable Register 1 */


/** \brief FC, Port 41 Access Enable Register 0 */



/** \}  */

/******************************************************************************/

/******************************************************************************/


#line 59 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\_Impl\\IfxPort_cfg.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief Port count              \ingroup IfxLld_port_cfg
 */




/******************************************************************************/
/*-------------------------------Enumerations---------------------------------*/
/******************************************************************************/

/** \brief List of the available Port resources
 */
typedef enum
{
    IfxPort_Index_00   = 0,  /**< \brief PORT 00 */
    IfxPort_Index_01   = 1,  /**< \brief PORT 01 */
    IfxPort_Index_02   = 2,  /**< \brief PORT 02 */
    IfxPort_Index_10   = 10, /**< \brief PORT 10 */
    IfxPort_Index_11   = 11, /**< \brief PORT 11 */
    IfxPort_Index_12   = 12, /**< \brief PORT 12 */
    IfxPort_Index_13   = 13, /**< \brief PORT 13 */
    IfxPort_Index_14   = 14, /**< \brief PORT 14 */
    IfxPort_Index_15   = 15, /**< \brief PORT 15 */
    IfxPort_Index_20   = 20, /**< \brief PORT 20 */
    IfxPort_Index_21   = 21, /**< \brief PORT 21 */
    IfxPort_Index_22   = 22, /**< \brief PORT 22 */
    IfxPort_Index_23   = 23, /**< \brief PORT 23 */
    IfxPort_Index_24   = 24, /**< \brief PORT 24 */
    IfxPort_Index_25   = 25, /**< \brief PORT 25 */
    IfxPort_Index_26   = 26, /**< \brief PORT 26 */
    IfxPort_Index_30   = 30, /**< \brief PORT 30 */
    IfxPort_Index_31   = 31, /**< \brief PORT 31 */
    IfxPort_Index_32   = 32, /**< \brief PORT 32 */
    IfxPort_Index_33   = 33, /**< \brief PORT 33 */
    IfxPort_Index_34   = 34, /**< \brief PORT 34 */
    IfxPort_Index_40   = 40, /**< \brief PORT 40 */
    IfxPort_Index_41   = 41, /**< \brief PORT 41 */
    IfxPort_Index_none = -1  /**< \brief none */
} IfxPort_Index;

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \brief used by IfxPort_Esr_Masks table
 */
typedef struct
{
    Ifx_P *port;
    uint16 masks;
} IfxPort_Esr_Masks;

/******************************************************************************/
/*-------------------Global Exported Variables/Constants----------------------*/
/******************************************************************************/

extern const IfxPort_Esr_Masks  IfxPort_cfg_esrMasks[(23)];

extern const IfxModule_IndexMap IfxPort_cfg_indexMap[(23)];


#line 61 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Port\\Std\\IfxPort.h"

#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Scu\\Std\\IfxScuWdt.h"
/**
 * \file IfxScuWdt.h
 * \brief SCU  basic functionality
 * \ingroup IfxLld_Scu
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * This file contains the APIs for SCU Watchdog and Endinit related functions.
 *
 * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
 * \ingroup IfxLld_Scu_Std
 * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
 * \ingroup IfxLld_Scu_Std_Wdt
 * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
 * \ingroup IfxLld_Scu_Std_Wdt
 * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
 * \ingroup IfxLld_Scu_Std_Wdt
 * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
 * \ingroup IfxLld_Scu_Std_Wdt
 */




/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/


#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\_Impl\\IfxScu_cfg.h"
/**
 * \file IfxScu_cfg.h
 * \brief SCU on-chip implementation data
 * \ingroup IfxLld_Scu
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2012 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxLld_Scu SCU
 * \ingroup IfxLld
 * \defgroup IfxLld_Scu_Impl Implementation
 * \ingroup IfxLld_Scu
 * \defgroup IfxLld_Scu_Std Standard Driver
 * \ingroup IfxLld_Scu
 */



/******************************************************************************/


#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Infra\\Sfr\\TC38A\\_Reg\\IfxScu_bf.h"
/**
 * \file IfxScu_bf.h
 * \brief
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: TC38XA_UM_V1.5.0
 * Specification: TC3xx User Manual V1.5.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Scu_Registers_BitfieldsMask Bitfields mask and offset
 * \ingroup IfxSfr_Scu_Registers
 * 
 */



/******************************************************************************/

/******************************************************************************/

/** \addtogroup IfxSfr_Scu_Registers_BitfieldsMask
 * \{  */
/** \brief Length for Ifx_SCU_ID_Bits.MODREV */


/** \brief Mask for Ifx_SCU_ID_Bits.MODREV */


/** \brief Offset for Ifx_SCU_ID_Bits.MODREV */


/** \brief Length for Ifx_SCU_ID_Bits.MODTYPE */


/** \brief Mask for Ifx_SCU_ID_Bits.MODTYPE */


/** \brief Offset for Ifx_SCU_ID_Bits.MODTYPE */


/** \brief Length for Ifx_SCU_ID_Bits.MODNUMBER */


/** \brief Mask for Ifx_SCU_ID_Bits.MODNUMBER */


/** \brief Offset for Ifx_SCU_ID_Bits.MODNUMBER */


/** \brief Length for Ifx_SCU_OSCCON_Bits.PLLLV */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.PLLLV */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.PLLLV */


/** \brief Length for Ifx_SCU_OSCCON_Bits.OSCRES */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.OSCRES */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.OSCRES */


/** \brief Length for Ifx_SCU_OSCCON_Bits.GAINSEL */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.GAINSEL */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.GAINSEL */


/** \brief Length for Ifx_SCU_OSCCON_Bits.MODE */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.MODE */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.MODE */


/** \brief Length for Ifx_SCU_OSCCON_Bits.SHBY */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.SHBY */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.SHBY */


/** \brief Length for Ifx_SCU_OSCCON_Bits.PLLHV */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.PLLHV */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.PLLHV */


/** \brief Length for Ifx_SCU_OSCCON_Bits.HYSEN */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.HYSEN */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.HYSEN */


/** \brief Length for Ifx_SCU_OSCCON_Bits.HYSCTL */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.HYSCTL */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.HYSCTL */


/** \brief Length for Ifx_SCU_OSCCON_Bits.AMPCTL */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.AMPCTL */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.AMPCTL */


/** \brief Length for Ifx_SCU_OSCCON_Bits.OSCVAL */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.OSCVAL */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.OSCVAL */


/** \brief Length for Ifx_SCU_OSCCON_Bits.APREN */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.APREN */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.APREN */


/** \brief Length for Ifx_SCU_OSCCON_Bits.CAP0EN */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.CAP0EN */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.CAP0EN */


/** \brief Length for Ifx_SCU_OSCCON_Bits.CAP1EN */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.CAP1EN */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.CAP1EN */


/** \brief Length for Ifx_SCU_OSCCON_Bits.CAP2EN */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.CAP2EN */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.CAP2EN */


/** \brief Length for Ifx_SCU_OSCCON_Bits.CAP3EN */


/** \brief Mask for Ifx_SCU_OSCCON_Bits.CAP3EN */


/** \brief Offset for Ifx_SCU_OSCCON_Bits.CAP3EN */


/** \brief Length for Ifx_SCU_SYSPLLSTAT_Bits.PWDSTAT */


/** \brief Mask for Ifx_SCU_SYSPLLSTAT_Bits.PWDSTAT */


/** \brief Offset for Ifx_SCU_SYSPLLSTAT_Bits.PWDSTAT */


/** \brief Length for Ifx_SCU_SYSPLLSTAT_Bits.LOCK */


/** \brief Mask for Ifx_SCU_SYSPLLSTAT_Bits.LOCK */


/** \brief Offset for Ifx_SCU_SYSPLLSTAT_Bits.LOCK */


/** \brief Length for Ifx_SCU_SYSPLLSTAT_Bits.K2RDY */


/** \brief Mask for Ifx_SCU_SYSPLLSTAT_Bits.K2RDY */


/** \brief Offset for Ifx_SCU_SYSPLLSTAT_Bits.K2RDY */


/** \brief Length for Ifx_SCU_SYSPLLSTAT_Bits.MODRUN */


/** \brief Mask for Ifx_SCU_SYSPLLSTAT_Bits.MODRUN */


/** \brief Offset for Ifx_SCU_SYSPLLSTAT_Bits.MODRUN */


/** \brief Length for Ifx_SCU_SYSPLLCON0_Bits.MODEN */


/** \brief Mask for Ifx_SCU_SYSPLLCON0_Bits.MODEN */


/** \brief Offset for Ifx_SCU_SYSPLLCON0_Bits.MODEN */


/** \brief Length for Ifx_SCU_SYSPLLCON0_Bits.NDIV */


/** \brief Mask for Ifx_SCU_SYSPLLCON0_Bits.NDIV */


/** \brief Offset for Ifx_SCU_SYSPLLCON0_Bits.NDIV */


/** \brief Length for Ifx_SCU_SYSPLLCON0_Bits.PLLPWD */


/** \brief Mask for Ifx_SCU_SYSPLLCON0_Bits.PLLPWD */


/** \brief Offset for Ifx_SCU_SYSPLLCON0_Bits.PLLPWD */


/** \brief Length for Ifx_SCU_SYSPLLCON0_Bits.RESLD */


/** \brief Mask for Ifx_SCU_SYSPLLCON0_Bits.RESLD */


/** \brief Offset for Ifx_SCU_SYSPLLCON0_Bits.RESLD */


/** \brief Length for Ifx_SCU_SYSPLLCON0_Bits.PDIV */


/** \brief Mask for Ifx_SCU_SYSPLLCON0_Bits.PDIV */


/** \brief Offset for Ifx_SCU_SYSPLLCON0_Bits.PDIV */


/** \brief Length for Ifx_SCU_SYSPLLCON0_Bits.INSEL */


/** \brief Mask for Ifx_SCU_SYSPLLCON0_Bits.INSEL */


/** \brief Offset for Ifx_SCU_SYSPLLCON0_Bits.INSEL */


/** \brief Length for Ifx_SCU_SYSPLLCON1_Bits.K2DIV */


/** \brief Mask for Ifx_SCU_SYSPLLCON1_Bits.K2DIV */


/** \brief Offset for Ifx_SCU_SYSPLLCON1_Bits.K2DIV */


/** \brief Length for Ifx_SCU_SYSPLLCON2_Bits.MODCFG */


/** \brief Mask for Ifx_SCU_SYSPLLCON2_Bits.MODCFG */


/** \brief Offset for Ifx_SCU_SYSPLLCON2_Bits.MODCFG */


/** \brief Length for Ifx_SCU_PERPLLSTAT_Bits.PWDSTAT */


/** \brief Mask for Ifx_SCU_PERPLLSTAT_Bits.PWDSTAT */


/** \brief Offset for Ifx_SCU_PERPLLSTAT_Bits.PWDSTAT */


/** \brief Length for Ifx_SCU_PERPLLSTAT_Bits.LOCK */


/** \brief Mask for Ifx_SCU_PERPLLSTAT_Bits.LOCK */


/** \brief Offset for Ifx_SCU_PERPLLSTAT_Bits.LOCK */


/** \brief Length for Ifx_SCU_PERPLLSTAT_Bits.K3RDY */


/** \brief Mask for Ifx_SCU_PERPLLSTAT_Bits.K3RDY */


/** \brief Offset for Ifx_SCU_PERPLLSTAT_Bits.K3RDY */


/** \brief Length for Ifx_SCU_PERPLLSTAT_Bits.K2RDY */


/** \brief Mask for Ifx_SCU_PERPLLSTAT_Bits.K2RDY */


/** \brief Offset for Ifx_SCU_PERPLLSTAT_Bits.K2RDY */


/** \brief Length for Ifx_SCU_PERPLLCON0_Bits.DIVBY */


/** \brief Mask for Ifx_SCU_PERPLLCON0_Bits.DIVBY */


/** \brief Offset for Ifx_SCU_PERPLLCON0_Bits.DIVBY */


/** \brief Length for Ifx_SCU_PERPLLCON0_Bits.NDIV */


/** \brief Mask for Ifx_SCU_PERPLLCON0_Bits.NDIV */


/** \brief Offset for Ifx_SCU_PERPLLCON0_Bits.NDIV */


/** \brief Length for Ifx_SCU_PERPLLCON0_Bits.PLLPWD */


/** \brief Mask for Ifx_SCU_PERPLLCON0_Bits.PLLPWD */


/** \brief Offset for Ifx_SCU_PERPLLCON0_Bits.PLLPWD */


/** \brief Length for Ifx_SCU_PERPLLCON0_Bits.RESLD */


/** \brief Mask for Ifx_SCU_PERPLLCON0_Bits.RESLD */


/** \brief Offset for Ifx_SCU_PERPLLCON0_Bits.RESLD */


/** \brief Length for Ifx_SCU_PERPLLCON0_Bits.PDIV */


/** \brief Mask for Ifx_SCU_PERPLLCON0_Bits.PDIV */


/** \brief Offset for Ifx_SCU_PERPLLCON0_Bits.PDIV */


/** \brief Length for Ifx_SCU_PERPLLCON1_Bits.K2DIV */


/** \brief Mask for Ifx_SCU_PERPLLCON1_Bits.K2DIV */


/** \brief Offset for Ifx_SCU_PERPLLCON1_Bits.K2DIV */


/** \brief Length for Ifx_SCU_PERPLLCON1_Bits.K3DIV */


/** \brief Mask for Ifx_SCU_PERPLLCON1_Bits.K3DIV */


/** \brief Offset for Ifx_SCU_PERPLLCON1_Bits.K3DIV */


/** \brief Length for Ifx_SCU_CCUCON0_Bits.STMDIV */


/** \brief Mask for Ifx_SCU_CCUCON0_Bits.STMDIV */


/** \brief Offset for Ifx_SCU_CCUCON0_Bits.STMDIV */


/** \brief Length for Ifx_SCU_CCUCON0_Bits.GTMDIV */


/** \brief Mask for Ifx_SCU_CCUCON0_Bits.GTMDIV */


/** \brief Offset for Ifx_SCU_CCUCON0_Bits.GTMDIV */


/** \brief Length for Ifx_SCU_CCUCON0_Bits.SRIDIV */


/** \brief Mask for Ifx_SCU_CCUCON0_Bits.SRIDIV */


/** \brief Offset for Ifx_SCU_CCUCON0_Bits.SRIDIV */


/** \brief Length for Ifx_SCU_CCUCON0_Bits.LPDIV */


/** \brief Mask for Ifx_SCU_CCUCON0_Bits.LPDIV */


/** \brief Offset for Ifx_SCU_CCUCON0_Bits.LPDIV */


/** \brief Length for Ifx_SCU_CCUCON0_Bits.SPBDIV */


/** \brief Mask for Ifx_SCU_CCUCON0_Bits.SPBDIV */


/** \brief Offset for Ifx_SCU_CCUCON0_Bits.SPBDIV */


/** \brief Length for Ifx_SCU_CCUCON0_Bits.BBBDIV */


/** \brief Mask for Ifx_SCU_CCUCON0_Bits.BBBDIV */


/** \brief Offset for Ifx_SCU_CCUCON0_Bits.BBBDIV */


/** \brief Length for Ifx_SCU_CCUCON0_Bits.FSIDIV */


/** \brief Mask for Ifx_SCU_CCUCON0_Bits.FSIDIV */


/** \brief Offset for Ifx_SCU_CCUCON0_Bits.FSIDIV */


/** \brief Length for Ifx_SCU_CCUCON0_Bits.FSI2DIV */


/** \brief Mask for Ifx_SCU_CCUCON0_Bits.FSI2DIV */


/** \brief Offset for Ifx_SCU_CCUCON0_Bits.FSI2DIV */


/** \brief Length for Ifx_SCU_CCUCON0_Bits.CLKSEL */


/** \brief Mask for Ifx_SCU_CCUCON0_Bits.CLKSEL */


/** \brief Offset for Ifx_SCU_CCUCON0_Bits.CLKSEL */


/** \brief Length for Ifx_SCU_CCUCON0_Bits.UP */


/** \brief Mask for Ifx_SCU_CCUCON0_Bits.UP */


/** \brief Offset for Ifx_SCU_CCUCON0_Bits.UP */


/** \brief Length for Ifx_SCU_CCUCON0_Bits.LCK */


/** \brief Mask for Ifx_SCU_CCUCON0_Bits.LCK */


/** \brief Offset for Ifx_SCU_CCUCON0_Bits.LCK */


/** \brief Length for Ifx_SCU_CCUCON1_Bits.MCANDIV */


/** \brief Mask for Ifx_SCU_CCUCON1_Bits.MCANDIV */


/** \brief Offset for Ifx_SCU_CCUCON1_Bits.MCANDIV */


/** \brief Length for Ifx_SCU_CCUCON1_Bits.CLKSELMCAN */


/** \brief Mask for Ifx_SCU_CCUCON1_Bits.CLKSELMCAN */


/** \brief Offset for Ifx_SCU_CCUCON1_Bits.CLKSELMCAN */


/** \brief Length for Ifx_SCU_CCUCON1_Bits.PLL1DIVDIS */


/** \brief Mask for Ifx_SCU_CCUCON1_Bits.PLL1DIVDIS */


/** \brief Offset for Ifx_SCU_CCUCON1_Bits.PLL1DIVDIS */


/** \brief Length for Ifx_SCU_CCUCON1_Bits.I2CDIV */


/** \brief Mask for Ifx_SCU_CCUCON1_Bits.I2CDIV */


/** \brief Offset for Ifx_SCU_CCUCON1_Bits.I2CDIV */


/** \brief Length for Ifx_SCU_CCUCON1_Bits.MSCDIV */


/** \brief Mask for Ifx_SCU_CCUCON1_Bits.MSCDIV */


/** \brief Offset for Ifx_SCU_CCUCON1_Bits.MSCDIV */


/** \brief Length for Ifx_SCU_CCUCON1_Bits.CLKSELMSC */


/** \brief Mask for Ifx_SCU_CCUCON1_Bits.CLKSELMSC */


/** \brief Offset for Ifx_SCU_CCUCON1_Bits.CLKSELMSC */


/** \brief Length for Ifx_SCU_CCUCON1_Bits.QSPIDIV */


/** \brief Mask for Ifx_SCU_CCUCON1_Bits.QSPIDIV */


/** \brief Offset for Ifx_SCU_CCUCON1_Bits.QSPIDIV */


/** \brief Length for Ifx_SCU_CCUCON1_Bits.CLKSELQSPI */


/** \brief Mask for Ifx_SCU_CCUCON1_Bits.CLKSELQSPI */


/** \brief Offset for Ifx_SCU_CCUCON1_Bits.CLKSELQSPI */


/** \brief Length for Ifx_SCU_CCUCON1_Bits.LCK */


/** \brief Mask for Ifx_SCU_CCUCON1_Bits.LCK */


/** \brief Offset for Ifx_SCU_CCUCON1_Bits.LCK */


/** \brief Length for Ifx_SCU_FDR_Bits.STEP */


/** \brief Mask for Ifx_SCU_FDR_Bits.STEP */


/** \brief Offset for Ifx_SCU_FDR_Bits.STEP */


/** \brief Length for Ifx_SCU_FDR_Bits.DM */


/** \brief Mask for Ifx_SCU_FDR_Bits.DM */


/** \brief Offset for Ifx_SCU_FDR_Bits.DM */


/** \brief Length for Ifx_SCU_FDR_Bits.RESULT */


/** \brief Mask for Ifx_SCU_FDR_Bits.RESULT */


/** \brief Offset for Ifx_SCU_FDR_Bits.RESULT */


/** \brief Length for Ifx_SCU_FDR_Bits.DISCLK */


/** \brief Mask for Ifx_SCU_FDR_Bits.DISCLK */


/** \brief Offset for Ifx_SCU_FDR_Bits.DISCLK */


/** \brief Length for Ifx_SCU_EXTCON_Bits.EN0 */


/** \brief Mask for Ifx_SCU_EXTCON_Bits.EN0 */


/** \brief Offset for Ifx_SCU_EXTCON_Bits.EN0 */


/** \brief Length for Ifx_SCU_EXTCON_Bits.SEL0 */


/** \brief Mask for Ifx_SCU_EXTCON_Bits.SEL0 */


/** \brief Offset for Ifx_SCU_EXTCON_Bits.SEL0 */


/** \brief Length for Ifx_SCU_EXTCON_Bits.EN1 */


/** \brief Mask for Ifx_SCU_EXTCON_Bits.EN1 */


/** \brief Offset for Ifx_SCU_EXTCON_Bits.EN1 */


/** \brief Length for Ifx_SCU_EXTCON_Bits.NSEL */


/** \brief Mask for Ifx_SCU_EXTCON_Bits.NSEL */


/** \brief Offset for Ifx_SCU_EXTCON_Bits.NSEL */


/** \brief Length for Ifx_SCU_EXTCON_Bits.SEL1 */


/** \brief Mask for Ifx_SCU_EXTCON_Bits.SEL1 */


/** \brief Offset for Ifx_SCU_EXTCON_Bits.SEL1 */


/** \brief Length for Ifx_SCU_EXTCON_Bits.DIV1 */


/** \brief Mask for Ifx_SCU_EXTCON_Bits.DIV1 */


/** \brief Offset for Ifx_SCU_EXTCON_Bits.DIV1 */


/** \brief Length for Ifx_SCU_CCUCON2_Bits.ASCLINFDIV */


/** \brief Mask for Ifx_SCU_CCUCON2_Bits.ASCLINFDIV */


/** \brief Offset for Ifx_SCU_CCUCON2_Bits.ASCLINFDIV */


/** \brief Length for Ifx_SCU_CCUCON2_Bits.ASCLINSDIV */


/** \brief Mask for Ifx_SCU_CCUCON2_Bits.ASCLINSDIV */


/** \brief Offset for Ifx_SCU_CCUCON2_Bits.ASCLINSDIV */


/** \brief Length for Ifx_SCU_CCUCON2_Bits.CLKSELASCLINS */


/** \brief Mask for Ifx_SCU_CCUCON2_Bits.CLKSELASCLINS */


/** \brief Offset for Ifx_SCU_CCUCON2_Bits.CLKSELASCLINS */


/** \brief Length for Ifx_SCU_CCUCON2_Bits.ERAYPERON */


/** \brief Mask for Ifx_SCU_CCUCON2_Bits.ERAYPERON */


/** \brief Offset for Ifx_SCU_CCUCON2_Bits.ERAYPERON */


/** \brief Length for Ifx_SCU_CCUCON2_Bits.LCK */


/** \brief Mask for Ifx_SCU_CCUCON2_Bits.LCK */


/** \brief Offset for Ifx_SCU_CCUCON2_Bits.LCK */


/** \brief Length for Ifx_SCU_CCUCON3_Bits.PLL0MONEN */


/** \brief Mask for Ifx_SCU_CCUCON3_Bits.PLL0MONEN */


/** \brief Offset for Ifx_SCU_CCUCON3_Bits.PLL0MONEN */


/** \brief Length for Ifx_SCU_CCUCON3_Bits.PLL1MONEN */


/** \brief Mask for Ifx_SCU_CCUCON3_Bits.PLL1MONEN */


/** \brief Offset for Ifx_SCU_CCUCON3_Bits.PLL1MONEN */


/** \brief Length for Ifx_SCU_CCUCON3_Bits.PLL2MONEN */


/** \brief Mask for Ifx_SCU_CCUCON3_Bits.PLL2MONEN */


/** \brief Offset for Ifx_SCU_CCUCON3_Bits.PLL2MONEN */


/** \brief Length for Ifx_SCU_CCUCON3_Bits.SPBMONEN */


/** \brief Mask for Ifx_SCU_CCUCON3_Bits.SPBMONEN */


/** \brief Offset for Ifx_SCU_CCUCON3_Bits.SPBMONEN */


/** \brief Length for Ifx_SCU_CCUCON3_Bits.BACKMONEN */


/** \brief Mask for Ifx_SCU_CCUCON3_Bits.BACKMONEN */


/** \brief Offset for Ifx_SCU_CCUCON3_Bits.BACKMONEN */


/** \brief Length for Ifx_SCU_CCUCON3_Bits.PLL0MONTST */


/** \brief Mask for Ifx_SCU_CCUCON3_Bits.PLL0MONTST */


/** \brief Offset for Ifx_SCU_CCUCON3_Bits.PLL0MONTST */


/** \brief Length for Ifx_SCU_CCUCON3_Bits.PLL1MONTST */


/** \brief Mask for Ifx_SCU_CCUCON3_Bits.PLL1MONTST */


/** \brief Offset for Ifx_SCU_CCUCON3_Bits.PLL1MONTST */


/** \brief Length for Ifx_SCU_CCUCON3_Bits.PLL2MONTST */


/** \brief Mask for Ifx_SCU_CCUCON3_Bits.PLL2MONTST */


/** \brief Offset for Ifx_SCU_CCUCON3_Bits.PLL2MONTST */


/** \brief Length for Ifx_SCU_CCUCON3_Bits.SPBMONTST */


/** \brief Mask for Ifx_SCU_CCUCON3_Bits.SPBMONTST */


/** \brief Offset for Ifx_SCU_CCUCON3_Bits.SPBMONTST */


/** \brief Length for Ifx_SCU_CCUCON3_Bits.BACKMONTST */


/** \brief Mask for Ifx_SCU_CCUCON3_Bits.BACKMONTST */


/** \brief Offset for Ifx_SCU_CCUCON3_Bits.BACKMONTST */


/** \brief Length for Ifx_SCU_CCUCON3_Bits.UP */


/** \brief Mask for Ifx_SCU_CCUCON3_Bits.UP */


/** \brief Offset for Ifx_SCU_CCUCON3_Bits.UP */


/** \brief Length for Ifx_SCU_CCUCON3_Bits.LCK */


/** \brief Mask for Ifx_SCU_CCUCON3_Bits.LCK */


/** \brief Offset for Ifx_SCU_CCUCON3_Bits.LCK */


/** \brief Length for Ifx_SCU_CCUCON4_Bits.LOTHR */


/** \brief Mask for Ifx_SCU_CCUCON4_Bits.LOTHR */


/** \brief Offset for Ifx_SCU_CCUCON4_Bits.LOTHR */


/** \brief Length for Ifx_SCU_CCUCON4_Bits.UPTHR */


/** \brief Mask for Ifx_SCU_CCUCON4_Bits.UPTHR */


/** \brief Offset for Ifx_SCU_CCUCON4_Bits.UPTHR */


/** \brief Length for Ifx_SCU_CCUCON4_Bits.MONEN */


/** \brief Mask for Ifx_SCU_CCUCON4_Bits.MONEN */


/** \brief Offset for Ifx_SCU_CCUCON4_Bits.MONEN */


/** \brief Length for Ifx_SCU_CCUCON4_Bits.MONTST */


/** \brief Mask for Ifx_SCU_CCUCON4_Bits.MONTST */


/** \brief Offset for Ifx_SCU_CCUCON4_Bits.MONTST */


/** \brief Length for Ifx_SCU_CCUCON4_Bits.UP */


/** \brief Mask for Ifx_SCU_CCUCON4_Bits.UP */


/** \brief Offset for Ifx_SCU_CCUCON4_Bits.UP */


/** \brief Length for Ifx_SCU_CCUCON4_Bits.LCK */


/** \brief Mask for Ifx_SCU_CCUCON4_Bits.LCK */


/** \brief Offset for Ifx_SCU_CCUCON4_Bits.LCK */


/** \brief Length for Ifx_SCU_CCUCON5_Bits.GETHDIV */


/** \brief Mask for Ifx_SCU_CCUCON5_Bits.GETHDIV */


/** \brief Offset for Ifx_SCU_CCUCON5_Bits.GETHDIV */


/** \brief Length for Ifx_SCU_CCUCON5_Bits.MCANHDIV */


/** \brief Mask for Ifx_SCU_CCUCON5_Bits.MCANHDIV */


/** \brief Offset for Ifx_SCU_CCUCON5_Bits.MCANHDIV */


/** \brief Length for Ifx_SCU_CCUCON5_Bits.UP */


/** \brief Mask for Ifx_SCU_CCUCON5_Bits.UP */


/** \brief Offset for Ifx_SCU_CCUCON5_Bits.UP */


/** \brief Length for Ifx_SCU_CCUCON5_Bits.LCK */


/** \brief Mask for Ifx_SCU_CCUCON5_Bits.LCK */


/** \brief Offset for Ifx_SCU_CCUCON5_Bits.LCK */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.ESR0 */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.ESR0 */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.ESR0 */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.ESR1 */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.ESR1 */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.ESR1 */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.SMU */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.SMU */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.SMU */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.SW */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.SW */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.SW */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.STM0 */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.STM0 */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.STM0 */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.STM1 */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.STM1 */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.STM1 */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.STM2 */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.STM2 */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.STM2 */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.STM3 */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.STM3 */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.STM3 */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.PORST */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.PORST */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.PORST */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.CB0 */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.CB0 */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.CB0 */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.CB1 */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.CB1 */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.CB1 */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.CB3 */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.CB3 */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.CB3 */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.EVRC */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.EVRC */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.EVRC */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.EVR33 */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.EVR33 */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.EVR33 */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.SWD */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.SWD */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.SWD */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.HSMS */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.HSMS */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.HSMS */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.HSMA */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.HSMA */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.HSMA */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.STBYR */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.STBYR */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.STBYR */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.LBPORST */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.LBPORST */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.LBPORST */


/** \brief Length for Ifx_SCU_RSTSTAT_Bits.LBTERM */


/** \brief Mask for Ifx_SCU_RSTSTAT_Bits.LBTERM */


/** \brief Offset for Ifx_SCU_RSTSTAT_Bits.LBTERM */


/** \brief Length for Ifx_SCU_RSTCON_Bits.ESR0 */


/** \brief Mask for Ifx_SCU_RSTCON_Bits.ESR0 */


/** \brief Offset for Ifx_SCU_RSTCON_Bits.ESR0 */


/** \brief Length for Ifx_SCU_RSTCON_Bits.ESR1 */


/** \brief Mask for Ifx_SCU_RSTCON_Bits.ESR1 */


/** \brief Offset for Ifx_SCU_RSTCON_Bits.ESR1 */


/** \brief Length for Ifx_SCU_RSTCON_Bits.SMU */


/** \brief Mask for Ifx_SCU_RSTCON_Bits.SMU */


/** \brief Offset for Ifx_SCU_RSTCON_Bits.SMU */


/** \brief Length for Ifx_SCU_RSTCON_Bits.SW */


/** \brief Mask for Ifx_SCU_RSTCON_Bits.SW */


/** \brief Offset for Ifx_SCU_RSTCON_Bits.SW */


/** \brief Length for Ifx_SCU_RSTCON_Bits.STM0 */


/** \brief Mask for Ifx_SCU_RSTCON_Bits.STM0 */


/** \brief Offset for Ifx_SCU_RSTCON_Bits.STM0 */


/** \brief Length for Ifx_SCU_RSTCON_Bits.STM1 */


/** \brief Mask for Ifx_SCU_RSTCON_Bits.STM1 */


/** \brief Offset for Ifx_SCU_RSTCON_Bits.STM1 */


/** \brief Length for Ifx_SCU_RSTCON_Bits.STM2 */


/** \brief Mask for Ifx_SCU_RSTCON_Bits.STM2 */


/** \brief Offset for Ifx_SCU_RSTCON_Bits.STM2 */


/** \brief Length for Ifx_SCU_RSTCON_Bits.STM3 */


/** \brief Mask for Ifx_SCU_RSTCON_Bits.STM3 */


/** \brief Offset for Ifx_SCU_RSTCON_Bits.STM3 */


/** \brief Length for Ifx_SCU_ARSTDIS_Bits.STM0DIS */


/** \brief Mask for Ifx_SCU_ARSTDIS_Bits.STM0DIS */


/** \brief Offset for Ifx_SCU_ARSTDIS_Bits.STM0DIS */


/** \brief Length for Ifx_SCU_ARSTDIS_Bits.STM1DIS */


/** \brief Mask for Ifx_SCU_ARSTDIS_Bits.STM1DIS */


/** \brief Offset for Ifx_SCU_ARSTDIS_Bits.STM1DIS */


/** \brief Length for Ifx_SCU_ARSTDIS_Bits.STM2DIS */


/** \brief Mask for Ifx_SCU_ARSTDIS_Bits.STM2DIS */


/** \brief Offset for Ifx_SCU_ARSTDIS_Bits.STM2DIS */


/** \brief Length for Ifx_SCU_ARSTDIS_Bits.STM3DIS */


/** \brief Mask for Ifx_SCU_ARSTDIS_Bits.STM3DIS */


/** \brief Offset for Ifx_SCU_ARSTDIS_Bits.STM3DIS */


/** \brief Length for Ifx_SCU_SWRSTCON_Bits.SWRSTREQ */


/** \brief Mask for Ifx_SCU_SWRSTCON_Bits.SWRSTREQ */


/** \brief Offset for Ifx_SCU_SWRSTCON_Bits.SWRSTREQ */


/** \brief Length for Ifx_SCU_RSTCON2_Bits.FRTO */


/** \brief Mask for Ifx_SCU_RSTCON2_Bits.FRTO */


/** \brief Offset for Ifx_SCU_RSTCON2_Bits.FRTO */


/** \brief Length for Ifx_SCU_RSTCON2_Bits.CLRC */


/** \brief Mask for Ifx_SCU_RSTCON2_Bits.CLRC */


/** \brief Offset for Ifx_SCU_RSTCON2_Bits.CLRC */


/** \brief Length for Ifx_SCU_RSTCON2_Bits.CSSx */


/** \brief Mask for Ifx_SCU_RSTCON2_Bits.CSSx */


/** \brief Offset for Ifx_SCU_RSTCON2_Bits.CSSx */


/** \brief Length for Ifx_SCU_RSTCON2_Bits.USRINFO */


/** \brief Mask for Ifx_SCU_RSTCON2_Bits.USRINFO */


/** \brief Offset for Ifx_SCU_RSTCON2_Bits.USRINFO */


/** \brief Length for Ifx_SCU_ESRCFGX_ESRCFGX_Bits.EDCON */


/** \brief Mask for Ifx_SCU_ESRCFGX_ESRCFGX_Bits.EDCON */


/** \brief Offset for Ifx_SCU_ESRCFGX_ESRCFGX_Bits.EDCON */


/** \brief Length for Ifx_SCU_ESROCFG_Bits.ARI */


/** \brief Mask for Ifx_SCU_ESROCFG_Bits.ARI */


/** \brief Offset for Ifx_SCU_ESROCFG_Bits.ARI */


/** \brief Length for Ifx_SCU_ESROCFG_Bits.ARC */


/** \brief Mask for Ifx_SCU_ESROCFG_Bits.ARC */


/** \brief Offset for Ifx_SCU_ESROCFG_Bits.ARC */


/** \brief Length for Ifx_SCU_SYSCON_Bits.CCTRIG0 */


/** \brief Mask for Ifx_SCU_SYSCON_Bits.CCTRIG0 */


/** \brief Offset for Ifx_SCU_SYSCON_Bits.CCTRIG0 */


/** \brief Length for Ifx_SCU_SYSCON_Bits.RAMINTM */


/** \brief Mask for Ifx_SCU_SYSCON_Bits.RAMINTM */


/** \brief Offset for Ifx_SCU_SYSCON_Bits.RAMINTM */


/** \brief Length for Ifx_SCU_SYSCON_Bits.SETLUDIS */


/** \brief Mask for Ifx_SCU_SYSCON_Bits.SETLUDIS */


/** \brief Offset for Ifx_SCU_SYSCON_Bits.SETLUDIS */


/** \brief Length for Ifx_SCU_SYSCON_Bits.DDC */


/** \brief Mask for Ifx_SCU_SYSCON_Bits.DDC */


/** \brief Offset for Ifx_SCU_SYSCON_Bits.DDC */


/** \brief Length for Ifx_SCU_CCUCON6_Bits.CPU0DIV */


/** \brief Mask for Ifx_SCU_CCUCON6_Bits.CPU0DIV */


/** \brief Offset for Ifx_SCU_CCUCON6_Bits.CPU0DIV */


/** \brief Length for Ifx_SCU_CCUCON7_Bits.CPU1DIV */


/** \brief Mask for Ifx_SCU_CCUCON7_Bits.CPU1DIV */


/** \brief Offset for Ifx_SCU_CCUCON7_Bits.CPU1DIV */


/** \brief Length for Ifx_SCU_CCUCON8_Bits.CPU2DIV */


/** \brief Mask for Ifx_SCU_CCUCON8_Bits.CPU2DIV */


/** \brief Offset for Ifx_SCU_CCUCON8_Bits.CPU2DIV */


/** \brief Length for Ifx_SCU_CCUCON9_Bits.CPU3DIV */


/** \brief Mask for Ifx_SCU_CCUCON9_Bits.CPU3DIV */


/** \brief Offset for Ifx_SCU_CCUCON9_Bits.CPU3DIV */


/** \brief Length for Ifx_SCU_PDR_Bits.PD0 */


/** \brief Mask for Ifx_SCU_PDR_Bits.PD0 */


/** \brief Offset for Ifx_SCU_PDR_Bits.PD0 */


/** \brief Length for Ifx_SCU_PDR_Bits.PL0 */


/** \brief Mask for Ifx_SCU_PDR_Bits.PL0 */


/** \brief Offset for Ifx_SCU_PDR_Bits.PL0 */


/** \brief Length for Ifx_SCU_PDR_Bits.PD1 */


/** \brief Mask for Ifx_SCU_PDR_Bits.PD1 */


/** \brief Offset for Ifx_SCU_PDR_Bits.PD1 */


/** \brief Length for Ifx_SCU_PDR_Bits.PL1 */


/** \brief Mask for Ifx_SCU_PDR_Bits.PL1 */


/** \brief Offset for Ifx_SCU_PDR_Bits.PL1 */


/** \brief Length for Ifx_SCU_IOCR_Bits.PC0 */


/** \brief Mask for Ifx_SCU_IOCR_Bits.PC0 */


/** \brief Offset for Ifx_SCU_IOCR_Bits.PC0 */


/** \brief Length for Ifx_SCU_IOCR_Bits.PC1 */


/** \brief Mask for Ifx_SCU_IOCR_Bits.PC1 */


/** \brief Offset for Ifx_SCU_IOCR_Bits.PC1 */


/** \brief Length for Ifx_SCU_OUT_Bits.P0 */


/** \brief Mask for Ifx_SCU_OUT_Bits.P0 */


/** \brief Offset for Ifx_SCU_OUT_Bits.P0 */


/** \brief Length for Ifx_SCU_OUT_Bits.P1 */


/** \brief Mask for Ifx_SCU_OUT_Bits.P1 */


/** \brief Offset for Ifx_SCU_OUT_Bits.P1 */


/** \brief Length for Ifx_SCU_OMR_Bits.PS0 */


/** \brief Mask for Ifx_SCU_OMR_Bits.PS0 */


/** \brief Offset for Ifx_SCU_OMR_Bits.PS0 */


/** \brief Length for Ifx_SCU_OMR_Bits.PS1 */


/** \brief Mask for Ifx_SCU_OMR_Bits.PS1 */


/** \brief Offset for Ifx_SCU_OMR_Bits.PS1 */


/** \brief Length for Ifx_SCU_OMR_Bits.PCL0 */


/** \brief Mask for Ifx_SCU_OMR_Bits.PCL0 */


/** \brief Offset for Ifx_SCU_OMR_Bits.PCL0 */


/** \brief Length for Ifx_SCU_OMR_Bits.PCL1 */


/** \brief Mask for Ifx_SCU_OMR_Bits.PCL1 */


/** \brief Offset for Ifx_SCU_OMR_Bits.PCL1 */


/** \brief Length for Ifx_SCU_IN_Bits.P0 */


/** \brief Mask for Ifx_SCU_IN_Bits.P0 */


/** \brief Offset for Ifx_SCU_IN_Bits.P0 */


/** \brief Length for Ifx_SCU_IN_Bits.P1 */


/** \brief Mask for Ifx_SCU_IN_Bits.P1 */


/** \brief Offset for Ifx_SCU_IN_Bits.P1 */


/** \brief Length for Ifx_SCU_STSTAT_Bits.HWCFG */


/** \brief Mask for Ifx_SCU_STSTAT_Bits.HWCFG */


/** \brief Offset for Ifx_SCU_STSTAT_Bits.HWCFG */


/** \brief Length for Ifx_SCU_STSTAT_Bits.FTM */


/** \brief Mask for Ifx_SCU_STSTAT_Bits.FTM */


/** \brief Offset for Ifx_SCU_STSTAT_Bits.FTM */


/** \brief Length for Ifx_SCU_STSTAT_Bits.MODE */


/** \brief Mask for Ifx_SCU_STSTAT_Bits.MODE */


/** \brief Offset for Ifx_SCU_STSTAT_Bits.MODE */


/** \brief Length for Ifx_SCU_STSTAT_Bits.FCBAE */


/** \brief Mask for Ifx_SCU_STSTAT_Bits.FCBAE */


/** \brief Offset for Ifx_SCU_STSTAT_Bits.FCBAE */


/** \brief Length for Ifx_SCU_STSTAT_Bits.LUDIS */


/** \brief Mask for Ifx_SCU_STSTAT_Bits.LUDIS */


/** \brief Offset for Ifx_SCU_STSTAT_Bits.LUDIS */


/** \brief Length for Ifx_SCU_STSTAT_Bits.TRSTL */


/** \brief Mask for Ifx_SCU_STSTAT_Bits.TRSTL */


/** \brief Offset for Ifx_SCU_STSTAT_Bits.TRSTL */


/** \brief Length for Ifx_SCU_STSTAT_Bits.SPDEN */


/** \brief Mask for Ifx_SCU_STSTAT_Bits.SPDEN */


/** \brief Offset for Ifx_SCU_STSTAT_Bits.SPDEN */


/** \brief Length for Ifx_SCU_STSTAT_Bits.RAMINT */


/** \brief Mask for Ifx_SCU_STSTAT_Bits.RAMINT */


/** \brief Offset for Ifx_SCU_STSTAT_Bits.RAMINT */


/** \brief Length for Ifx_SCU_STCON_Bits.SFCBAE */


/** \brief Mask for Ifx_SCU_STCON_Bits.SFCBAE */


/** \brief Offset for Ifx_SCU_STCON_Bits.SFCBAE */


/** \brief Length for Ifx_SCU_STCON_Bits.CFCBAE */


/** \brief Mask for Ifx_SCU_STCON_Bits.CFCBAE */


/** \brief Offset for Ifx_SCU_STCON_Bits.CFCBAE */


/** \brief Length for Ifx_SCU_STCON_Bits.STP */


/** \brief Mask for Ifx_SCU_STCON_Bits.STP */


/** \brief Offset for Ifx_SCU_STCON_Bits.STP */


/** \brief Length for Ifx_SCU_PMCSR0_Bits.REQSLP */


/** \brief Mask for Ifx_SCU_PMCSR0_Bits.REQSLP */


/** \brief Offset for Ifx_SCU_PMCSR0_Bits.REQSLP */


/** \brief Length for Ifx_SCU_PMCSR0_Bits.PMST */


/** \brief Mask for Ifx_SCU_PMCSR0_Bits.PMST */


/** \brief Offset for Ifx_SCU_PMCSR0_Bits.PMST */


/** \brief Length for Ifx_SCU_PMCSR1_Bits.REQSLP */


/** \brief Mask for Ifx_SCU_PMCSR1_Bits.REQSLP */


/** \brief Offset for Ifx_SCU_PMCSR1_Bits.REQSLP */


/** \brief Length for Ifx_SCU_PMCSR1_Bits.PMST */


/** \brief Mask for Ifx_SCU_PMCSR1_Bits.PMST */


/** \brief Offset for Ifx_SCU_PMCSR1_Bits.PMST */


/** \brief Length for Ifx_SCU_PMCSR2_Bits.REQSLP */


/** \brief Mask for Ifx_SCU_PMCSR2_Bits.REQSLP */


/** \brief Offset for Ifx_SCU_PMCSR2_Bits.REQSLP */


/** \brief Length for Ifx_SCU_PMCSR2_Bits.PMST */


/** \brief Mask for Ifx_SCU_PMCSR2_Bits.PMST */


/** \brief Offset for Ifx_SCU_PMCSR2_Bits.PMST */


/** \brief Length for Ifx_SCU_PMCSR3_Bits.REQSLP */


/** \brief Mask for Ifx_SCU_PMCSR3_Bits.REQSLP */


/** \brief Offset for Ifx_SCU_PMCSR3_Bits.REQSLP */


/** \brief Length for Ifx_SCU_PMCSR3_Bits.PMST */


/** \brief Mask for Ifx_SCU_PMCSR3_Bits.PMST */


/** \brief Offset for Ifx_SCU_PMCSR3_Bits.PMST */


/** \brief Length for Ifx_SCU_PMCSR4_Bits.REQSLP */


/** \brief Mask for Ifx_SCU_PMCSR4_Bits.REQSLP */


/** \brief Offset for Ifx_SCU_PMCSR4_Bits.REQSLP */


/** \brief Length for Ifx_SCU_PMCSR4_Bits.PMST */


/** \brief Mask for Ifx_SCU_PMCSR4_Bits.PMST */


/** \brief Offset for Ifx_SCU_PMCSR4_Bits.PMST */


/** \brief Length for Ifx_SCU_PMCSR5_Bits.REQSLP */


/** \brief Mask for Ifx_SCU_PMCSR5_Bits.REQSLP */


/** \brief Offset for Ifx_SCU_PMCSR5_Bits.REQSLP */


/** \brief Length for Ifx_SCU_PMCSR5_Bits.PMST */


/** \brief Mask for Ifx_SCU_PMCSR5_Bits.PMST */


/** \brief Offset for Ifx_SCU_PMCSR5_Bits.PMST */


/** \brief Length for Ifx_SCU_PMSTAT0_Bits.CPU0 */


/** \brief Mask for Ifx_SCU_PMSTAT0_Bits.CPU0 */


/** \brief Offset for Ifx_SCU_PMSTAT0_Bits.CPU0 */


/** \brief Length for Ifx_SCU_PMSTAT0_Bits.CPU1 */


/** \brief Mask for Ifx_SCU_PMSTAT0_Bits.CPU1 */


/** \brief Offset for Ifx_SCU_PMSTAT0_Bits.CPU1 */


/** \brief Length for Ifx_SCU_PMSTAT0_Bits.CPU2 */


/** \brief Mask for Ifx_SCU_PMSTAT0_Bits.CPU2 */


/** \brief Offset for Ifx_SCU_PMSTAT0_Bits.CPU2 */


/** \brief Length for Ifx_SCU_PMSTAT0_Bits.CPU3 */


/** \brief Mask for Ifx_SCU_PMSTAT0_Bits.CPU3 */


/** \brief Offset for Ifx_SCU_PMSTAT0_Bits.CPU3 */


/** \brief Length for Ifx_SCU_PMSTAT0_Bits.CPU4 */


/** \brief Mask for Ifx_SCU_PMSTAT0_Bits.CPU4 */


/** \brief Offset for Ifx_SCU_PMSTAT0_Bits.CPU4 */


/** \brief Length for Ifx_SCU_PMSTAT0_Bits.CPU5 */


/** \brief Mask for Ifx_SCU_PMSTAT0_Bits.CPU5 */


/** \brief Offset for Ifx_SCU_PMSTAT0_Bits.CPU5 */


/** \brief Length for Ifx_SCU_PMSTAT0_Bits.CPU0LS */


/** \brief Mask for Ifx_SCU_PMSTAT0_Bits.CPU0LS */


/** \brief Offset for Ifx_SCU_PMSTAT0_Bits.CPU0LS */


/** \brief Length for Ifx_SCU_PMSTAT0_Bits.CPU1LS */


/** \brief Mask for Ifx_SCU_PMSTAT0_Bits.CPU1LS */


/** \brief Offset for Ifx_SCU_PMSTAT0_Bits.CPU1LS */


/** \brief Length for Ifx_SCU_PMSTAT0_Bits.CPU2LS */


/** \brief Mask for Ifx_SCU_PMSTAT0_Bits.CPU2LS */


/** \brief Offset for Ifx_SCU_PMSTAT0_Bits.CPU2LS */


/** \brief Length for Ifx_SCU_PMSTAT0_Bits.CPU3LS */


/** \brief Mask for Ifx_SCU_PMSTAT0_Bits.CPU3LS */


/** \brief Offset for Ifx_SCU_PMSTAT0_Bits.CPU3LS */


/** \brief Length for Ifx_SCU_PMSWCR1_Bits.CPUIDLSEL */


/** \brief Mask for Ifx_SCU_PMSWCR1_Bits.CPUIDLSEL */


/** \brief Offset for Ifx_SCU_PMSWCR1_Bits.CPUIDLSEL */


/** \brief Length for Ifx_SCU_PMSWCR1_Bits.IRADIS */


/** \brief Mask for Ifx_SCU_PMSWCR1_Bits.IRADIS */


/** \brief Offset for Ifx_SCU_PMSWCR1_Bits.IRADIS */


/** \brief Length for Ifx_SCU_PMSWCR1_Bits.CPUSEL */


/** \brief Mask for Ifx_SCU_PMSWCR1_Bits.CPUSEL */


/** \brief Offset for Ifx_SCU_PMSWCR1_Bits.CPUSEL */


/** \brief Length for Ifx_SCU_PMSWCR1_Bits.STBYEVEN */


/** \brief Mask for Ifx_SCU_PMSWCR1_Bits.STBYEVEN */


/** \brief Offset for Ifx_SCU_PMSWCR1_Bits.STBYEVEN */


/** \brief Length for Ifx_SCU_PMSWCR1_Bits.STBYEV */


/** \brief Mask for Ifx_SCU_PMSWCR1_Bits.STBYEV */


/** \brief Offset for Ifx_SCU_PMSWCR1_Bits.STBYEV */


/** \brief Length for Ifx_SCU_EMSR_Bits.POL */


/** \brief Mask for Ifx_SCU_EMSR_Bits.POL */


/** \brief Offset for Ifx_SCU_EMSR_Bits.POL */


/** \brief Length for Ifx_SCU_EMSR_Bits.MODE */


/** \brief Mask for Ifx_SCU_EMSR_Bits.MODE */


/** \brief Offset for Ifx_SCU_EMSR_Bits.MODE */


/** \brief Length for Ifx_SCU_EMSR_Bits.ENON */


/** \brief Mask for Ifx_SCU_EMSR_Bits.ENON */


/** \brief Offset for Ifx_SCU_EMSR_Bits.ENON */


/** \brief Length for Ifx_SCU_EMSR_Bits.PSEL */


/** \brief Mask for Ifx_SCU_EMSR_Bits.PSEL */


/** \brief Offset for Ifx_SCU_EMSR_Bits.PSEL */


/** \brief Length for Ifx_SCU_EMSR_Bits.EMSF */


/** \brief Mask for Ifx_SCU_EMSR_Bits.EMSF */


/** \brief Offset for Ifx_SCU_EMSR_Bits.EMSF */


/** \brief Length for Ifx_SCU_EMSR_Bits.SEMSF */


/** \brief Mask for Ifx_SCU_EMSR_Bits.SEMSF */


/** \brief Offset for Ifx_SCU_EMSR_Bits.SEMSF */


/** \brief Length for Ifx_SCU_EMSSW_Bits.EMSFM */


/** \brief Mask for Ifx_SCU_EMSSW_Bits.EMSFM */


/** \brief Offset for Ifx_SCU_EMSSW_Bits.EMSFM */


/** \brief Length for Ifx_SCU_EMSSW_Bits.SEMSFM */


/** \brief Mask for Ifx_SCU_EMSSW_Bits.SEMSFM */


/** \brief Offset for Ifx_SCU_EMSSW_Bits.SEMSFM */


/** \brief Length for Ifx_SCU_DTSCSTAT_Bits.RESULT */


/** \brief Mask for Ifx_SCU_DTSCSTAT_Bits.RESULT */


/** \brief Offset for Ifx_SCU_DTSCSTAT_Bits.RESULT */


/** \brief Length for Ifx_SCU_DTSCLIM_Bits.LOWER */


/** \brief Mask for Ifx_SCU_DTSCLIM_Bits.LOWER */


/** \brief Offset for Ifx_SCU_DTSCLIM_Bits.LOWER */


/** \brief Length for Ifx_SCU_DTSCLIM_Bits.BGPOK */


/** \brief Mask for Ifx_SCU_DTSCLIM_Bits.BGPOK */


/** \brief Offset for Ifx_SCU_DTSCLIM_Bits.BGPOK */


/** \brief Length for Ifx_SCU_DTSCLIM_Bits.EN */


/** \brief Mask for Ifx_SCU_DTSCLIM_Bits.EN */


/** \brief Offset for Ifx_SCU_DTSCLIM_Bits.EN */


/** \brief Length for Ifx_SCU_DTSCLIM_Bits.LLU */


/** \brief Mask for Ifx_SCU_DTSCLIM_Bits.LLU */


/** \brief Offset for Ifx_SCU_DTSCLIM_Bits.LLU */


/** \brief Length for Ifx_SCU_DTSCLIM_Bits.UPPER */


/** \brief Mask for Ifx_SCU_DTSCLIM_Bits.UPPER */


/** \brief Offset for Ifx_SCU_DTSCLIM_Bits.UPPER */


/** \brief Length for Ifx_SCU_DTSCLIM_Bits.INTEN */


/** \brief Mask for Ifx_SCU_DTSCLIM_Bits.INTEN */


/** \brief Offset for Ifx_SCU_DTSCLIM_Bits.INTEN */


/** \brief Length for Ifx_SCU_DTSCLIM_Bits.INT */


/** \brief Mask for Ifx_SCU_DTSCLIM_Bits.INT */


/** \brief Offset for Ifx_SCU_DTSCLIM_Bits.INT */


/** \brief Length for Ifx_SCU_DTSCLIM_Bits.UOF */


/** \brief Mask for Ifx_SCU_DTSCLIM_Bits.UOF */


/** \brief Offset for Ifx_SCU_DTSCLIM_Bits.UOF */


/** \brief Length for Ifx_SCU_TRAPSTAT_Bits.ESR0T */


/** \brief Mask for Ifx_SCU_TRAPSTAT_Bits.ESR0T */


/** \brief Offset for Ifx_SCU_TRAPSTAT_Bits.ESR0T */


/** \brief Length for Ifx_SCU_TRAPSTAT_Bits.ESR1T */


/** \brief Mask for Ifx_SCU_TRAPSTAT_Bits.ESR1T */


/** \brief Offset for Ifx_SCU_TRAPSTAT_Bits.ESR1T */


/** \brief Length for Ifx_SCU_TRAPSTAT_Bits.TRAP2 */


/** \brief Mask for Ifx_SCU_TRAPSTAT_Bits.TRAP2 */


/** \brief Offset for Ifx_SCU_TRAPSTAT_Bits.TRAP2 */


/** \brief Length for Ifx_SCU_TRAPSTAT_Bits.SMUT */


/** \brief Mask for Ifx_SCU_TRAPSTAT_Bits.SMUT */


/** \brief Offset for Ifx_SCU_TRAPSTAT_Bits.SMUT */


/** \brief Length for Ifx_SCU_TRAPSET_Bits.ESR0T */


/** \brief Mask for Ifx_SCU_TRAPSET_Bits.ESR0T */


/** \brief Offset for Ifx_SCU_TRAPSET_Bits.ESR0T */


/** \brief Length for Ifx_SCU_TRAPSET_Bits.ESR1T */


/** \brief Mask for Ifx_SCU_TRAPSET_Bits.ESR1T */


/** \brief Offset for Ifx_SCU_TRAPSET_Bits.ESR1T */


/** \brief Length for Ifx_SCU_TRAPSET_Bits.TRAP2 */


/** \brief Mask for Ifx_SCU_TRAPSET_Bits.TRAP2 */


/** \brief Offset for Ifx_SCU_TRAPSET_Bits.TRAP2 */


/** \brief Length for Ifx_SCU_TRAPSET_Bits.SMUT */


/** \brief Mask for Ifx_SCU_TRAPSET_Bits.SMUT */


/** \brief Offset for Ifx_SCU_TRAPSET_Bits.SMUT */


/** \brief Length for Ifx_SCU_TRAPCLR_Bits.ESR0T */


/** \brief Mask for Ifx_SCU_TRAPCLR_Bits.ESR0T */


/** \brief Offset for Ifx_SCU_TRAPCLR_Bits.ESR0T */


/** \brief Length for Ifx_SCU_TRAPCLR_Bits.ESR1T */


/** \brief Mask for Ifx_SCU_TRAPCLR_Bits.ESR1T */


/** \brief Offset for Ifx_SCU_TRAPCLR_Bits.ESR1T */


/** \brief Length for Ifx_SCU_TRAPCLR_Bits.TRAP2 */


/** \brief Mask for Ifx_SCU_TRAPCLR_Bits.TRAP2 */


/** \brief Offset for Ifx_SCU_TRAPCLR_Bits.TRAP2 */


/** \brief Length for Ifx_SCU_TRAPCLR_Bits.SMUT */


/** \brief Mask for Ifx_SCU_TRAPCLR_Bits.SMUT */


/** \brief Offset for Ifx_SCU_TRAPCLR_Bits.SMUT */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU0ESR0T */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU0ESR0T */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU0ESR0T */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU0ESR1T */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU0ESR1T */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU0ESR1T */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU0TRAP2T */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU0TRAP2T */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU0TRAP2T */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU0SMUT */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU0SMUT */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU0SMUT */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU1ESR0T */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU1ESR0T */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU1ESR0T */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU1ESR1T */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU1ESR1T */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU1ESR1T */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU1TRAP2T */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU1TRAP2T */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU1TRAP2T */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU1SMUT */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU1SMUT */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU1SMUT */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU2ESR0T */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU2ESR0T */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU2ESR0T */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU2ESR1T */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU2ESR1T */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU2ESR1T */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU2TRAP2T */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU2TRAP2T */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU2TRAP2T */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU2SMUT */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU2SMUT */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU2SMUT */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU3ESR0T */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU3ESR0T */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU3ESR0T */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU3ESR1T */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU3ESR1T */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU3ESR1T */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU3TRAP2T */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU3TRAP2T */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU3TRAP2T */


/** \brief Length for Ifx_SCU_TRAPDIS0_Bits.CPU3SMUT */


/** \brief Mask for Ifx_SCU_TRAPDIS0_Bits.CPU3SMUT */


/** \brief Offset for Ifx_SCU_TRAPDIS0_Bits.CPU3SMUT */


/** \brief Length for Ifx_SCU_LCLCON0_Bits.LS0 */


/** \brief Mask for Ifx_SCU_LCLCON0_Bits.LS0 */


/** \brief Offset for Ifx_SCU_LCLCON0_Bits.LS0 */


/** \brief Length for Ifx_SCU_LCLCON0_Bits.LSEN0 */


/** \brief Mask for Ifx_SCU_LCLCON0_Bits.LSEN0 */


/** \brief Offset for Ifx_SCU_LCLCON0_Bits.LSEN0 */


/** \brief Length for Ifx_SCU_LCLCON1_Bits.LS1 */


/** \brief Mask for Ifx_SCU_LCLCON1_Bits.LS1 */


/** \brief Offset for Ifx_SCU_LCLCON1_Bits.LS1 */


/** \brief Length for Ifx_SCU_LCLCON1_Bits.LSEN1 */


/** \brief Mask for Ifx_SCU_LCLCON1_Bits.LSEN1 */


/** \brief Offset for Ifx_SCU_LCLCON1_Bits.LSEN1 */


/** \brief Length for Ifx_SCU_LCLTEST_Bits.LCLT0 */


/** \brief Mask for Ifx_SCU_LCLTEST_Bits.LCLT0 */


/** \brief Offset for Ifx_SCU_LCLTEST_Bits.LCLT0 */


/** \brief Length for Ifx_SCU_LCLTEST_Bits.LCLT1 */


/** \brief Mask for Ifx_SCU_LCLTEST_Bits.LCLT1 */


/** \brief Offset for Ifx_SCU_LCLTEST_Bits.LCLT1 */


/** \brief Length for Ifx_SCU_LCLTEST_Bits.LCLT2 */


/** \brief Mask for Ifx_SCU_LCLTEST_Bits.LCLT2 */


/** \brief Offset for Ifx_SCU_LCLTEST_Bits.LCLT2 */


/** \brief Length for Ifx_SCU_LCLTEST_Bits.LCLT3 */


/** \brief Mask for Ifx_SCU_LCLTEST_Bits.LCLT3 */


/** \brief Offset for Ifx_SCU_LCLTEST_Bits.LCLT3 */


/** \brief Length for Ifx_SCU_LCLTEST_Bits.PLCLT0 */


/** \brief Mask for Ifx_SCU_LCLTEST_Bits.PLCLT0 */


/** \brief Offset for Ifx_SCU_LCLTEST_Bits.PLCLT0 */


/** \brief Length for Ifx_SCU_LCLTEST_Bits.PLCLT1 */


/** \brief Mask for Ifx_SCU_LCLTEST_Bits.PLCLT1 */


/** \brief Offset for Ifx_SCU_LCLTEST_Bits.PLCLT1 */


/** \brief Length for Ifx_SCU_LCLTEST_Bits.PLCLT2 */


/** \brief Mask for Ifx_SCU_LCLTEST_Bits.PLCLT2 */


/** \brief Offset for Ifx_SCU_LCLTEST_Bits.PLCLT2 */


/** \brief Length for Ifx_SCU_LCLTEST_Bits.PLCLT3 */


/** \brief Mask for Ifx_SCU_LCLTEST_Bits.PLCLT3 */


/** \brief Offset for Ifx_SCU_LCLTEST_Bits.PLCLT3 */


/** \brief Length for Ifx_SCU_CHIPID_Bits.CHREV */


/** \brief Mask for Ifx_SCU_CHIPID_Bits.CHREV */


/** \brief Offset for Ifx_SCU_CHIPID_Bits.CHREV */


/** \brief Length for Ifx_SCU_CHIPID_Bits.CHTEC */


/** \brief Mask for Ifx_SCU_CHIPID_Bits.CHTEC */


/** \brief Offset for Ifx_SCU_CHIPID_Bits.CHTEC */


/** \brief Length for Ifx_SCU_CHIPID_Bits.CHPK */


/** \brief Mask for Ifx_SCU_CHIPID_Bits.CHPK */


/** \brief Offset for Ifx_SCU_CHIPID_Bits.CHPK */


/** \brief Length for Ifx_SCU_CHIPID_Bits.CHID */


/** \brief Mask for Ifx_SCU_CHIPID_Bits.CHID */


/** \brief Offset for Ifx_SCU_CHIPID_Bits.CHID */


/** \brief Length for Ifx_SCU_CHIPID_Bits.EEA */


/** \brief Mask for Ifx_SCU_CHIPID_Bits.EEA */


/** \brief Offset for Ifx_SCU_CHIPID_Bits.EEA */


/** \brief Length for Ifx_SCU_CHIPID_Bits.UCODE */


/** \brief Mask for Ifx_SCU_CHIPID_Bits.UCODE */


/** \brief Offset for Ifx_SCU_CHIPID_Bits.UCODE */


/** \brief Length for Ifx_SCU_CHIPID_Bits.FSIZE */


/** \brief Mask for Ifx_SCU_CHIPID_Bits.FSIZE */


/** \brief Offset for Ifx_SCU_CHIPID_Bits.FSIZE */


/** \brief Length for Ifx_SCU_CHIPID_Bits.VART */


/** \brief Mask for Ifx_SCU_CHIPID_Bits.VART */


/** \brief Offset for Ifx_SCU_CHIPID_Bits.VART */


/** \brief Length for Ifx_SCU_CHIPID_Bits.SEC */


/** \brief Mask for Ifx_SCU_CHIPID_Bits.SEC */


/** \brief Offset for Ifx_SCU_CHIPID_Bits.SEC */


/** \brief Length for Ifx_SCU_MANID_Bits.DEPT */


/** \brief Mask for Ifx_SCU_MANID_Bits.DEPT */


/** \brief Offset for Ifx_SCU_MANID_Bits.DEPT */


/** \brief Length for Ifx_SCU_MANID_Bits.MANUF */


/** \brief Mask for Ifx_SCU_MANID_Bits.MANUF */


/** \brief Offset for Ifx_SCU_MANID_Bits.MANUF */


/** \brief Length for Ifx_SCU_SWAPCTRL_Bits.ADDRCFG */


/** \brief Mask for Ifx_SCU_SWAPCTRL_Bits.ADDRCFG */


/** \brief Offset for Ifx_SCU_SWAPCTRL_Bits.ADDRCFG */


/** \brief Length for Ifx_SCU_SWAPCTRL_Bits.Spare */


/** \brief Mask for Ifx_SCU_SWAPCTRL_Bits.Spare */


/** \brief Offset for Ifx_SCU_SWAPCTRL_Bits.Spare */


/** \brief Length for Ifx_SCU_LBISTCTRL0_Bits.LBISTREQ */


/** \brief Mask for Ifx_SCU_LBISTCTRL0_Bits.LBISTREQ */


/** \brief Offset for Ifx_SCU_LBISTCTRL0_Bits.LBISTREQ */


/** \brief Length for Ifx_SCU_LBISTCTRL0_Bits.LBISTRES */


/** \brief Mask for Ifx_SCU_LBISTCTRL0_Bits.LBISTRES */


/** \brief Offset for Ifx_SCU_LBISTCTRL0_Bits.LBISTRES */


/** \brief Length for Ifx_SCU_LBISTCTRL0_Bits.PATTERNS */


/** \brief Mask for Ifx_SCU_LBISTCTRL0_Bits.PATTERNS */


/** \brief Offset for Ifx_SCU_LBISTCTRL0_Bits.PATTERNS */


/** \brief Length for Ifx_SCU_LBISTCTRL0_Bits.LBISTDONE */


/** \brief Mask for Ifx_SCU_LBISTCTRL0_Bits.LBISTDONE */


/** \brief Offset for Ifx_SCU_LBISTCTRL0_Bits.LBISTDONE */


/** \brief Length for Ifx_SCU_LBISTCTRL0_Bits.LBISTERRINJ */


/** \brief Mask for Ifx_SCU_LBISTCTRL0_Bits.LBISTERRINJ */


/** \brief Offset for Ifx_SCU_LBISTCTRL0_Bits.LBISTERRINJ */


/** \brief Length for Ifx_SCU_LBISTCTRL0_Bits.LBISTREQRED */


/** \brief Mask for Ifx_SCU_LBISTCTRL0_Bits.LBISTREQRED */


/** \brief Offset for Ifx_SCU_LBISTCTRL0_Bits.LBISTREQRED */


/** \brief Length for Ifx_SCU_LBISTCTRL1_Bits.SEED */


/** \brief Mask for Ifx_SCU_LBISTCTRL1_Bits.SEED */


/** \brief Offset for Ifx_SCU_LBISTCTRL1_Bits.SEED */


/** \brief Length for Ifx_SCU_LBISTCTRL1_Bits.SPLITSH */


/** \brief Mask for Ifx_SCU_LBISTCTRL1_Bits.SPLITSH */


/** \brief Offset for Ifx_SCU_LBISTCTRL1_Bits.SPLITSH */


/** \brief Length for Ifx_SCU_LBISTCTRL1_Bits.BODY */


/** \brief Mask for Ifx_SCU_LBISTCTRL1_Bits.BODY */


/** \brief Offset for Ifx_SCU_LBISTCTRL1_Bits.BODY */


/** \brief Length for Ifx_SCU_LBISTCTRL1_Bits.LBISTFREQU */


/** \brief Mask for Ifx_SCU_LBISTCTRL1_Bits.LBISTFREQU */


/** \brief Offset for Ifx_SCU_LBISTCTRL1_Bits.LBISTFREQU */


/** \brief Length for Ifx_SCU_LBISTCTRL2_Bits.LENGTH */


/** \brief Mask for Ifx_SCU_LBISTCTRL2_Bits.LENGTH */


/** \brief Offset for Ifx_SCU_LBISTCTRL2_Bits.LENGTH */


/** \brief Length for Ifx_SCU_LBISTCTRL3_Bits.SIGNATURE */


/** \brief Mask for Ifx_SCU_LBISTCTRL3_Bits.SIGNATURE */


/** \brief Offset for Ifx_SCU_LBISTCTRL3_Bits.SIGNATURE */


/** \brief Length for Ifx_SCU_STMEM1_Bits.MEM */


/** \brief Mask for Ifx_SCU_STMEM1_Bits.MEM */


/** \brief Offset for Ifx_SCU_STMEM1_Bits.MEM */


/** \brief Length for Ifx_SCU_STMEM2_Bits.MEM */


/** \brief Mask for Ifx_SCU_STMEM2_Bits.MEM */


/** \brief Offset for Ifx_SCU_STMEM2_Bits.MEM */


/** \brief Length for Ifx_SCU_PDISC_Bits.PDIS0 */


/** \brief Mask for Ifx_SCU_PDISC_Bits.PDIS0 */


/** \brief Offset for Ifx_SCU_PDISC_Bits.PDIS0 */


/** \brief Length for Ifx_SCU_PDISC_Bits.PDIS1 */


/** \brief Mask for Ifx_SCU_PDISC_Bits.PDIS1 */


/** \brief Offset for Ifx_SCU_PDISC_Bits.PDIS1 */


/** \brief Length for Ifx_SCU_PMTRCSR0_Bits.LJTEN */


/** \brief Mask for Ifx_SCU_PMTRCSR0_Bits.LJTEN */


/** \brief Offset for Ifx_SCU_PMTRCSR0_Bits.LJTEN */


/** \brief Length for Ifx_SCU_PMTRCSR0_Bits.LJTOVEN */


/** \brief Mask for Ifx_SCU_PMTRCSR0_Bits.LJTOVEN */


/** \brief Offset for Ifx_SCU_PMTRCSR0_Bits.LJTOVEN */


/** \brief Length for Ifx_SCU_PMTRCSR0_Bits.LJTOVIEN */


/** \brief Mask for Ifx_SCU_PMTRCSR0_Bits.LJTOVIEN */


/** \brief Offset for Ifx_SCU_PMTRCSR0_Bits.LJTOVIEN */


/** \brief Length for Ifx_SCU_PMTRCSR0_Bits.LJTSTRT */


/** \brief Mask for Ifx_SCU_PMTRCSR0_Bits.LJTSTRT */


/** \brief Offset for Ifx_SCU_PMTRCSR0_Bits.LJTSTRT */


/** \brief Length for Ifx_SCU_PMTRCSR0_Bits.LJTSTP */


/** \brief Mask for Ifx_SCU_PMTRCSR0_Bits.LJTSTP */


/** \brief Offset for Ifx_SCU_PMTRCSR0_Bits.LJTSTP */


/** \brief Length for Ifx_SCU_PMTRCSR0_Bits.LJTCLR */


/** \brief Mask for Ifx_SCU_PMTRCSR0_Bits.LJTCLR */


/** \brief Offset for Ifx_SCU_PMTRCSR0_Bits.LJTCLR */


/** \brief Length for Ifx_SCU_PMTRCSR0_Bits.SDSTEP */


/** \brief Mask for Ifx_SCU_PMTRCSR0_Bits.SDSTEP */


/** \brief Offset for Ifx_SCU_PMTRCSR0_Bits.SDSTEP */


/** \brief Length for Ifx_SCU_PMTRCSR0_Bits.VDTEN */


/** \brief Mask for Ifx_SCU_PMTRCSR0_Bits.VDTEN */


/** \brief Offset for Ifx_SCU_PMTRCSR0_Bits.VDTEN */


/** \brief Length for Ifx_SCU_PMTRCSR0_Bits.VDTOVEN */


/** \brief Mask for Ifx_SCU_PMTRCSR0_Bits.VDTOVEN */


/** \brief Offset for Ifx_SCU_PMTRCSR0_Bits.VDTOVEN */


/** \brief Length for Ifx_SCU_PMTRCSR0_Bits.VDTOVIEN */


/** \brief Mask for Ifx_SCU_PMTRCSR0_Bits.VDTOVIEN */


/** \brief Offset for Ifx_SCU_PMTRCSR0_Bits.VDTOVIEN */


/** \brief Length for Ifx_SCU_PMTRCSR0_Bits.VDTSTRT */


/** \brief Mask for Ifx_SCU_PMTRCSR0_Bits.VDTSTRT */


/** \brief Offset for Ifx_SCU_PMTRCSR0_Bits.VDTSTRT */


/** \brief Length for Ifx_SCU_PMTRCSR0_Bits.VDTSTP */


/** \brief Mask for Ifx_SCU_PMTRCSR0_Bits.VDTSTP */


/** \brief Offset for Ifx_SCU_PMTRCSR0_Bits.VDTSTP */


/** \brief Length for Ifx_SCU_PMTRCSR0_Bits.VDTCLR */


/** \brief Mask for Ifx_SCU_PMTRCSR0_Bits.VDTCLR */


/** \brief Offset for Ifx_SCU_PMTRCSR0_Bits.VDTCLR */


/** \brief Length for Ifx_SCU_PMTRCSR0_Bits.LPSLPEN */


/** \brief Mask for Ifx_SCU_PMTRCSR0_Bits.LPSLPEN */


/** \brief Offset for Ifx_SCU_PMTRCSR0_Bits.LPSLPEN */


/** \brief Length for Ifx_SCU_PMTRCSR1_Bits.LJTCV */


/** \brief Mask for Ifx_SCU_PMTRCSR1_Bits.LJTCV */


/** \brief Offset for Ifx_SCU_PMTRCSR1_Bits.LJTCV */


/** \brief Length for Ifx_SCU_PMTRCSR1_Bits.VDTCV */


/** \brief Mask for Ifx_SCU_PMTRCSR1_Bits.VDTCV */


/** \brief Offset for Ifx_SCU_PMTRCSR1_Bits.VDTCV */


/** \brief Length for Ifx_SCU_PMTRCSR2_Bits.LDJMPREQ */


/** \brief Mask for Ifx_SCU_PMTRCSR2_Bits.LDJMPREQ */


/** \brief Offset for Ifx_SCU_PMTRCSR2_Bits.LDJMPREQ */


/** \brief Length for Ifx_SCU_PMTRCSR2_Bits.LJTRUN */


/** \brief Mask for Ifx_SCU_PMTRCSR2_Bits.LJTRUN */


/** \brief Offset for Ifx_SCU_PMTRCSR2_Bits.LJTRUN */


/** \brief Length for Ifx_SCU_PMTRCSR2_Bits.LJTOV */


/** \brief Mask for Ifx_SCU_PMTRCSR2_Bits.LJTOV */


/** \brief Offset for Ifx_SCU_PMTRCSR2_Bits.LJTOV */


/** \brief Length for Ifx_SCU_PMTRCSR2_Bits.LJTOVCLR */


/** \brief Mask for Ifx_SCU_PMTRCSR2_Bits.LJTOVCLR */


/** \brief Offset for Ifx_SCU_PMTRCSR2_Bits.LJTOVCLR */


/** \brief Length for Ifx_SCU_PMTRCSR2_Bits.LJTCNT */


/** \brief Mask for Ifx_SCU_PMTRCSR2_Bits.LJTCNT */


/** \brief Offset for Ifx_SCU_PMTRCSR2_Bits.LJTCNT */


/** \brief Length for Ifx_SCU_PMTRCSR3_Bits.VDROOPREQ */


/** \brief Mask for Ifx_SCU_PMTRCSR3_Bits.VDROOPREQ */


/** \brief Offset for Ifx_SCU_PMTRCSR3_Bits.VDROOPREQ */


/** \brief Length for Ifx_SCU_PMTRCSR3_Bits.VDTRUN */


/** \brief Mask for Ifx_SCU_PMTRCSR3_Bits.VDTRUN */


/** \brief Offset for Ifx_SCU_PMTRCSR3_Bits.VDTRUN */


/** \brief Length for Ifx_SCU_PMTRCSR3_Bits.VDTOV */


/** \brief Mask for Ifx_SCU_PMTRCSR3_Bits.VDTOV */


/** \brief Offset for Ifx_SCU_PMTRCSR3_Bits.VDTOV */


/** \brief Length for Ifx_SCU_PMTRCSR3_Bits.VDTOVCLR */


/** \brief Mask for Ifx_SCU_PMTRCSR3_Bits.VDTOVCLR */


/** \brief Offset for Ifx_SCU_PMTRCSR3_Bits.VDTOVCLR */


/** \brief Length for Ifx_SCU_PMTRCSR3_Bits.VDTCNT */


/** \brief Mask for Ifx_SCU_PMTRCSR3_Bits.VDTCNT */


/** \brief Offset for Ifx_SCU_PMTRCSR3_Bits.VDTCNT */


/** \brief Length for Ifx_SCU_STMEM3_Bits.MEM */


/** \brief Mask for Ifx_SCU_STMEM3_Bits.MEM */


/** \brief Offset for Ifx_SCU_STMEM3_Bits.MEM */


/** \brief Length for Ifx_SCU_STMEM4_Bits.MEM */


/** \brief Mask for Ifx_SCU_STMEM4_Bits.MEM */


/** \brief Offset for Ifx_SCU_STMEM4_Bits.MEM */


/** \brief Length for Ifx_SCU_STMEM5_Bits.MEM */


/** \brief Mask for Ifx_SCU_STMEM5_Bits.MEM */


/** \brief Offset for Ifx_SCU_STMEM5_Bits.MEM */


/** \brief Length for Ifx_SCU_STMEM6_Bits.MEM */


/** \brief Mask for Ifx_SCU_STMEM6_Bits.MEM */


/** \brief Offset for Ifx_SCU_STMEM6_Bits.MEM */


/** \brief Length for Ifx_SCU_OVCENABLE_Bits.OVEN0 */


/** \brief Mask for Ifx_SCU_OVCENABLE_Bits.OVEN0 */


/** \brief Offset for Ifx_SCU_OVCENABLE_Bits.OVEN0 */


/** \brief Length for Ifx_SCU_OVCENABLE_Bits.OVEN1 */


/** \brief Mask for Ifx_SCU_OVCENABLE_Bits.OVEN1 */


/** \brief Offset for Ifx_SCU_OVCENABLE_Bits.OVEN1 */


/** \brief Length for Ifx_SCU_OVCENABLE_Bits.OVEN2 */


/** \brief Mask for Ifx_SCU_OVCENABLE_Bits.OVEN2 */


/** \brief Offset for Ifx_SCU_OVCENABLE_Bits.OVEN2 */


/** \brief Length for Ifx_SCU_OVCENABLE_Bits.OVEN3 */


/** \brief Mask for Ifx_SCU_OVCENABLE_Bits.OVEN3 */


/** \brief Offset for Ifx_SCU_OVCENABLE_Bits.OVEN3 */


/** \brief Length for Ifx_SCU_OVCCON_Bits.CSEL0 */


/** \brief Mask for Ifx_SCU_OVCCON_Bits.CSEL0 */


/** \brief Offset for Ifx_SCU_OVCCON_Bits.CSEL0 */


/** \brief Length for Ifx_SCU_OVCCON_Bits.CSEL1 */


/** \brief Mask for Ifx_SCU_OVCCON_Bits.CSEL1 */


/** \brief Offset for Ifx_SCU_OVCCON_Bits.CSEL1 */


/** \brief Length for Ifx_SCU_OVCCON_Bits.CSEL2 */


/** \brief Mask for Ifx_SCU_OVCCON_Bits.CSEL2 */


/** \brief Offset for Ifx_SCU_OVCCON_Bits.CSEL2 */


/** \brief Length for Ifx_SCU_OVCCON_Bits.CSEL3 */


/** \brief Mask for Ifx_SCU_OVCCON_Bits.CSEL3 */


/** \brief Offset for Ifx_SCU_OVCCON_Bits.CSEL3 */


/** \brief Length for Ifx_SCU_OVCCON_Bits.OVSTRT */


/** \brief Mask for Ifx_SCU_OVCCON_Bits.OVSTRT */


/** \brief Offset for Ifx_SCU_OVCCON_Bits.OVSTRT */


/** \brief Length for Ifx_SCU_OVCCON_Bits.OVSTP */


/** \brief Mask for Ifx_SCU_OVCCON_Bits.OVSTP */


/** \brief Offset for Ifx_SCU_OVCCON_Bits.OVSTP */


/** \brief Length for Ifx_SCU_OVCCON_Bits.DCINVAL */


/** \brief Mask for Ifx_SCU_OVCCON_Bits.DCINVAL */


/** \brief Offset for Ifx_SCU_OVCCON_Bits.DCINVAL */


/** \brief Length for Ifx_SCU_OVCCON_Bits.OVCONF */


/** \brief Mask for Ifx_SCU_OVCCON_Bits.OVCONF */


/** \brief Offset for Ifx_SCU_OVCCON_Bits.OVCONF */


/** \brief Length for Ifx_SCU_OVCCON_Bits.POVCONF */


/** \brief Mask for Ifx_SCU_OVCCON_Bits.POVCONF */


/** \brief Offset for Ifx_SCU_OVCCON_Bits.POVCONF */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ0A */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ0A */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ0A */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ5A */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ5A */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ5A */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ2A */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ2A */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ2A */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ3A */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ3A */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ3A */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ0C */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ0C */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ0C */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ1C */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ1C */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ1C */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ3C */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ3C */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ3C */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ2C */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ2C */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ2C */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ4A */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ4A */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ4A */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ6A */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ6A */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ6A */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ1A */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ1A */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ1A */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ7A */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ7A */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ7A */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ6D */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ6D */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ6D */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ4D */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ4D */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ4D */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ2B */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ2B */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ2B */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ3B */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ3B */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ3B */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILRQ7C */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILRQ7C */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILRQ7C */


/** \brief Length for Ifx_SCU_EIFILT_Bits.FILTDIV */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.FILTDIV */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.FILTDIV */


/** \brief Length for Ifx_SCU_EIFILT_Bits.DEPTH */


/** \brief Mask for Ifx_SCU_EIFILT_Bits.DEPTH */


/** \brief Offset for Ifx_SCU_EIFILT_Bits.DEPTH */


/** \brief Length for Ifx_SCU_EICR_Bits.EXIS0 */


/** \brief Mask for Ifx_SCU_EICR_Bits.EXIS0 */


/** \brief Offset for Ifx_SCU_EICR_Bits.EXIS0 */


/** \brief Length for Ifx_SCU_EICR_Bits.FEN0 */


/** \brief Mask for Ifx_SCU_EICR_Bits.FEN0 */


/** \brief Offset for Ifx_SCU_EICR_Bits.FEN0 */


/** \brief Length for Ifx_SCU_EICR_Bits.REN0 */


/** \brief Mask for Ifx_SCU_EICR_Bits.REN0 */


/** \brief Offset for Ifx_SCU_EICR_Bits.REN0 */


/** \brief Length for Ifx_SCU_EICR_Bits.LDEN0 */


/** \brief Mask for Ifx_SCU_EICR_Bits.LDEN0 */


/** \brief Offset for Ifx_SCU_EICR_Bits.LDEN0 */


/** \brief Length for Ifx_SCU_EICR_Bits.EIEN0 */


/** \brief Mask for Ifx_SCU_EICR_Bits.EIEN0 */


/** \brief Offset for Ifx_SCU_EICR_Bits.EIEN0 */


/** \brief Length for Ifx_SCU_EICR_Bits.INP0 */


/** \brief Mask for Ifx_SCU_EICR_Bits.INP0 */


/** \brief Offset for Ifx_SCU_EICR_Bits.INP0 */


/** \brief Length for Ifx_SCU_EICR_Bits.EXIS1 */


/** \brief Mask for Ifx_SCU_EICR_Bits.EXIS1 */


/** \brief Offset for Ifx_SCU_EICR_Bits.EXIS1 */


/** \brief Length for Ifx_SCU_EICR_Bits.FEN1 */


/** \brief Mask for Ifx_SCU_EICR_Bits.FEN1 */


/** \brief Offset for Ifx_SCU_EICR_Bits.FEN1 */


/** \brief Length for Ifx_SCU_EICR_Bits.REN1 */


/** \brief Mask for Ifx_SCU_EICR_Bits.REN1 */


/** \brief Offset for Ifx_SCU_EICR_Bits.REN1 */


/** \brief Length for Ifx_SCU_EICR_Bits.LDEN1 */


/** \brief Mask for Ifx_SCU_EICR_Bits.LDEN1 */


/** \brief Offset for Ifx_SCU_EICR_Bits.LDEN1 */


/** \brief Length for Ifx_SCU_EICR_Bits.EIEN1 */


/** \brief Mask for Ifx_SCU_EICR_Bits.EIEN1 */


/** \brief Offset for Ifx_SCU_EICR_Bits.EIEN1 */


/** \brief Length for Ifx_SCU_EICR_Bits.INP1 */


/** \brief Mask for Ifx_SCU_EICR_Bits.INP1 */


/** \brief Offset for Ifx_SCU_EICR_Bits.INP1 */


/** \brief Length for Ifx_SCU_EIFR_Bits.INTF0 */


/** \brief Mask for Ifx_SCU_EIFR_Bits.INTF0 */


/** \brief Offset for Ifx_SCU_EIFR_Bits.INTF0 */


/** \brief Length for Ifx_SCU_EIFR_Bits.INTF1 */


/** \brief Mask for Ifx_SCU_EIFR_Bits.INTF1 */


/** \brief Offset for Ifx_SCU_EIFR_Bits.INTF1 */


/** \brief Length for Ifx_SCU_EIFR_Bits.INTF2 */


/** \brief Mask for Ifx_SCU_EIFR_Bits.INTF2 */


/** \brief Offset for Ifx_SCU_EIFR_Bits.INTF2 */


/** \brief Length for Ifx_SCU_EIFR_Bits.INTF3 */


/** \brief Mask for Ifx_SCU_EIFR_Bits.INTF3 */


/** \brief Offset for Ifx_SCU_EIFR_Bits.INTF3 */


/** \brief Length for Ifx_SCU_EIFR_Bits.INTF4 */


/** \brief Mask for Ifx_SCU_EIFR_Bits.INTF4 */


/** \brief Offset for Ifx_SCU_EIFR_Bits.INTF4 */


/** \brief Length for Ifx_SCU_EIFR_Bits.INTF5 */


/** \brief Mask for Ifx_SCU_EIFR_Bits.INTF5 */


/** \brief Offset for Ifx_SCU_EIFR_Bits.INTF5 */


/** \brief Length for Ifx_SCU_EIFR_Bits.INTF6 */


/** \brief Mask for Ifx_SCU_EIFR_Bits.INTF6 */


/** \brief Offset for Ifx_SCU_EIFR_Bits.INTF6 */


/** \brief Length for Ifx_SCU_EIFR_Bits.INTF7 */


/** \brief Mask for Ifx_SCU_EIFR_Bits.INTF7 */


/** \brief Offset for Ifx_SCU_EIFR_Bits.INTF7 */


/** \brief Length for Ifx_SCU_FMR_Bits.FS0 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FS0 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FS0 */


/** \brief Length for Ifx_SCU_FMR_Bits.FS1 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FS1 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FS1 */


/** \brief Length for Ifx_SCU_FMR_Bits.FS2 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FS2 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FS2 */


/** \brief Length for Ifx_SCU_FMR_Bits.FS3 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FS3 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FS3 */


/** \brief Length for Ifx_SCU_FMR_Bits.FS4 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FS4 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FS4 */


/** \brief Length for Ifx_SCU_FMR_Bits.FS5 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FS5 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FS5 */


/** \brief Length for Ifx_SCU_FMR_Bits.FS6 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FS6 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FS6 */


/** \brief Length for Ifx_SCU_FMR_Bits.FS7 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FS7 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FS7 */


/** \brief Length for Ifx_SCU_FMR_Bits.FC0 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FC0 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FC0 */


/** \brief Length for Ifx_SCU_FMR_Bits.FC1 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FC1 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FC1 */


/** \brief Length for Ifx_SCU_FMR_Bits.FC2 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FC2 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FC2 */


/** \brief Length for Ifx_SCU_FMR_Bits.FC3 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FC3 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FC3 */


/** \brief Length for Ifx_SCU_FMR_Bits.FC4 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FC4 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FC4 */


/** \brief Length for Ifx_SCU_FMR_Bits.FC5 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FC5 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FC5 */


/** \brief Length for Ifx_SCU_FMR_Bits.FC6 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FC6 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FC6 */


/** \brief Length for Ifx_SCU_FMR_Bits.FC7 */


/** \brief Mask for Ifx_SCU_FMR_Bits.FC7 */


/** \brief Offset for Ifx_SCU_FMR_Bits.FC7 */


/** \brief Length for Ifx_SCU_PDRR_Bits.PDR0 */


/** \brief Mask for Ifx_SCU_PDRR_Bits.PDR0 */


/** \brief Offset for Ifx_SCU_PDRR_Bits.PDR0 */


/** \brief Length for Ifx_SCU_PDRR_Bits.PDR1 */


/** \brief Mask for Ifx_SCU_PDRR_Bits.PDR1 */


/** \brief Offset for Ifx_SCU_PDRR_Bits.PDR1 */


/** \brief Length for Ifx_SCU_PDRR_Bits.PDR2 */


/** \brief Mask for Ifx_SCU_PDRR_Bits.PDR2 */


/** \brief Offset for Ifx_SCU_PDRR_Bits.PDR2 */


/** \brief Length for Ifx_SCU_PDRR_Bits.PDR3 */


/** \brief Mask for Ifx_SCU_PDRR_Bits.PDR3 */


/** \brief Offset for Ifx_SCU_PDRR_Bits.PDR3 */


/** \brief Length for Ifx_SCU_PDRR_Bits.PDR4 */


/** \brief Mask for Ifx_SCU_PDRR_Bits.PDR4 */


/** \brief Offset for Ifx_SCU_PDRR_Bits.PDR4 */


/** \brief Length for Ifx_SCU_PDRR_Bits.PDR5 */


/** \brief Mask for Ifx_SCU_PDRR_Bits.PDR5 */


/** \brief Offset for Ifx_SCU_PDRR_Bits.PDR5 */


/** \brief Length for Ifx_SCU_PDRR_Bits.PDR6 */


/** \brief Mask for Ifx_SCU_PDRR_Bits.PDR6 */


/** \brief Offset for Ifx_SCU_PDRR_Bits.PDR6 */


/** \brief Length for Ifx_SCU_PDRR_Bits.PDR7 */


/** \brief Mask for Ifx_SCU_PDRR_Bits.PDR7 */


/** \brief Offset for Ifx_SCU_PDRR_Bits.PDR7 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN00 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN00 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN00 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN01 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN01 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN01 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN02 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN02 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN02 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN03 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN03 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN03 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN04 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN04 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN04 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN05 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN05 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN05 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN06 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN06 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN06 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN07 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN07 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN07 */


/** \brief Length for Ifx_SCU_IGCR_Bits.GEEN0 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.GEEN0 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.GEEN0 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IGP0 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IGP0 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IGP0 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN10 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN10 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN10 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN11 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN11 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN11 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN12 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN12 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN12 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN13 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN13 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN13 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN14 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN14 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN14 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN15 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN15 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN15 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN16 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN16 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN16 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IPEN17 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IPEN17 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IPEN17 */


/** \brief Length for Ifx_SCU_IGCR_Bits.GEEN1 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.GEEN1 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.GEEN1 */


/** \brief Length for Ifx_SCU_IGCR_Bits.IGP1 */


/** \brief Mask for Ifx_SCU_IGCR_Bits.IGP1 */


/** \brief Offset for Ifx_SCU_IGCR_Bits.IGP1 */


/** \brief Length for Ifx_SCU_WDTCPU_CON0_Bits.ENDINIT */


/** \brief Mask for Ifx_SCU_WDTCPU_CON0_Bits.ENDINIT */


/** \brief Offset for Ifx_SCU_WDTCPU_CON0_Bits.ENDINIT */


/** \brief Length for Ifx_SCU_WDTCPU_CON0_Bits.LCK */


/** \brief Mask for Ifx_SCU_WDTCPU_CON0_Bits.LCK */


/** \brief Offset for Ifx_SCU_WDTCPU_CON0_Bits.LCK */


/** \brief Length for Ifx_SCU_WDTCPU_CON0_Bits.PW */


/** \brief Mask for Ifx_SCU_WDTCPU_CON0_Bits.PW */


/** \brief Offset for Ifx_SCU_WDTCPU_CON0_Bits.PW */


/** \brief Length for Ifx_SCU_WDTCPU_CON0_Bits.REL */


/** \brief Mask for Ifx_SCU_WDTCPU_CON0_Bits.REL */


/** \brief Offset for Ifx_SCU_WDTCPU_CON0_Bits.REL */


/** \brief Length for Ifx_SCU_WDTCPU_CON1_Bits.IR0 */


/** \brief Mask for Ifx_SCU_WDTCPU_CON1_Bits.IR0 */


/** \brief Offset for Ifx_SCU_WDTCPU_CON1_Bits.IR0 */


/** \brief Length for Ifx_SCU_WDTCPU_CON1_Bits.DR */


/** \brief Mask for Ifx_SCU_WDTCPU_CON1_Bits.DR */


/** \brief Offset for Ifx_SCU_WDTCPU_CON1_Bits.DR */


/** \brief Length for Ifx_SCU_WDTCPU_CON1_Bits.IR1 */


/** \brief Mask for Ifx_SCU_WDTCPU_CON1_Bits.IR1 */


/** \brief Offset for Ifx_SCU_WDTCPU_CON1_Bits.IR1 */


/** \brief Length for Ifx_SCU_WDTCPU_CON1_Bits.UR */


/** \brief Mask for Ifx_SCU_WDTCPU_CON1_Bits.UR */


/** \brief Offset for Ifx_SCU_WDTCPU_CON1_Bits.UR */


/** \brief Length for Ifx_SCU_WDTCPU_CON1_Bits.PAR */


/** \brief Mask for Ifx_SCU_WDTCPU_CON1_Bits.PAR */


/** \brief Offset for Ifx_SCU_WDTCPU_CON1_Bits.PAR */


/** \brief Length for Ifx_SCU_WDTCPU_CON1_Bits.TCR */


/** \brief Mask for Ifx_SCU_WDTCPU_CON1_Bits.TCR */


/** \brief Offset for Ifx_SCU_WDTCPU_CON1_Bits.TCR */


/** \brief Length for Ifx_SCU_WDTCPU_CON1_Bits.TCTR */


/** \brief Mask for Ifx_SCU_WDTCPU_CON1_Bits.TCTR */


/** \brief Offset for Ifx_SCU_WDTCPU_CON1_Bits.TCTR */


/** \brief Length for Ifx_SCU_WDTCPU_SR_Bits.AE */


/** \brief Mask for Ifx_SCU_WDTCPU_SR_Bits.AE */


/** \brief Offset for Ifx_SCU_WDTCPU_SR_Bits.AE */


/** \brief Length for Ifx_SCU_WDTCPU_SR_Bits.OE */


/** \brief Mask for Ifx_SCU_WDTCPU_SR_Bits.OE */


/** \brief Offset for Ifx_SCU_WDTCPU_SR_Bits.OE */


/** \brief Length for Ifx_SCU_WDTCPU_SR_Bits.IS0 */


/** \brief Mask for Ifx_SCU_WDTCPU_SR_Bits.IS0 */


/** \brief Offset for Ifx_SCU_WDTCPU_SR_Bits.IS0 */


/** \brief Length for Ifx_SCU_WDTCPU_SR_Bits.DS */


/** \brief Mask for Ifx_SCU_WDTCPU_SR_Bits.DS */


/** \brief Offset for Ifx_SCU_WDTCPU_SR_Bits.DS */


/** \brief Length for Ifx_SCU_WDTCPU_SR_Bits.TO */


/** \brief Mask for Ifx_SCU_WDTCPU_SR_Bits.TO */


/** \brief Offset for Ifx_SCU_WDTCPU_SR_Bits.TO */


/** \brief Length for Ifx_SCU_WDTCPU_SR_Bits.IS1 */


/** \brief Mask for Ifx_SCU_WDTCPU_SR_Bits.IS1 */


/** \brief Offset for Ifx_SCU_WDTCPU_SR_Bits.IS1 */


/** \brief Length for Ifx_SCU_WDTCPU_SR_Bits.US */


/** \brief Mask for Ifx_SCU_WDTCPU_SR_Bits.US */


/** \brief Offset for Ifx_SCU_WDTCPU_SR_Bits.US */


/** \brief Length for Ifx_SCU_WDTCPU_SR_Bits.PAS */


/** \brief Mask for Ifx_SCU_WDTCPU_SR_Bits.PAS */


/** \brief Offset for Ifx_SCU_WDTCPU_SR_Bits.PAS */


/** \brief Length for Ifx_SCU_WDTCPU_SR_Bits.TCS */


/** \brief Mask for Ifx_SCU_WDTCPU_SR_Bits.TCS */


/** \brief Offset for Ifx_SCU_WDTCPU_SR_Bits.TCS */


/** \brief Length for Ifx_SCU_WDTCPU_SR_Bits.TCT */


/** \brief Mask for Ifx_SCU_WDTCPU_SR_Bits.TCT */


/** \brief Offset for Ifx_SCU_WDTCPU_SR_Bits.TCT */


/** \brief Length for Ifx_SCU_WDTCPU_SR_Bits.TIM */


/** \brief Mask for Ifx_SCU_WDTCPU_SR_Bits.TIM */


/** \brief Offset for Ifx_SCU_WDTCPU_SR_Bits.TIM */


/** \brief Length for Ifx_SCU_EICON0_Bits.ENDINIT */


/** \brief Mask for Ifx_SCU_EICON0_Bits.ENDINIT */


/** \brief Offset for Ifx_SCU_EICON0_Bits.ENDINIT */


/** \brief Length for Ifx_SCU_EICON0_Bits.EPW */


/** \brief Mask for Ifx_SCU_EICON0_Bits.EPW */


/** \brief Offset for Ifx_SCU_EICON0_Bits.EPW */


/** \brief Length for Ifx_SCU_EICON0_Bits.REL */


/** \brief Mask for Ifx_SCU_EICON0_Bits.REL */


/** \brief Offset for Ifx_SCU_EICON0_Bits.REL */


/** \brief Length for Ifx_SCU_EICON1_Bits.IR0 */


/** \brief Mask for Ifx_SCU_EICON1_Bits.IR0 */


/** \brief Offset for Ifx_SCU_EICON1_Bits.IR0 */


/** \brief Length for Ifx_SCU_EICON1_Bits.DR */


/** \brief Mask for Ifx_SCU_EICON1_Bits.DR */


/** \brief Offset for Ifx_SCU_EICON1_Bits.DR */


/** \brief Length for Ifx_SCU_EICON1_Bits.IR1 */


/** \brief Mask for Ifx_SCU_EICON1_Bits.IR1 */


/** \brief Offset for Ifx_SCU_EICON1_Bits.IR1 */


/** \brief Length for Ifx_SCU_EISR_Bits.AE */


/** \brief Mask for Ifx_SCU_EISR_Bits.AE */


/** \brief Offset for Ifx_SCU_EISR_Bits.AE */


/** \brief Length for Ifx_SCU_EISR_Bits.OE */


/** \brief Mask for Ifx_SCU_EISR_Bits.OE */


/** \brief Offset for Ifx_SCU_EISR_Bits.OE */


/** \brief Length for Ifx_SCU_EISR_Bits.IS0 */


/** \brief Mask for Ifx_SCU_EISR_Bits.IS0 */


/** \brief Offset for Ifx_SCU_EISR_Bits.IS0 */


/** \brief Length for Ifx_SCU_EISR_Bits.DS */


/** \brief Mask for Ifx_SCU_EISR_Bits.DS */


/** \brief Offset for Ifx_SCU_EISR_Bits.DS */


/** \brief Length for Ifx_SCU_EISR_Bits.TO */


/** \brief Mask for Ifx_SCU_EISR_Bits.TO */


/** \brief Offset for Ifx_SCU_EISR_Bits.TO */


/** \brief Length for Ifx_SCU_EISR_Bits.IS1 */


/** \brief Mask for Ifx_SCU_EISR_Bits.IS1 */


/** \brief Offset for Ifx_SCU_EISR_Bits.IS1 */


/** \brief Length for Ifx_SCU_EISR_Bits.TIM */


/** \brief Mask for Ifx_SCU_EISR_Bits.TIM */


/** \brief Offset for Ifx_SCU_EISR_Bits.TIM */


/** \brief Length for Ifx_SCU_WDTS_CON0_Bits.ENDINIT */


/** \brief Mask for Ifx_SCU_WDTS_CON0_Bits.ENDINIT */


/** \brief Offset for Ifx_SCU_WDTS_CON0_Bits.ENDINIT */


/** \brief Length for Ifx_SCU_WDTS_CON0_Bits.LCK */


/** \brief Mask for Ifx_SCU_WDTS_CON0_Bits.LCK */


/** \brief Offset for Ifx_SCU_WDTS_CON0_Bits.LCK */


/** \brief Length for Ifx_SCU_WDTS_CON0_Bits.PW */


/** \brief Mask for Ifx_SCU_WDTS_CON0_Bits.PW */


/** \brief Offset for Ifx_SCU_WDTS_CON0_Bits.PW */


/** \brief Length for Ifx_SCU_WDTS_CON0_Bits.REL */


/** \brief Mask for Ifx_SCU_WDTS_CON0_Bits.REL */


/** \brief Offset for Ifx_SCU_WDTS_CON0_Bits.REL */


/** \brief Length for Ifx_SCU_WDTS_CON1_Bits.CLRIRF */


/** \brief Mask for Ifx_SCU_WDTS_CON1_Bits.CLRIRF */


/** \brief Offset for Ifx_SCU_WDTS_CON1_Bits.CLRIRF */


/** \brief Length for Ifx_SCU_WDTS_CON1_Bits.IR0 */


/** \brief Mask for Ifx_SCU_WDTS_CON1_Bits.IR0 */


/** \brief Offset for Ifx_SCU_WDTS_CON1_Bits.IR0 */


/** \brief Length for Ifx_SCU_WDTS_CON1_Bits.DR */


/** \brief Mask for Ifx_SCU_WDTS_CON1_Bits.DR */


/** \brief Offset for Ifx_SCU_WDTS_CON1_Bits.DR */


/** \brief Length for Ifx_SCU_WDTS_CON1_Bits.IR1 */


/** \brief Mask for Ifx_SCU_WDTS_CON1_Bits.IR1 */


/** \brief Offset for Ifx_SCU_WDTS_CON1_Bits.IR1 */


/** \brief Length for Ifx_SCU_WDTS_CON1_Bits.UR */


/** \brief Mask for Ifx_SCU_WDTS_CON1_Bits.UR */


/** \brief Offset for Ifx_SCU_WDTS_CON1_Bits.UR */


/** \brief Length for Ifx_SCU_WDTS_CON1_Bits.PAR */


/** \brief Mask for Ifx_SCU_WDTS_CON1_Bits.PAR */


/** \brief Offset for Ifx_SCU_WDTS_CON1_Bits.PAR */


/** \brief Length for Ifx_SCU_WDTS_CON1_Bits.TCR */


/** \brief Mask for Ifx_SCU_WDTS_CON1_Bits.TCR */


/** \brief Offset for Ifx_SCU_WDTS_CON1_Bits.TCR */


/** \brief Length for Ifx_SCU_WDTS_CON1_Bits.TCTR */


/** \brief Mask for Ifx_SCU_WDTS_CON1_Bits.TCTR */


/** \brief Offset for Ifx_SCU_WDTS_CON1_Bits.TCTR */


/** \brief Length for Ifx_SCU_WDTS_SR_Bits.AE */


/** \brief Mask for Ifx_SCU_WDTS_SR_Bits.AE */


/** \brief Offset for Ifx_SCU_WDTS_SR_Bits.AE */


/** \brief Length for Ifx_SCU_WDTS_SR_Bits.OE */


/** \brief Mask for Ifx_SCU_WDTS_SR_Bits.OE */


/** \brief Offset for Ifx_SCU_WDTS_SR_Bits.OE */


/** \brief Length for Ifx_SCU_WDTS_SR_Bits.IS0 */


/** \brief Mask for Ifx_SCU_WDTS_SR_Bits.IS0 */


/** \brief Offset for Ifx_SCU_WDTS_SR_Bits.IS0 */


/** \brief Length for Ifx_SCU_WDTS_SR_Bits.DS */


/** \brief Mask for Ifx_SCU_WDTS_SR_Bits.DS */


/** \brief Offset for Ifx_SCU_WDTS_SR_Bits.DS */


/** \brief Length for Ifx_SCU_WDTS_SR_Bits.TO */


/** \brief Mask for Ifx_SCU_WDTS_SR_Bits.TO */


/** \brief Offset for Ifx_SCU_WDTS_SR_Bits.TO */


/** \brief Length for Ifx_SCU_WDTS_SR_Bits.IS1 */


/** \brief Mask for Ifx_SCU_WDTS_SR_Bits.IS1 */


/** \brief Offset for Ifx_SCU_WDTS_SR_Bits.IS1 */


/** \brief Length for Ifx_SCU_WDTS_SR_Bits.US */


/** \brief Mask for Ifx_SCU_WDTS_SR_Bits.US */


/** \brief Offset for Ifx_SCU_WDTS_SR_Bits.US */


/** \brief Length for Ifx_SCU_WDTS_SR_Bits.PAS */


/** \brief Mask for Ifx_SCU_WDTS_SR_Bits.PAS */


/** \brief Offset for Ifx_SCU_WDTS_SR_Bits.PAS */


/** \brief Length for Ifx_SCU_WDTS_SR_Bits.TCS */


/** \brief Mask for Ifx_SCU_WDTS_SR_Bits.TCS */


/** \brief Offset for Ifx_SCU_WDTS_SR_Bits.TCS */


/** \brief Length for Ifx_SCU_WDTS_SR_Bits.TCT */


/** \brief Mask for Ifx_SCU_WDTS_SR_Bits.TCT */


/** \brief Offset for Ifx_SCU_WDTS_SR_Bits.TCT */


/** \brief Length for Ifx_SCU_WDTS_SR_Bits.TIM */


/** \brief Mask for Ifx_SCU_WDTS_SR_Bits.TIM */


/** \brief Offset for Ifx_SCU_WDTS_SR_Bits.TIM */


/** \brief Length for Ifx_SCU_SEICON0_Bits.ENDINIT */


/** \brief Mask for Ifx_SCU_SEICON0_Bits.ENDINIT */


/** \brief Offset for Ifx_SCU_SEICON0_Bits.ENDINIT */


/** \brief Length for Ifx_SCU_SEICON0_Bits.EPW */


/** \brief Mask for Ifx_SCU_SEICON0_Bits.EPW */


/** \brief Offset for Ifx_SCU_SEICON0_Bits.EPW */


/** \brief Length for Ifx_SCU_SEICON0_Bits.REL */


/** \brief Mask for Ifx_SCU_SEICON0_Bits.REL */


/** \brief Offset for Ifx_SCU_SEICON0_Bits.REL */


/** \brief Length for Ifx_SCU_SEICON1_Bits.IR0 */


/** \brief Mask for Ifx_SCU_SEICON1_Bits.IR0 */


/** \brief Offset for Ifx_SCU_SEICON1_Bits.IR0 */


/** \brief Length for Ifx_SCU_SEICON1_Bits.DR */


/** \brief Mask for Ifx_SCU_SEICON1_Bits.DR */


/** \brief Offset for Ifx_SCU_SEICON1_Bits.DR */


/** \brief Length for Ifx_SCU_SEICON1_Bits.IR1 */


/** \brief Mask for Ifx_SCU_SEICON1_Bits.IR1 */


/** \brief Offset for Ifx_SCU_SEICON1_Bits.IR1 */


/** \brief Length for Ifx_SCU_SEISR_Bits.AE */


/** \brief Mask for Ifx_SCU_SEISR_Bits.AE */


/** \brief Offset for Ifx_SCU_SEISR_Bits.AE */


/** \brief Length for Ifx_SCU_SEISR_Bits.OE */


/** \brief Mask for Ifx_SCU_SEISR_Bits.OE */


/** \brief Offset for Ifx_SCU_SEISR_Bits.OE */


/** \brief Length for Ifx_SCU_SEISR_Bits.IS0 */


/** \brief Mask for Ifx_SCU_SEISR_Bits.IS0 */


/** \brief Offset for Ifx_SCU_SEISR_Bits.IS0 */


/** \brief Length for Ifx_SCU_SEISR_Bits.DS */


/** \brief Mask for Ifx_SCU_SEISR_Bits.DS */


/** \brief Offset for Ifx_SCU_SEISR_Bits.DS */


/** \brief Length for Ifx_SCU_SEISR_Bits.TO */


/** \brief Mask for Ifx_SCU_SEISR_Bits.TO */


/** \brief Offset for Ifx_SCU_SEISR_Bits.TO */


/** \brief Length for Ifx_SCU_SEISR_Bits.IS1 */


/** \brief Mask for Ifx_SCU_SEISR_Bits.IS1 */


/** \brief Offset for Ifx_SCU_SEISR_Bits.IS1 */


/** \brief Length for Ifx_SCU_SEISR_Bits.TIM */


/** \brief Mask for Ifx_SCU_SEISR_Bits.TIM */


/** \brief Offset for Ifx_SCU_SEISR_Bits.TIM */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN0 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN0 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN0 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN1 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN1 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN1 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN2 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN2 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN2 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN3 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN3 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN3 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN4 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN4 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN4 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN5 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN5 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN5 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN6 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN6 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN6 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN7 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN7 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN7 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN8 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN8 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN8 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN9 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN9 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN9 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN10 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN10 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN10 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN11 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN11 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN11 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN12 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN12 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN12 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN13 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN13 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN13 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN14 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN14 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN14 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN15 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN15 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN15 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN16 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN16 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN16 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN17 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN17 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN17 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN18 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN18 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN18 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN19 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN19 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN19 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN20 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN20 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN20 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN21 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN21 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN21 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN22 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN22 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN22 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN23 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN23 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN23 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN24 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN24 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN24 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN25 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN25 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN25 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN26 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN26 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN26 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN27 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN27 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN27 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN28 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN28 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN28 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN29 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN29 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN29 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN30 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN30 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN30 */


/** \brief Length for Ifx_SCU_ACCEN10_Bits.EN31 */


/** \brief Mask for Ifx_SCU_ACCEN10_Bits.EN31 */


/** \brief Offset for Ifx_SCU_ACCEN10_Bits.EN31 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN0 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN0 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN0 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN1 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN1 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN1 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN2 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN2 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN2 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN3 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN3 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN3 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN4 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN4 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN4 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN5 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN5 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN5 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN6 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN6 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN6 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN7 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN7 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN7 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN8 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN8 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN8 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN9 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN9 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN9 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN10 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN10 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN10 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN11 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN11 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN11 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN12 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN12 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN12 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN13 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN13 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN13 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN14 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN14 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN14 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN15 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN15 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN15 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN16 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN16 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN16 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN17 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN17 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN17 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN18 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN18 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN18 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN19 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN19 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN19 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN20 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN20 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN20 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN21 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN21 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN21 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN22 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN22 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN22 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN23 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN23 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN23 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN24 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN24 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN24 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN25 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN25 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN25 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN26 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN26 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN26 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN27 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN27 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN27 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN28 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN28 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN28 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN29 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN29 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN29 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN30 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN30 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN30 */


/** \brief Length for Ifx_SCU_ACCEN00_Bits.EN31 */


/** \brief Mask for Ifx_SCU_ACCEN00_Bits.EN31 */


/** \brief Offset for Ifx_SCU_ACCEN00_Bits.EN31 */


/** \}  */

/******************************************************************************/

/******************************************************************************/


#line 54 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\_Impl\\IfxScu_cfg.h"

/******************************************************************************/
/*                           Macro                                            */
/******************************************************************************/

























/*The following frequency is the PLL free running frequency */




/* By Default - external crystal is chosen as input */
/* This can be set to external clock input by user */





/* iLLD Configs from Master CFG file */
/*Utility macros for the configuration structure */





























/******************************************************************************/
/*                           Per PLL Config                                   */
/******************************************************************************/



















/***************************************************************************************************/
/*************************MACROS To Configure SYSPLL Steps******************************************/
/* These Macros are used to Configure different profiles of frequency jump from FOsc to Target Freq*/
/* This is Important for the current jump Control during Clock Throttling                          */
/***************************************************************************************************/



































































/***************************************************************************************************/
/*********************** SYSPLL CONFIGURATIONS *****************************************************/
/***************************************************************************************************/

/*******************************16MHz Oscillator Frequency******************************************/


/************** Target = 80MHz *****************/

 
/**** Macro for Initial Pll step, for profile with 16MHz Crystal and 80MHz target (fDCO= 640)*/










/**** Macro for Pll step for profile with 16MHz Crystal and 80MHz target (fDCO= 640MHz)*/



/************** Target = 133MHz *****************/

 
/**** Macro for Initial Pll step, for profile with 16MHz Crystal and 133MHz target (fDCO= 800)*/










/**** Macro for Pll step for profile with 16MHz Crystal and 133MHz target (fDCO= 800MHz)*/



/************** Target = 240MHz *****************/

 
/**** Macro for Initial Pll step, for profile with 16MHz Crystal and 240MHz target (fDCO= 720)*/










/**** Macro for Pll step for profile with 16MHz Crystal and 240MHz target (fDCO= 720MHz)*/



/************** Target = 300MHz *****************/

 
/**** Macro for Initial Pll step, for profile with 16MHz Crystal and 300MHz target (fDCO= 600)*/










/**** Macro for Pll step for profile with 16MHz Crystal and 300MHz target (fDCO= 600MHz)*/



/*******************************20MHz Oscillator Frequency******************************************/


/************** Target = 200MHz *****************/

 
/**** Macro for Initial Pll step, for profile with 20MHz Crystal and 200MHz target (fDCO= 600)*/










/**** Macro for Pll step for profile with 20MHz Crystal and 200MHz target (fDCO= 600MHz)*/



/************** Target = 240MHz *****************/

 
/**** Macro for Initial Pll step, for profile with 20MHz Crystal and 240MHz target (fDCO= 720)*/










/**** Macro for Pll step for profile with 20MHz Crystal and 240MHz target (fDCO= 720MHz)*/



/************** Target = 300MHz *****************/

 
/**** Macro for Initial Pll step, for profile with 20MHz Crystal and 300MHz target (fDCO= 600)*/










/**** Macro for Pll step for profile with 20MHz Crystal and 300MHz target (fDCO= 600MHz)*/



/*******************************25MHz Oscillator Frequency******************************************/


/************** Target = 200MHz *****************/

 
/**** Macro for Initial Pll step, for profile with 25MHz Crystal and 200MHz target (fDCO= 600)*/










/**** Macro for Pll step for profile with 25MHz Crystal and 200MHz target (fDCO= 600MHz)*/



/************** Target = 300MHz *****************/

 
/**** Macro for Initial Pll step, for profile with 25MHz Crystal and 300MHz target (fDCO= 600)*/










/**** Macro for Pll step for profile with 25MHz Crystal and 300MHz target (fDCO= 600MHz)*/



/*******************************40MHz Oscillator Frequency******************************************/


/************** Target = 200MHz *****************/

 
/**** Macro for Initial Pll step, for profile with 40MHz Crystal and 200MHz target (fDCO= 600)*/










/**** Macro for Pll step for profile with 40MHz Crystal and 200MHz target (fDCO= 600MHz)*/



/************** Target = 240MHz *****************/

 
/**** Macro for Initial Pll step, for profile with 40MHz Crystal and 240MHz target (fDCO= 720)*/










/**** Macro for Pll step for profile with 40MHz Crystal and 240MHz target (fDCO= 720MHz)*/



/************** Target = 300MHz *****************/

 
/**** Macro for Initial Pll step, for profile with 40MHz Crystal and 300MHz target (fDCO= 600)*/










/**** Macro for Pll step for profile with 40MHz Crystal and 300MHz target (fDCO= 600MHz)*/



/***************************************************************************************************/
/*********************** PERPLL CONFIGURATIONS *****************************************************/
/***************************************************************************************************/

/*******************************16MHz Oscillator Frequency******************************************/


/************** Fpll1 = 320MHz, Fpll2 = 200MHz *****************/


/** \brief Macro for Initial Pll step, for profile with 16MHz Crystal and 320/200MHz target (fDCO= 640)*/





/************** Fpll1 = 160MHz, Fpll2 = 200MHz *****************/


/** \brief Macro for Initial Pll step, for profile with 16MHz Crystal and 160/200MHz target (fDCO= 640)*/





/*******************************20MHz Oscillator Frequency******************************************/


/************** Fpll1 = 320MHz, Fpll2 = 200MHz *****************/


/** \brief Macro for Initial Pll step, for profile with 20MHz Crystal and 320/200MHz target (fDCO= 640)*/





/************** Fpll1 = 160MHz, Fpll2 = 200MHz *****************/


/** \brief Macro for Initial Pll step, for profile with 20MHz Crystal and 160/200MHz target (fDCO= 640)*/





/*******************************25MHz Oscillator Frequency******************************************/


/************** Fpll1 = 160MHz, Fpll2 = 200MHz *****************/


/** \brief Macro for Initial Pll step, for profile with 25MHz Crystal and 160/200MHz target (fDCO= 800)*/





/*******************************40MHz Oscillator Frequency******************************************/


/************** Fpll1 = 320MHz, Fpll2 = 200MHz *****************/


/** \brief Macro for Initial Pll step, for profile with 40MHz Crystal and 320/200MHz target (fDCO= 640)*/





/************** Fpll1 = 160MHz, Fpll2 = 200MHz *****************/


/** \brief Macro for Initial Pll step, for profile with 40MHz Crystal and 160/200MHz target (fDCO= 640)*/





/***************************** Final Macro Setting for PLL ****************************************/




/****************** initial step configuration definitions ******************************/
/*macro for sys pll initial step configuration */




/*macro for per pll initial step configuration */




/*macro for wait at initial step configuration */




/*macro for sys pll initial step configuration */











/***************************************************************************************************/
/*********************** DIVIDER CONFIGURATIONS ****************************************************/
/***************************************************************************************************/

/**************** DIVIDERS DEPENDING ON FSource0 (Fpll0) *******************************************/

/**************** Fsource = Fpll0 = 80MHz **********************************************************/

/************** CCUCON0 : STMDIV  (Output : fSTM)**************/
/* Target = 80 MHz AND Source = Fsource0 */




/************** CCUCON0 : GTMDIV  (Output : fGTM)**************/
/* Target = 80 MHz AND Source = Fsource0 */




/************** CCUCON0 : SRIDIV  (Output : fSRI)**************/
/* Target = 80 MHz AND Source = Fsource0 */




/************** CCUCON0 : SPBDIV  (Output : fSPB)**************/
/* Target = 40 MHz AND Source = Fsource0 */




/************** CCUCON0 : BBBDIV  (Output : fBBB)**************/
/* Target = 40 MHz AND Source = Fsource0 */




/************** CCUCON0 : FSIDIV  (Output : fFSI)**************/
/* Target = 80 MHz AND Source = Fsri */




/************** CCUCON0 : FSI2DIV  (Output : fFSI2)**************/
/* Target = 80 MHz AND Source = Fsri */




/************** CCUCON5 : GETHDIV  (Output : fGETH)**************/
/* Target = 80 MHz AND Source = Fsource0 */




/************** CCUCON5 : MCANHDIV  (Output : fMCANH)**************/
/* Target = 40 MHz AND Source = Fsource0 */




/************** CCUCON6 : CPU0DIV  (Output : fCPU0)**************/
/* Target = 80 MHz AND Source = Fsri */




/************** CCUCON7 : CPU1DIV  (Output : fCPU1)**************/
/* Target = 80 MHz AND Source = Fsri */




/************** CCUCON8 : CPU2DIV  (Output : fCPU2)**************/
/* Target = 80 MHz AND Source = Fsri */




/************** CCUCON9 : CPU3DIV  (Output : fCPU3)**************/
/* Target = 80 MHz AND Source = Fsri */




/**************** Fsource = Fpll0 = 133MHz **********************************************************/

/************** CCUCON0 : STMDIV  (Output : fSTM)**************/
/* Target = 66.5 MHz AND Source = Fsource0 */




/************** CCUCON0 : GTMDIV  (Output : fGTM)**************/
/* Target = 133 MHz AND Source = Fsource0 */




/************** CCUCON0 : SRIDIV  (Output : fSRI)**************/
/* Target = 133 MHz AND Source = Fsource0 */




/************** CCUCON0 : SPBDIV  (Output : fSPB)**************/
/* Target = 66.5 MHz AND Source = Fsource0 */




/************** CCUCON0 : BBBDIV  (Output : fBBB)**************/
/* Target = 66.5 MHz AND Source = Fsource0 */




/************** CCUCON0 : FSIDIV  (Output : fFSI)**************/
/* Target = 66.5 MHz AND Source = Fsri */




/************** CCUCON0 : FSI2DIV  (Output : fFSI2)**************/
/* Target = 133 MHz AND Source = Fsri */




/************** CCUCON5 : GETHDIV  (Output : fGETH)**************/
/* Target = 133 MHz AND Source = Fsource0 */




/************** CCUCON5 : MCANHDIV  (Output : fMCANH)**************/
/* Target = 66.5 MHz AND Source = Fsource0 */




/************** CCUCON6 : CPU0DIV  (Output : fCPU0)**************/
/* Target = 133 MHz AND Source = Fsri */




/************** CCUCON7 : CPU1DIV  (Output : fCPU1)**************/
/* Target = 133 MHz AND Source = Fsri */




/************** CCUCON8 : CPU2DIV  (Output : fCPU2)**************/
/* Target = 133 MHz AND Source = Fsri */




/************** CCUCON9 : CPU3DIV  (Output : fCPU3)**************/
/* Target = 133 MHz AND Source = Fsri */




/**************** Fsource = Fpll0 = 200MHz **********************************************************/

/************** CCUCON0 : STMDIV  (Output : fSTM)**************/
/* Target = 100 MHz AND Source = Fsource0 */




/************** CCUCON0 : GTMDIV  (Output : fGTM)**************/
/* Target = 200 MHz AND Source = Fsource0 */




/************** CCUCON0 : SRIDIV  (Output : fSRI)**************/
/* Target = 200 MHz AND Source = Fsource0 */




/************** CCUCON0 : SPBDIV  (Output : fSPB)**************/
/* Target = 100 MHz AND Source = Fsource0 */




/************** CCUCON0 : BBBDIV  (Output : fBBB)**************/
/* Target = 100 MHz AND Source = Fsource0 */




/************** CCUCON0 : FSIDIV  (Output : fFSI)**************/
/* Target = 100 MHz AND Source = Fsri */




/************** CCUCON0 : FSI2DIV  (Output : fFSI2)**************/
/* Target = 200 MHz AND Source = Fsri */




/************** CCUCON5 : GETHDIV  (Output : fGETH)**************/
/* Target = 200 MHz AND Source = Fsource0 */




/************** CCUCON5 : MCANHDIV  (Output : fMCANH)**************/
/* Target = 100 MHz AND Source = Fsource0 */




/************** CCUCON6 : CPU0DIV  (Output : fCPU0)**************/
/* Target = 200 MHz AND Source = Fsri */




/************** CCUCON7 : CPU1DIV  (Output : fCPU1)**************/
/* Target = 200 MHz AND Source = Fsri */




/************** CCUCON8 : CPU2DIV  (Output : fCPU2)**************/
/* Target = 200 MHz AND Source = Fsri */




/************** CCUCON9 : CPU3DIV  (Output : fCPU3)**************/
/* Target = 200 MHz AND Source = Fsri */




/**************** Fsource = Fpll0 = 240MHz **********************************************************/

/************** CCUCON0 : STMDIV  (Output : fSTM)**************/
/* Target = 80 MHz AND Source = Fsource0 */




/************** CCUCON0 : GTMDIV  (Output : fGTM)**************/
/* Target = 200 MHz AND Source = Fsource0 */




/************** CCUCON0 : SRIDIV  (Output : fSRI)**************/
/* Target = 240 MHz AND Source = Fsource0 */




/************** CCUCON0 : SPBDIV  (Output : fSPB)**************/
/* Target = 80 MHz AND Source = Fsource0 */




/************** CCUCON0 : BBBDIV  (Output : fBBB)**************/
/* Target = 120 MHz AND Source = Fsource0 */




/************** CCUCON0 : FSIDIV  (Output : fFSI)**************/
/* Target = 80 MHz AND Source = Fsri */




/************** CCUCON0 : FSI2DIV  (Output : fFSI2)**************/
/* Target = 240 MHz AND Source = Fsri */




/************** CCUCON5 : GETHDIV  (Output : fGETH)**************/
/* Target = 120 MHz AND Source = Fsource0 */




/************** CCUCON5 : MCANHDIV  (Output : fMCANH)**************/
/* Target = 80 MHz AND Source = Fsource0 */




/************** CCUCON6 : CPU0DIV  (Output : fCPU0)**************/
/* Target = 240 MHz AND Source = Fsri */




/************** CCUCON7 : CPU1DIV  (Output : fCPU1)**************/
/* Target = 240 MHz AND Source = Fsri */




/************** CCUCON8 : CPU2DIV  (Output : fCPU2)**************/
/* Target = 240 MHz AND Source = Fsri */




/************** CCUCON9 : CPU3DIV  (Output : fCPU3)**************/
/* Target = 240 MHz AND Source = Fsri */




/**************** Fsource = Fpll0 = 300MHz **********************************************************/

/************** CCUCON0 : STMDIV  (Output : fSTM)**************/
/* Target = 100 MHz AND Source = Fsource0 */




/************** CCUCON0 : GTMDIV  (Output : fGTM)**************/
/* Target = 200 MHz AND Source = Fsource0 */




/************** CCUCON0 : SRIDIV  (Output : fSRI)**************/
/* Target = 300 MHz AND Source = Fsource0 */




/************** CCUCON0 : SPBDIV  (Output : fSPB)**************/
/* Target = 100 MHz AND Source = Fsource0 */




/************** CCUCON0 : BBBDIV  (Output : fBBB)**************/
/* Target = 150 MHz AND Source = Fsource0 */




/************** CCUCON0 : FSIDIV  (Output : fFSI)**************/
/* Target = 100 MHz AND Source = Fsri */




/************** CCUCON0 : FSI2DIV  (Output : fFSI2)**************/
/* Target = 300 MHz AND Source = Fsri */




/************** CCUCON5 : GETHDIV  (Output : fGETH)**************/
/* Target = 150 MHz AND Source = Fsource0 */




/************** CCUCON5 : MCANHDIV  (Output : fMCANH)**************/
/* Target = 100 MHz AND Source = Fsource0 */




/************** CCUCON6 : CPU0DIV  (Output : fCPU0)**************/
/* Target = 300 MHz AND Source = Fsri */




/************** CCUCON7 : CPU1DIV  (Output : fCPU1)**************/
/* Target = 300 MHz AND Source = Fsri */




/************** CCUCON8 : CPU2DIV  (Output : fCPU2)**************/
/* Target = 300 MHz AND Source = Fsri */




/************** CCUCON9 : CPU3DIV  (Output : fCPU3)**************/
/* Target = 300 MHz AND Source = Fsri */




/**************** DIVIDERS DEPENDING ON FSource1,2 (Fpll1_Fpll2) ***********************************/

/**************** Fpll1 = 320MHz, Fpll2 = 200MHz ***************************************************/

/************** CCUCON1 : MCANDIV  (Output : fMCAN)**************/
/* Target = 80 MHz AND Source = Fsource1 */




/************** CCUCON1 : CLKSELMCAN  (Output : fMCANI)**************/
/* Target = Fmcani MHz AND Source = Fmcani/Fosc0 */




/************** CCUCON1 : PLL1DIVDIS  (Output : fsource1)**************/
/* Target = Fpll1by2 MHz AND Source = Fpll1 */




/************** CCUCON1 : I2CDIV  (Output : fI2C)**************/
/* Target = 100 MHz AND Source = Fsource2 */




/************** CCUCON1 : MSCDIV  (Output : fMSC)**************/
/* Target = 160 MHz AND Source = Fsource2 */




/************** CCUCON1 : CLKSELMSC  (Output : fSOURCEMSC)**************/
/* Target = Fsource1 MHz AND Source = Fsource1/Fsource2 */




/************** CCUCON1 : QSPIDIV  (Output : fQSPI)**************/
/* Target = 200 MHz AND Source = Fsource2 */




/************** CCUCON1 : CLKSELQSPI  (Output : fSOURCESPI)**************/
/* Target = Fsource2 MHz AND Source = Fsource1/Fsource2 */




/************** CCUCON2 : ASCLINFDIV  (Output : fASCLINF)**************/
/* Target = 200 MHz AND Source = Fsource2 */




/************** CCUCON2 : ASCLINSDIV  (Output : fASCLINSI)**************/
/* Target = 80 MHz AND Source = Fsource1 */




/************** CCUCON2 : CLKSELASCLINS  (Output : fASCLINS)**************/
/* Target = Fasclinsi MHz AND Source = Fasclinsi/Fosc0 */




/**************** Fpll1 = 160MHz, Fpll2 = 200MHz ***************************************************/

/************** CCUCON1 : MCANDIV  (Output : fMCAN)**************/
/* Target = 80 MHz AND Source = Fsource1 */




/************** CCUCON1 : CLKSELMCAN  (Output : fMCANI)**************/
/* Target = Fmcani MHz AND Source = Fmcani/Fosc0 */




/************** CCUCON1 : PLL1DIVDIS  (Output : fsource1)**************/
/* Target = Fpll1by2 MHz AND Source = Fpll1 */




/************** CCUCON1 : I2CDIV  (Output : fI2C)**************/
/* Target = 100 MHz AND Source = Fsource2 */




/************** CCUCON1 : MSCDIV  (Output : fMSC)**************/
/* Target = 80 MHz AND Source = Fsource2 */




/************** CCUCON1 : CLKSELMSC  (Output : fSOURCEMSC)**************/
/* Target = Fsource1 MHz AND Source = Fsource1/Fsource2 */




/************** CCUCON1 : QSPIDIV  (Output : fQSPI)**************/
/* Target = 200 MHz AND Source = Fsource2 */




/************** CCUCON1 : CLKSELQSPI  (Output : fSOURCESPI)**************/
/* Target = Fsource2 MHz AND Source = Fsource1/Fsource2 */




/************** CCUCON2 : ASCLINFDIV  (Output : fASCLINF)**************/
/* Target = 200 MHz AND Source = Fsource2 */




/************** CCUCON2 : ASCLINSDIV  (Output : fASCLINSI)**************/
/* Target = 80 MHz AND Source = Fsource1 */




/************** CCUCON2 : CLKSELASCLINS  (Output : fASCLINS)**************/
/* Target = Fasclinsi MHz AND Source = Fasclinsi/Fosc0 */




/***************************************************************************************************/
/*********************** REGISTER DEFAULT VALUES ***************************************************/
/***************************************************************************************************/

/************************** CCUCON0 **************************/
























/************************** CCUCON1 **************************/


























/************************** CCUCON2 **************************/
















/************************** CCUCON5 **************************/














/************************** CCUCON6 **************************/












/************************** CCUCON7 **************************/












/************************** CCUCON8 **************************/












/************************** CCUCON9 **************************/












/**************** Final Clock Distribution ******************/














/** \brief Macros to configure FLASH.FCON registers */












/******************************************************************************/
/*---------------------------LBIST Config Macros------------------------------*/
/******************************************************************************/
































/******************************************************************************/
/*                           Enum                                             */
/******************************************************************************/
/** Clock selection  */
typedef enum
{
    IfxScu_CCUCON0_CLKSEL_fBack = 0,
    IfxScu_CCUCON0_CLKSEL_fPll  = 1
} IfxScu_CCUCON0_CLKSEL;

/** Input frequency request control */
typedef enum
{
    IfxScu_WDTCON1_IR_divBy16384 = 0,
    IfxScu_WDTCON1_IR_divBy256   = 1,
    IfxScu_WDTCON1_IR_divBy64    = 2
} IfxScu_WDTCON1_IR;

typedef enum
{
    IfxScu_PMCSR_REQSLP_Run   = 0U, /* 00 Request CPU Run Mode */
    IfxScu_PMCSR_REQSLP_Idle  = 1U, /* 01 Request CPU Idle Mode */
    IfxScu_PMCSR_REQSLP_Sleep = 2U, /* 10 Request CPU System Sleep Mode */
    IfxScu_PMCSR_REQSLP_Stby  = 3U  /* 11 Request System Standby Mode */
} IfxScu_PMCSR_REQSLP;

/******************************************************************************/


#line 64 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Scu\\Std\\IfxScuWdt.h"

#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Ifx_Types.h"
/**
 * \file Ifx_Types.h
 * \brief This files defines all types used by the IFX HAL and libraries
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
























































































































































































#line 65 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Scu\\Std\\IfxScuWdt.h"

#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Infra\\Sfr\\TC38A\\_Reg\\IfxScu_reg.h"
/**
 * \file IfxScu_reg.h
 * \brief
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: TC38XA_UM_V1.5.0
 * Specification: TC3xx User Manual V1.5.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Scu_Registers_Cfg Scu address
 * \ingroup IfxSfr_Scu_Registers
 * 
 * \defgroup IfxSfr_Scu_Registers_Cfg_BaseAddress Base address
 * \ingroup IfxSfr_Scu_Registers_Cfg
 *
 * \defgroup IfxSfr_Scu_Registers_Cfg_Scu 2-SCU
 * \ingroup IfxSfr_Scu_Registers_Cfg
 *
 *
 */


/******************************************************************************/

#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Infra\\Sfr\\TC38A\\_Reg\\IfxScu_regdef.h"
/**
 * \file IfxScu_regdef.h
 * \brief
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: TC38XA_UM_V1.5.0
 * Specification: TC3xx User Manual V1.5.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Scu_Registers Scu Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Scu_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Scu_Registers
 * 
 * \defgroup IfxSfr_Scu_Registers_union Register unions
 * \ingroup IfxSfr_Scu_Registers
 * 
 * \defgroup IfxSfr_Scu_Registers_struct Memory map
 * \ingroup IfxSfr_Scu_Registers
 */


/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Scu_Registers_Bitfields
 * \{  */
/** \brief Access Enable Register 00 */
typedef struct _Ifx_SCU_ACCEN00_Bits
{
    Ifx_UReg_32Bit EN0:1;             /**< \brief [0:0] Access Enable for Master TAG ID 0 - EN0 (rw) */
    Ifx_UReg_32Bit EN1:1;             /**< \brief [1:1] Access Enable for Master TAG ID 1 - EN1 (rw) */
    Ifx_UReg_32Bit EN2:1;             /**< \brief [2:2] Access Enable for Master TAG ID 2 - EN2 (rw) */
    Ifx_UReg_32Bit EN3:1;             /**< \brief [3:3] Access Enable for Master TAG ID 3 - EN3 (rw) */
    Ifx_UReg_32Bit EN4:1;             /**< \brief [4:4] Access Enable for Master TAG ID 4 - EN4 (rw) */
    Ifx_UReg_32Bit EN5:1;             /**< \brief [5:5] Access Enable for Master TAG ID 5 - EN5 (rw) */
    Ifx_UReg_32Bit EN6:1;             /**< \brief [6:6] Access Enable for Master TAG ID 6 - EN6 (rw) */
    Ifx_UReg_32Bit EN7:1;             /**< \brief [7:7] Access Enable for Master TAG ID 7 - EN7 (rw) */
    Ifx_UReg_32Bit EN8:1;             /**< \brief [8:8] Access Enable for Master TAG ID 8 - EN8 (rw) */
    Ifx_UReg_32Bit EN9:1;             /**< \brief [9:9] Access Enable for Master TAG ID 9 - EN9 (rw) */
    Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Access Enable for Master TAG ID 10 - EN10 (rw) */
    Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Access Enable for Master TAG ID 11 - EN11 (rw) */
    Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Access Enable for Master TAG ID 12 - EN12 (rw) */
    Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Access Enable for Master TAG ID 13 - EN13 (rw) */
    Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Access Enable for Master TAG ID 14 - EN14 (rw) */
    Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Access Enable for Master TAG ID 15 - EN15 (rw) */
    Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Access Enable for Master TAG ID 16 - EN16 (rw) */
    Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Access Enable for Master TAG ID 17 - EN17 (rw) */
    Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Access Enable for Master TAG ID 18 - EN18 (rw) */
    Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Access Enable for Master TAG ID 19 - EN19 (rw) */
    Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Access Enable for Master TAG ID 20 - EN20 (rw) */
    Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Access Enable for Master TAG ID 21 - EN21 (rw) */
    Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Access Enable for Master TAG ID 22 - EN22 (rw) */
    Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Access Enable for Master TAG ID 23 - EN23 (rw) */
    Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Access Enable for Master TAG ID 24 - EN24 (rw) */
    Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Access Enable for Master TAG ID 25 - EN25 (rw) */
    Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Access Enable for Master TAG ID 26 - EN26 (rw) */
    Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Access Enable for Master TAG ID 27 - EN27 (rw) */
    Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Access Enable for Master TAG ID 28 - EN28 (rw) */
    Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Access Enable for Master TAG ID 29 - EN29 (rw) */
    Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Access Enable for Master TAG ID 30 - EN30 (rw) */
    Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Access Enable for Master TAG ID 31 - EN31 (rw) */
} Ifx_SCU_ACCEN00_Bits;

/** \brief Access Enable Register 01 */
typedef struct _Ifx_SCU_ACCEN01_Bits
{
    Ifx_UReg_32Bit reserved_0:32;     /**< \brief [31:0] \internal Reserved */
} Ifx_SCU_ACCEN01_Bits;

/** \brief Access Enable Register 10 */
typedef struct _Ifx_SCU_ACCEN10_Bits
{
    Ifx_UReg_32Bit EN0:1;             /**< \brief [0:0] Access Enable for Master TAG ID 0 - EN0 (rw) */
    Ifx_UReg_32Bit EN1:1;             /**< \brief [1:1] Access Enable for Master TAG ID 1 - EN1 (rw) */
    Ifx_UReg_32Bit EN2:1;             /**< \brief [2:2] Access Enable for Master TAG ID 2 - EN2 (rw) */
    Ifx_UReg_32Bit EN3:1;             /**< \brief [3:3] Access Enable for Master TAG ID 3 - EN3 (rw) */
    Ifx_UReg_32Bit EN4:1;             /**< \brief [4:4] Access Enable for Master TAG ID 4 - EN4 (rw) */
    Ifx_UReg_32Bit EN5:1;             /**< \brief [5:5] Access Enable for Master TAG ID 5 - EN5 (rw) */
    Ifx_UReg_32Bit EN6:1;             /**< \brief [6:6] Access Enable for Master TAG ID 6 - EN6 (rw) */
    Ifx_UReg_32Bit EN7:1;             /**< \brief [7:7] Access Enable for Master TAG ID 7 - EN7 (rw) */
    Ifx_UReg_32Bit EN8:1;             /**< \brief [8:8] Access Enable for Master TAG ID 8 - EN8 (rw) */
    Ifx_UReg_32Bit EN9:1;             /**< \brief [9:9] Access Enable for Master TAG ID 9 - EN9 (rw) */
    Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Access Enable for Master TAG ID 10 - EN10 (rw) */
    Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Access Enable for Master TAG ID 11 - EN11 (rw) */
    Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Access Enable for Master TAG ID 12 - EN12 (rw) */
    Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Access Enable for Master TAG ID 13 - EN13 (rw) */
    Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Access Enable for Master TAG ID 14 - EN14 (rw) */
    Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Access Enable for Master TAG ID 15 - EN15 (rw) */
    Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Access Enable for Master TAG ID 16 - EN16 (rw) */
    Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Access Enable for Master TAG ID 17 - EN17 (rw) */
    Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Access Enable for Master TAG ID 18 - EN18 (rw) */
    Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Access Enable for Master TAG ID 19 - EN19 (rw) */
    Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Access Enable for Master TAG ID 20 - EN20 (rw) */
    Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Access Enable for Master TAG ID 21 - EN21 (rw) */
    Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Access Enable for Master TAG ID 22 - EN22 (rw) */
    Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Access Enable for Master TAG ID 23 - EN23 (rw) */
    Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Access Enable for Master TAG ID 24 - EN24 (rw) */
    Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Access Enable for Master TAG ID 25 - EN25 (rw) */
    Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Access Enable for Master TAG ID 26 - EN26 (rw) */
    Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Access Enable for Master TAG ID 27 - EN27 (rw) */
    Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Access Enable for Master TAG ID 28 - EN28 (rw) */
    Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Access Enable for Master TAG ID 29 - EN29 (rw) */
    Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Access Enable for Master TAG ID 30 - EN30 (rw) */
    Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Access Enable for Master TAG ID 31 - EN31 (rw) */
} Ifx_SCU_ACCEN10_Bits;

/** \brief Access Enable Register 11 */
typedef struct _Ifx_SCU_ACCEN11_Bits
{
    Ifx_UReg_32Bit reserved_0:32;     /**< \brief [31:0] \internal Reserved */
} Ifx_SCU_ACCEN11_Bits;

/** \brief Application Reset Disable Register */
typedef struct _Ifx_SCU_ARSTDIS_Bits
{
    Ifx_UReg_32Bit STM0DIS:1;         /**< \brief [0:0] STM0 Disable Reset - STM0DIS (rw) */
    Ifx_UReg_32Bit STM1DIS:1;         /**< \brief [1:1] STM1 Disable Reset - STM1DIS (rw) */
    Ifx_UReg_32Bit STM2DIS:1;         /**< \brief [2:2] STM2 Disable Reset - STM2DIS (rw) */
    Ifx_UReg_32Bit STM3DIS:1;         /**< \brief [3:3] STM3 Disable Reset - STM3DIS (rw) */
    Ifx_UReg_32Bit reserved_4:1;      /**< \brief [4:4] \internal Reserved */
    Ifx_UReg_32Bit reserved_5:1;      /**< \brief [5:5] \internal Reserved */
    Ifx_UReg_32Bit reserved_6:2;      /**< \brief [7:6] \internal Reserved */
    Ifx_UReg_32Bit reserved_8:24;     /**< \brief [31:8] \internal Reserved */
} Ifx_SCU_ARSTDIS_Bits;

/** \brief CCU Clock Control Register 0 */
typedef struct _Ifx_SCU_CCUCON0_Bits
{
    Ifx_UReg_32Bit STMDIV:4;          /**< \brief [3:0] STM Divider Reload Value - STMDIV (rw) */
    Ifx_UReg_32Bit GTMDIV:4;          /**< \brief [7:4] GTM Divider Reload Value - GTMDIV (rw) */
    Ifx_UReg_32Bit SRIDIV:4;          /**< \brief [11:8] SRI Divider Reload Value - SRIDIV (rw) */
    Ifx_UReg_32Bit LPDIV:3;           /**< \brief [14:12] Low Power Divider Reload Value - LPDIV (rw) */
    Ifx_UReg_32Bit reserved_15:1;     /**< \brief [15:15] \internal Reserved */
    Ifx_UReg_32Bit SPBDIV:4;          /**< \brief [19:16] SPB Divider Reload Value - SPBDIV (rw) */
    Ifx_UReg_32Bit BBBDIV:4;          /**< \brief [23:20] BBB Divider Reload Value - BBBDIV (rw) */
    Ifx_UReg_32Bit FSIDIV:2;          /**< \brief [25:24] FSI Divider Reload Value - FSIDIV (rw) */
    Ifx_UReg_32Bit FSI2DIV:2;         /**< \brief [27:26] FSI2 Divider Reload Value - FSI2DIV (rw) */
    Ifx_UReg_32Bit CLKSEL:2;          /**< \brief [29:28] Clock Selection for Source - CLKSEL (rwh) */
    Ifx_UReg_32Bit UP:1;              /**< \brief [30:30] Update Request - UP (w) */
    Ifx_UReg_32Bit LCK:1;             /**< \brief [31:31] Lock Status - LCK (rh) */
} Ifx_SCU_CCUCON0_Bits;

/** \brief CCU Clock Control Register 1 */
typedef struct _Ifx_SCU_CCUCON1_Bits
{
    Ifx_UReg_32Bit MCANDIV:4;         /**< \brief [3:0] MCAN Divider Reload Value - MCANDIV (rw) */
    Ifx_UReg_32Bit CLKSELMCAN:2;      /**< \brief [5:4] Clock Selection for MCAN - CLKSELMCAN (rw) */
    Ifx_UReg_32Bit reserved_6:1;      /**< \brief [6:6] \internal Reserved */
    Ifx_UReg_32Bit PLL1DIVDIS:1;      /**< \brief [7:7] Divider Disable for fPLL1 - PLL1DIVDIS (rw) */
    Ifx_UReg_32Bit I2CDIV:4;          /**< \brief [11:8] I2C Divider Reload Value - I2CDIV (rw) */
    Ifx_UReg_32Bit reserved_12:4;     /**< \brief [15:12] \internal Reserved */
    Ifx_UReg_32Bit MSCDIV:4;          /**< \brief [19:16] MSC Divider Reload Value - MSCDIV (rw) */
    Ifx_UReg_32Bit CLKSELMSC:2;       /**< \brief [21:20] Clock Selection for MSC - CLKSELMSC (rw) */
    Ifx_UReg_32Bit reserved_22:2;     /**< \brief [23:22] \internal Reserved */
    Ifx_UReg_32Bit QSPIDIV:4;         /**< \brief [27:24] QSPI Divider Reload Value - QSPIDIV (rw) */
    Ifx_UReg_32Bit CLKSELQSPI:2;      /**< \brief [29:28] Clock Selection for QSPI - CLKSELQSPI (rw) */
    Ifx_UReg_32Bit reserved_30:1;     /**< \brief [30:30] \internal Reserved */
    Ifx_UReg_32Bit LCK:1;             /**< \brief [31:31] Lock Status - LCK (rh) */
} Ifx_SCU_CCUCON1_Bits;

/** \brief CCU Clock Control Register 2 */
typedef struct _Ifx_SCU_CCUCON2_Bits
{
    Ifx_UReg_32Bit ASCLINFDIV:4;      /**< \brief [3:0] ASCLIN Fast Divider Reload Value - ASCLINFDIV (rw) */
    Ifx_UReg_32Bit reserved_4:4;      /**< \brief [7:4] \internal Reserved */
    Ifx_UReg_32Bit ASCLINSDIV:4;      /**< \brief [11:8] ASCLIN Slow Divider Reload Value - ASCLINSDIV (rw) */
    Ifx_UReg_32Bit CLKSELASCLINS:2;    /**< \brief [13:12] Clock Selection for ASCLINS - CLKSELASCLINS (rw) */
    Ifx_UReg_32Bit reserved_14:10;    /**< \brief [23:14] \internal Reserved */
    Ifx_UReg_32Bit reserved_24:1;     /**< \brief [24:24] \internal Reserved */
    Ifx_UReg_32Bit ERAYPERON:1;       /**< \brief [25:25] Power Safe SwitchOff for ERAY Clock - ERAYPERON (rw) */
    Ifx_UReg_32Bit reserved_26:1;     /**< \brief [26:26] \internal Reserved */
    Ifx_UReg_32Bit reserved_27:4;     /**< \brief [30:27] \internal Reserved */
    Ifx_UReg_32Bit LCK:1;             /**< \brief [31:31] Lock Status - LCK (rh) */
} Ifx_SCU_CCUCON2_Bits;

/** \brief CCU Clock Control Register 3 */
typedef struct _Ifx_SCU_CCUCON3_Bits
{
    Ifx_UReg_32Bit PLL0MONEN:1;       /**< \brief [0:0] PLL0 Clock Monitor Enable - PLL0MONEN (rw) */
    Ifx_UReg_32Bit PLL1MONEN:1;       /**< \brief [1:1] PLL1 Clock Monitor Enable - PLL1MONEN (rw) */
    Ifx_UReg_32Bit PLL2MONEN:1;       /**< \brief [2:2] PLL2 Clock Monitor Enable - PLL2MONEN (rw) */
    Ifx_UReg_32Bit SPBMONEN:1;        /**< \brief [3:3] SPB Clock Monitor Enable - SPBMONEN (rw) */
    Ifx_UReg_32Bit BACKMONEN:1;       /**< \brief [4:4] Backup Clock Monitor Enable - BACKMONEN (rw) */
    Ifx_UReg_32Bit reserved_5:3;      /**< \brief [7:5] \internal Reserved */
    Ifx_UReg_32Bit PLL0MONTST:1;      /**< \brief [8:8] PLL0 Clock Monitor Test - PLL0MONTST (rw) */
    Ifx_UReg_32Bit PLL1MONTST:1;      /**< \brief [9:9] PLL1 Clock Monitor Test - PLL1MONTST (rw) */
    Ifx_UReg_32Bit PLL2MONTST:1;      /**< \brief [10:10] PLL2 Clock Monitor Test - PLL2MONTST (rw) */
    Ifx_UReg_32Bit SPBMONTST:1;       /**< \brief [11:11] SPB Clock Monitor Test - SPBMONTST (rw) */
    Ifx_UReg_32Bit BACKMONTST:1;      /**< \brief [12:12] Backup Clock Monitor Test - BACKMONTST (rw) */
    Ifx_UReg_32Bit reserved_13:11;    /**< \brief [23:13] \internal Reserved */
    Ifx_UReg_32Bit reserved_24:6;     /**< \brief [29:24] \internal Reserved */
    Ifx_UReg_32Bit UP:1;              /**< \brief [30:30] Update Request - UP (w) */
    Ifx_UReg_32Bit LCK:1;             /**< \brief [31:31] Lock Status - LCK (rh) */
} Ifx_SCU_CCUCON3_Bits;

/** \brief CCU Clock Control Register 4 */
typedef struct _Ifx_SCU_CCUCON4_Bits
{
    Ifx_UReg_32Bit LOTHR:12;          /**< \brief [11:0] Backup Clock Monitor Lower Threshold - LOTHR (rw) */
    Ifx_UReg_32Bit UPTHR:12;          /**< \brief [23:12] Backup Clock Monitor Upper Threshold - UPTHR (rw) */
    Ifx_UReg_32Bit MONEN:1;           /**< \brief [24:24] Backup Clock Monitor Enable - MONEN (rw) */
    Ifx_UReg_32Bit MONTST:1;          /**< \brief [25:25] Backup Clock Monitor Test - MONTST (rw) */
    Ifx_UReg_32Bit reserved_26:4;     /**< \brief [29:26] \internal Reserved */
    Ifx_UReg_32Bit UP:1;              /**< \brief [30:30] Update Request - UP (w) */
    Ifx_UReg_32Bit LCK:1;             /**< \brief [31:31] Lock Status - LCK (rh) */
} Ifx_SCU_CCUCON4_Bits;

/** \brief CCU Clock Control Register 5 */
typedef struct _Ifx_SCU_CCUCON5_Bits
{
    Ifx_UReg_32Bit GETHDIV:4;         /**< \brief [3:0] GETH Divider Reload Value - GETHDIV (rw) */
    Ifx_UReg_32Bit MCANHDIV:4;        /**< \brief [7:4] MCANH Divider Reload Value - MCANHDIV (rw) */
    Ifx_UReg_32Bit reserved_8:4;      /**< \brief [11:8] \internal Reserved */
    Ifx_UReg_32Bit reserved_12:18;    /**< \brief [29:12] \internal Reserved */
    Ifx_UReg_32Bit UP:1;              /**< \brief [30:30] Update Request - UP (w) */
    Ifx_UReg_32Bit LCK:1;             /**< \brief [31:31] Lock Status - LCK (rh) */
} Ifx_SCU_CCUCON5_Bits;

/** \brief CCU Clock Control Register 6 */
typedef struct _Ifx_SCU_CCUCON6_Bits
{
    Ifx_UReg_32Bit CPU0DIV:6;         /**< \brief [5:0] CPU0 Divider Reload Value - CPU0DIV (rw) */
    Ifx_UReg_32Bit reserved_6:26;     /**< \brief [31:6] \internal Reserved */
} Ifx_SCU_CCUCON6_Bits;

/** \brief CCU Clock Control Register 7 */
typedef struct _Ifx_SCU_CCUCON7_Bits
{
    Ifx_UReg_32Bit CPU1DIV:6;         /**< \brief [5:0] CPU1 Divider Reload Value - CPU1DIV (rw) */
    Ifx_UReg_32Bit reserved_6:26;     /**< \brief [31:6] \internal Reserved */
} Ifx_SCU_CCUCON7_Bits;

/** \brief CCU Clock Control Register 8 */
typedef struct _Ifx_SCU_CCUCON8_Bits
{
    Ifx_UReg_32Bit CPU2DIV:6;         /**< \brief [5:0] CPU2 Divider Reload Value - CPU2DIV (rw) */
    Ifx_UReg_32Bit reserved_6:26;     /**< \brief [31:6] \internal Reserved */
} Ifx_SCU_CCUCON8_Bits;

/** \brief CCU Clock Control Register 9 */
typedef struct _Ifx_SCU_CCUCON9_Bits
{
    Ifx_UReg_32Bit CPU3DIV:6;         /**< \brief [5:0] CPU3 Divider Reload Value - CPU3DIV (rw) */
    Ifx_UReg_32Bit reserved_6:26;     /**< \brief [31:6] \internal Reserved */
} Ifx_SCU_CCUCON9_Bits;

/** \brief Chip Identification Register */
typedef struct _Ifx_SCU_CHIPID_Bits
{
    Ifx_UReg_32Bit CHREV:6;           /**< \brief [5:0] Chip Revision Number - CHREV (r) */
    Ifx_UReg_32Bit CHTEC:2;           /**< \brief [7:6] Chip Family - CHTEC (r) */
    Ifx_UReg_32Bit CHPK:4;            /**< \brief [11:8] Chip Package - CHPK (rw) */
    Ifx_UReg_32Bit CHID:4;            /**< \brief [15:12] Chip Product - CHID (rw) */
    Ifx_UReg_32Bit EEA:1;             /**< \brief [16:16] Emulation or ADAS Extension Available - EEA (rh) */
    Ifx_UReg_32Bit UCODE:7;           /**< \brief [23:17] \xb5Code Version - UCODE (rw) */
    Ifx_UReg_32Bit FSIZE:4;           /**< \brief [27:24] Program Flash Size - FSIZE (rw) */
    Ifx_UReg_32Bit VART:3;            /**< \brief [30:28] Variant - VART (rw) */
    Ifx_UReg_32Bit SEC:1;             /**< \brief [31:31] Security Device Available - SEC (rw) */
} Ifx_SCU_CHIPID_Bits;

/** \brief Core Die Temperature Sensor Limit Register */
typedef struct _Ifx_SCU_DTSCLIM_Bits
{
    Ifx_UReg_32Bit LOWER:12;          /**< \brief [11:0] DTSC Lower Limit - LOWER (rw) */
    Ifx_UReg_32Bit reserved_12:1;     /**< \brief [12:12] \internal Reserved */
    Ifx_UReg_32Bit BGPOK:1;           /**< \brief [13:13] DTSC Bandgap OK (rh) */
    Ifx_UReg_32Bit EN:1;              /**< \brief [14:14] DTSC Enable (rw) */
    Ifx_UReg_32Bit LLU:1;             /**< \brief [15:15] DTSC Lower Limit Underflow - LLU (rwh) */
    Ifx_UReg_32Bit UPPER:12;          /**< \brief [27:16] DTSC Upper Limit - UPPER (rw) */
    Ifx_UReg_32Bit INTEN:1;           /**< \brief [28:28] DTSC Interrupt Enable (rw) */
    Ifx_UReg_32Bit reserved_29:1;     /**< \brief [29:29] \internal Reserved */
    Ifx_UReg_32Bit INT:1;             /**< \brief [30:30] DTSC Interrupt status flag (rwh) */
    Ifx_UReg_32Bit UOF:1;             /**< \brief [31:31] DTSC Upper Limit Overflow - UOF (rwh) */
} Ifx_SCU_DTSCLIM_Bits;

/** \brief Core Die Temperature Sensor Status Register */
typedef struct _Ifx_SCU_DTSCSTAT_Bits
{
    Ifx_UReg_32Bit RESULT:12;         /**< \brief [11:0] Result of the DTSC Measurement - RESULT (rh) */
    Ifx_UReg_32Bit reserved_12:20;    /**< \brief [31:12] \internal Reserved */
} Ifx_SCU_DTSCSTAT_Bits;

/** \brief ENDINIT Global Control Register 0 */
typedef struct _Ifx_SCU_EICON0_Bits
{
    unsigned __sfrbit32 reserved_0:1;    /**< \brief [0:0] \internal Reserved */
    unsigned __sfrbit32 ENDINIT:1;       /**< \brief [1:1] End-of-Initialization Control Bit - ENDINIT (rwh) */
    unsigned __sfrbit32 EPW:14;          /**< \brief [15:2] User-Definable ENDINIT Password Field - EPW (rwh) */
    unsigned __sfrbit32 REL:16;          /**< \brief [31:16] Reload Value for the ENDINIT Timeout Counter - REL (r) */
} Ifx_SCU_EICON0_Bits;

/** \brief ENDINIT Global Control Register 1 */
typedef struct _Ifx_SCU_EICON1_Bits
{
    Ifx_UReg_32Bit reserved_0:1;      /**< \brief [0:0] \internal Reserved */
    Ifx_UReg_32Bit reserved_1:1;      /**< \brief [1:1] \internal Reserved */
    Ifx_UReg_32Bit IR0:1;             /**< \brief [2:2] Input Frequency Request Control - IR1,IR0 (rw) */
    Ifx_UReg_32Bit DR:1;              /**< \brief [3:3] Disable Request Control Bit - DR (rw) */
    Ifx_UReg_32Bit reserved_4:1;      /**< \brief [4:4] \internal Reserved */
    Ifx_UReg_32Bit IR1:1;             /**< \brief [5:5] Input Frequency Request Control - IR1,IR0 (rw) */
    Ifx_UReg_32Bit reserved_6:26;     /**< \brief [31:6] \internal Reserved */
} Ifx_SCU_EICON1_Bits;

/** \brief External Input Channel Register ${i} */
typedef struct _Ifx_SCU_EICR_Bits
{
    Ifx_UReg_32Bit reserved_0:4;      /**< \brief [3:0] \internal Reserved */
    Ifx_UReg_32Bit EXIS0:3;           /**< \brief [6:4] External Input Selection 0 - EXIS0 (rw) */
    Ifx_UReg_32Bit reserved_7:1;      /**< \brief [7:7] \internal Reserved */
    Ifx_UReg_32Bit FEN0:1;            /**< \brief [8:8] Falling Edge Enable 0 - FEN0 (rw) */
    Ifx_UReg_32Bit REN0:1;            /**< \brief [9:9] Rising Edge Enable 0 - REN0 (rw) */
    Ifx_UReg_32Bit LDEN0:1;           /**< \brief [10:10] Level Detection Enable 0 - LDEN0 (rw) */
    Ifx_UReg_32Bit EIEN0:1;           /**< \brief [11:11] External Input Enable 0 - EIEN0 (rw) */
    Ifx_UReg_32Bit INP0:3;            /**< \brief [14:12] Input Node Pointer - INP0 (rw) */
    Ifx_UReg_32Bit reserved_15:5;     /**< \brief [19:15] \internal Reserved */
    Ifx_UReg_32Bit EXIS1:3;           /**< \brief [22:20] External Input Selection 1 - EXIS1 (rw) */
    Ifx_UReg_32Bit reserved_23:1;     /**< \brief [23:23] \internal Reserved */
    Ifx_UReg_32Bit FEN1:1;            /**< \brief [24:24] Falling Edge Enable 1 - FEN1 (rw) */
    Ifx_UReg_32Bit REN1:1;            /**< \brief [25:25] Rising Edge Enable 1 - REN1 (rw) */
    Ifx_UReg_32Bit LDEN1:1;           /**< \brief [26:26] Level Detection Enable 1 - LDEN1 (rw) */
    Ifx_UReg_32Bit EIEN1:1;           /**< \brief [27:27] External Input Enable 1 - EIEN1 (rw) */
    Ifx_UReg_32Bit INP1:3;            /**< \brief [30:28] Input Node Pointer - INP1 (rw) */
    Ifx_UReg_32Bit reserved_31:1;     /**< \brief [31:31] \internal Reserved */
} Ifx_SCU_EICR_Bits;

/** \brief External Input Filter Register */
typedef struct _Ifx_SCU_EIFILT_Bits
{
    Ifx_UReg_32Bit FILRQ0A:1;         /**< \brief [0:0] Filter Enable for REQ0A - FILRQ0A (rw) */
    Ifx_UReg_32Bit FILRQ5A:1;         /**< \brief [1:1] Filter Enable for REQ5A - FILRQ5A (rw) */
    Ifx_UReg_32Bit FILRQ2A:1;         /**< \brief [2:2] Filter Enable for REQ2A - FILRQ2A (rw) */
    Ifx_UReg_32Bit FILRQ3A:1;         /**< \brief [3:3] Filter Enable for REQ3A - FILRQ3A (rw) */
    Ifx_UReg_32Bit FILRQ0C:1;         /**< \brief [4:4] Filter Enable for REQ0C - FILRQ0C (rw) */
    Ifx_UReg_32Bit FILRQ1C:1;         /**< \brief [5:5] Filter Enable for REQ1C - FILRQ1C (rw) */
    Ifx_UReg_32Bit FILRQ3C:1;         /**< \brief [6:6] Filter Enable for REQ3C - FILRQ3C (rw) */
    Ifx_UReg_32Bit FILRQ2C:1;         /**< \brief [7:7] Filter Enable for REQ2C - FILRQ2C (rw) */
    Ifx_UReg_32Bit FILRQ4A:1;         /**< \brief [8:8] Filter Enable for REQ4A - FILRQ4A (rw) */
    Ifx_UReg_32Bit FILRQ6A:1;         /**< \brief [9:9] Filter Enable for REQ6A - FILRQ6A (rw) */
    Ifx_UReg_32Bit FILRQ1A:1;         /**< \brief [10:10] Filter Enable for REQ1A - FILRQ1A (rw) */
    Ifx_UReg_32Bit FILRQ7A:1;         /**< \brief [11:11] Filter Enable for REQ7A - FILRQ7A (rw) */
    Ifx_UReg_32Bit FILRQ6D:1;         /**< \brief [12:12] Filter Enable for REQ6D - FILRQ6D (rw) */
    Ifx_UReg_32Bit FILRQ4D:1;         /**< \brief [13:13] Filter Enable for REQ4D - FILRQ4D (rw) */
    Ifx_UReg_32Bit FILRQ2B:1;         /**< \brief [14:14] Filter Enable for REQ2B - FILRQ2B (rw) */
    Ifx_UReg_32Bit FILRQ3B:1;         /**< \brief [15:15] Filter Enable for REQ3B - FILRQ3B (rw) */
    Ifx_UReg_32Bit FILRQ7C:1;         /**< \brief [16:16] Filter Enable for REQ7C - FILRQ7C (rw) */
    Ifx_UReg_32Bit reserved_17:7;     /**< \brief [23:17] \internal Reserved */
    Ifx_UReg_32Bit FILTDIV:4;         /**< \brief [27:24] Digital Glitch Filter Clock Predivider - FILTDIV (rw) */
    Ifx_UReg_32Bit DEPTH:4;           /**< \brief [31:28] Digital Glitch Filter Depth - DEPTH (rw) */
} Ifx_SCU_EIFILT_Bits;

/** \brief External Input Flag Register */
typedef struct _Ifx_SCU_EIFR_Bits
{
    Ifx_UReg_32Bit INTF0:1;           /**< \brief [0:0] External Event Flag of Channel 0 - INTF0 (rh) */
    Ifx_UReg_32Bit INTF1:1;           /**< \brief [1:1] External Event Flag of Channel 1 - INTF1 (rh) */
    Ifx_UReg_32Bit INTF2:1;           /**< \brief [2:2] External Event Flag of Channel 2 - INTF2 (rh) */
    Ifx_UReg_32Bit INTF3:1;           /**< \brief [3:3] External Event Flag of Channel 3 - INTF3 (rh) */
    Ifx_UReg_32Bit INTF4:1;           /**< \brief [4:4] External Event Flag of Channel 4 - INTF4 (rh) */
    Ifx_UReg_32Bit INTF5:1;           /**< \brief [5:5] External Event Flag of Channel 5 - INTF5 (rh) */
    Ifx_UReg_32Bit INTF6:1;           /**< \brief [6:6] External Event Flag of Channel 6 - INTF6 (rh) */
    Ifx_UReg_32Bit INTF7:1;           /**< \brief [7:7] External Event Flag of Channel 7 - INTF7 (rh) */
    Ifx_UReg_32Bit reserved_8:24;     /**< \brief [31:8] \internal Reserved */
} Ifx_SCU_EIFR_Bits;

/** \brief ENDINIT Timeout Counter Status Register */
typedef struct _Ifx_SCU_EISR_Bits
{
    Ifx_UReg_32Bit AE:1;              /**< \brief [0:0] EICON0 Access Error Status Flag - AE (rh) */
    Ifx_UReg_32Bit OE:1;              /**< \brief [1:1] EI Timeout Overflow Error Status Flag - OE (rh) */
    Ifx_UReg_32Bit IS0:1;             /**< \brief [2:2] EI Timeout Input Clock Status - IS1,IS0 (rh) */
    Ifx_UReg_32Bit DS:1;              /**< \brief [3:3] EI Timeout Enable/Disable Status Flag - DS (rh) */
    Ifx_UReg_32Bit TO:1;              /**< \brief [4:4] EI Time-Out Mode Flag - TO (rh) */
    Ifx_UReg_32Bit IS1:1;             /**< \brief [5:5] EI Timeout Input Clock Status - IS1,IS0 (rh) */
    Ifx_UReg_32Bit reserved_6:10;     /**< \brief [15:6] \internal Reserved */
    Ifx_UReg_32Bit TIM:16;            /**< \brief [31:16] Timer Value - TIM (rh) */
} Ifx_SCU_EISR_Bits;

/** \brief Emergency Stop Register */
typedef struct _Ifx_SCU_EMSR_Bits
{
    Ifx_UReg_32Bit POL:1;             /**< \brief [0:0] Input Polarity - POL (rw) */
    Ifx_UReg_32Bit MODE:1;            /**< \brief [1:1] Mode Selection - MODE (rw) */
    Ifx_UReg_32Bit ENON:1;            /**< \brief [2:2] Enable ON - ENON (rw) */
    Ifx_UReg_32Bit PSEL:1;            /**< \brief [3:3] PORT Select - PSEL (rw) */
    Ifx_UReg_32Bit reserved_4:12;     /**< \brief [15:4] \internal Reserved */
    Ifx_UReg_32Bit EMSF:1;            /**< \brief [16:16] Emergency Stop Flag - EMSF (rh) */
    Ifx_UReg_32Bit SEMSF:1;           /**< \brief [17:17] SMU Emergency Stop Flag - SEMSF (rh) */
    Ifx_UReg_32Bit reserved_18:14;    /**< \brief [31:18] \internal Reserved */
} Ifx_SCU_EMSR_Bits;

/** \brief Emergency Stop Software set and clear register */
typedef struct _Ifx_SCU_EMSSW_Bits
{
    Ifx_UReg_32Bit reserved_0:24;     /**< \brief [23:0] \internal Reserved */
    Ifx_UReg_32Bit EMSFM:2;           /**< \brief [25:24] Emergency Stop Flag Modification - EMSFM (w) */
    Ifx_UReg_32Bit SEMSFM:2;          /**< \brief [27:26] SMU Emergency Stop Flag Modification - SEMSFM (w) */
    Ifx_UReg_32Bit reserved_28:4;     /**< \brief [31:28] \internal Reserved */
} Ifx_SCU_EMSSW_Bits;

/** \brief ESR${x} Input Configuration Register */
typedef struct _Ifx_SCU_ESRCFGX_ESRCFGX_Bits
{
    Ifx_UReg_32Bit reserved_0:7;      /**< \brief [6:0] \internal Reserved */
    Ifx_UReg_32Bit EDCON:2;           /**< \brief [8:7] Edge Detection Control - EDCON (rw) */
    Ifx_UReg_32Bit reserved_9:23;     /**< \brief [31:9] \internal Reserved */
} Ifx_SCU_ESRCFGX_ESRCFGX_Bits;

/** \brief ESR Output Configuration Register */
typedef struct _Ifx_SCU_ESROCFG_Bits
{
    Ifx_UReg_32Bit ARI:1;             /**< \brief [0:0] Application Reset Indicator - ARI (rh) */
    Ifx_UReg_32Bit ARC:1;             /**< \brief [1:1] Application Reset Indicator Clear - ARC (w) */
    Ifx_UReg_32Bit reserved_2:30;     /**< \brief [31:2] \internal Reserved */
} Ifx_SCU_ESROCFG_Bits;

/** \brief External Clock Control Register */
typedef struct _Ifx_SCU_EXTCON_Bits
{
    Ifx_UReg_32Bit EN0:1;             /**< \brief [0:0] External Clock Enable for EXTCLK0 - EN0 (rwh) */
    Ifx_UReg_32Bit reserved_1:1;      /**< \brief [1:1] \internal Reserved */
    Ifx_UReg_32Bit SEL0:4;            /**< \brief [5:2] External Clock Select for EXTCLK0 - SEL0 (rwh) */
    Ifx_UReg_32Bit reserved_6:10;     /**< \brief [15:6] \internal Reserved */
    Ifx_UReg_32Bit EN1:1;             /**< \brief [16:16] External Clock Enable for EXTCLK1 - EN1 (rwh) */
    Ifx_UReg_32Bit NSEL:1;            /**< \brief [17:17] Negation Selection - NSEL (rwh) */
    Ifx_UReg_32Bit SEL1:4;            /**< \brief [21:18] External Clock Select for EXTCLK1 - SEL1 (rwh) */
    Ifx_UReg_32Bit reserved_22:2;     /**< \brief [23:22] \internal Reserved */
    Ifx_UReg_32Bit DIV1:8;            /**< \brief [31:24] External Clock Divider for EXTCLK1 - DIV1 (rw) */
} Ifx_SCU_EXTCON_Bits;

/** \brief Fractional Divider Register */
typedef struct _Ifx_SCU_FDR_Bits
{
    Ifx_UReg_32Bit STEP:10;           /**< \brief [9:0] Step Value - STEP (rw) */
    Ifx_UReg_32Bit reserved_10:4;     /**< \brief [13:10] \internal Reserved */
    Ifx_UReg_32Bit DM:2;              /**< \brief [15:14] Divider Mode - DM (rw) */
    Ifx_UReg_32Bit RESULT:10;         /**< \brief [25:16] Result Value - RESULT (rh) */
    Ifx_UReg_32Bit reserved_26:5;     /**< \brief [30:26] \internal Reserved */
    Ifx_UReg_32Bit DISCLK:1;          /**< \brief [31:31] Disable Clock - DISCLK (rwh) */
} Ifx_SCU_FDR_Bits;

/** \brief Flag Modification Register */
typedef struct _Ifx_SCU_FMR_Bits
{
    Ifx_UReg_32Bit FS0:1;             /**< \brief [0:0] Set Flag INTFx for Channel 0 - FS0 (w) */
    Ifx_UReg_32Bit FS1:1;             /**< \brief [1:1] Set Flag INTFx for Channel 1 - FS1 (w) */
    Ifx_UReg_32Bit FS2:1;             /**< \brief [2:2] Set Flag INTFx for Channel 2 - FS2 (w) */
    Ifx_UReg_32Bit FS3:1;             /**< \brief [3:3] Set Flag INTFx for Channel 3 - FS3 (w) */
    Ifx_UReg_32Bit FS4:1;             /**< \brief [4:4] Set Flag INTFx for Channel 4 - FS4 (w) */
    Ifx_UReg_32Bit FS5:1;             /**< \brief [5:5] Set Flag INTFx for Channel 5 - FS5 (w) */
    Ifx_UReg_32Bit FS6:1;             /**< \brief [6:6] Set Flag INTFx for Channel 6 - FS6 (w) */
    Ifx_UReg_32Bit FS7:1;             /**< \brief [7:7] Set Flag INTFx for Channel 7 - FS7 (w) */
    Ifx_UReg_32Bit reserved_8:8;      /**< \brief [15:8] \internal Reserved */
    Ifx_UReg_32Bit FC0:1;             /**< \brief [16:16] Clear Flag INTFx for Channel 0 - FC0 (w) */
    Ifx_UReg_32Bit FC1:1;             /**< \brief [17:17] Clear Flag INTFx for Channel 1 - FC1 (w) */
    Ifx_UReg_32Bit FC2:1;             /**< \brief [18:18] Clear Flag INTFx for Channel 2 - FC2 (w) */
    Ifx_UReg_32Bit FC3:1;             /**< \brief [19:19] Clear Flag INTFx for Channel 3 - FC3 (w) */
    Ifx_UReg_32Bit FC4:1;             /**< \brief [20:20] Clear Flag INTFx for Channel 4 - FC4 (w) */
    Ifx_UReg_32Bit FC5:1;             /**< \brief [21:21] Clear Flag INTFx for Channel 5 - FC5 (w) */
    Ifx_UReg_32Bit FC6:1;             /**< \brief [22:22] Clear Flag INTFx for Channel 6 - FC6 (w) */
    Ifx_UReg_32Bit FC7:1;             /**< \brief [23:23] Clear Flag INTFx for Channel 7 - FC7 (w) */
    Ifx_UReg_32Bit reserved_24:8;     /**< \brief [31:24] \internal Reserved */
} Ifx_SCU_FMR_Bits;

/** \brief Identification Register */
typedef struct _Ifx_SCU_ID_Bits
{
    Ifx_UReg_32Bit MODREV:8;          /**< \brief [7:0] Module Revision Number - MODREV (r) */
    Ifx_UReg_32Bit MODTYPE:8;         /**< \brief [15:8] Module Type - MODTYPE (r) */
    Ifx_UReg_32Bit MODNUMBER:16;      /**< \brief [31:16] Module Number - MODNUMBER (r) */
} Ifx_SCU_ID_Bits;

/** \brief Flag Gating Register ${j} */
typedef struct _Ifx_SCU_IGCR_Bits
{
    Ifx_UReg_32Bit IPEN00:1;          /**< \brief [0:0] Flag Pattern Enable for Channel 0 - IPEN00 (rw) */
    Ifx_UReg_32Bit IPEN01:1;          /**< \brief [1:1] Flag Pattern Enable for Channel 0 - IPEN01 (rw) */
    Ifx_UReg_32Bit IPEN02:1;          /**< \brief [2:2] Flag Pattern Enable for Channel 0 - IPEN02 (rw) */
    Ifx_UReg_32Bit IPEN03:1;          /**< \brief [3:3] Flag Pattern Enable for Channel 0 - IPEN03 (rw) */
    Ifx_UReg_32Bit IPEN04:1;          /**< \brief [4:4] Flag Pattern Enable for Channel 0 - IPEN04 (rw) */
    Ifx_UReg_32Bit IPEN05:1;          /**< \brief [5:5] Flag Pattern Enable for Channel 0 - IPEN05 (rw) */
    Ifx_UReg_32Bit IPEN06:1;          /**< \brief [6:6] Flag Pattern Enable for Channel 0 - IPEN06 (rw) */
    Ifx_UReg_32Bit IPEN07:1;          /**< \brief [7:7] Flag Pattern Enable for Channel 0 - IPEN07 (rw) */
    Ifx_UReg_32Bit reserved_8:5;      /**< \brief [12:8] \internal Reserved */
    Ifx_UReg_32Bit GEEN0:1;           /**< \brief [13:13] Generate Event Enable 0 - GEEN0 (rw) */
    Ifx_UReg_32Bit IGP0:2;            /**< \brief [15:14] Interrupt Gating Pattern 0 - IGP0 (rw) */
    Ifx_UReg_32Bit IPEN10:1;          /**< \brief [16:16] Interrupt Pattern Enable for Channel 1 - IPEN10 (rw) */
    Ifx_UReg_32Bit IPEN11:1;          /**< \brief [17:17] Interrupt Pattern Enable for Channel 1 - IPEN11 (rw) */
    Ifx_UReg_32Bit IPEN12:1;          /**< \brief [18:18] Interrupt Pattern Enable for Channel 1 - IPEN12 (rw) */
    Ifx_UReg_32Bit IPEN13:1;          /**< \brief [19:19] Interrupt Pattern Enable for Channel 1 - IPEN13 (rw) */
    Ifx_UReg_32Bit IPEN14:1;          /**< \brief [20:20] Interrupt Pattern Enable for Channel 1 - IPEN14 (rw) */
    Ifx_UReg_32Bit IPEN15:1;          /**< \brief [21:21] Interrupt Pattern Enable for Channel 1 - IPEN15 (rw) */
    Ifx_UReg_32Bit IPEN16:1;          /**< \brief [22:22] Interrupt Pattern Enable for Channel 1 - IPEN16 (rw) */
    Ifx_UReg_32Bit IPEN17:1;          /**< \brief [23:23] Interrupt Pattern Enable for Channel 1 - IPEN17 (rw) */
    Ifx_UReg_32Bit reserved_24:5;     /**< \brief [28:24] \internal Reserved */
    Ifx_UReg_32Bit GEEN1:1;           /**< \brief [29:29] Generate Event Enable 1 - GEEN1 (rw) */
    Ifx_UReg_32Bit IGP1:2;            /**< \brief [31:30] Interrupt Gating Pattern 1 - IGP1 (rw) */
} Ifx_SCU_IGCR_Bits;

/** \brief ESR Input Register */
typedef struct _Ifx_SCU_IN_Bits
{
    Ifx_UReg_32Bit P0:1;              /**< \brief [0:0] Input Bit 0 - P0 (rh) */
    Ifx_UReg_32Bit P1:1;              /**< \brief [1:1] Input Bit 1 - P1 (rh) */
    Ifx_UReg_32Bit reserved_2:30;     /**< \brief [31:2] \internal Reserved */
} Ifx_SCU_IN_Bits;

/** \brief Input/Output Control Register */
typedef struct _Ifx_SCU_IOCR_Bits
{
    Ifx_UReg_32Bit reserved_0:4;      /**< \brief [3:0] \internal Reserved */
    Ifx_UReg_32Bit PC0:4;             /**< \brief [7:4] Control for ESR0 Pin - PC0 (rw) */
    Ifx_UReg_32Bit reserved_8:4;      /**< \brief [11:8] \internal Reserved */
    Ifx_UReg_32Bit PC1:4;             /**< \brief [15:12] Control for ESR1 Pin - PC1 (rw) */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_SCU_IOCR_Bits;

/** \brief Logic BIST Control 0 Register */
typedef struct _Ifx_SCU_LBISTCTRL0_Bits
{
    Ifx_UReg_32Bit LBISTREQ:1;        /**< \brief [0:0] LBIST Request - LBISTREQ (w) */
    Ifx_UReg_32Bit LBISTRES:1;        /**< \brief [1:1] LBIST-Reset- LBISTRES (w) */
    Ifx_UReg_32Bit PATTERNS:18;       /**< \brief [19:2] LBIST Pattern Number - PATTERNS (rw) */
    Ifx_UReg_32Bit reserved_20:8;     /**< \brief [27:20] \internal Reserved */
    Ifx_UReg_32Bit LBISTDONE:1;       /**< \brief [28:28] LBIST Execution Indicator - LBISTDONE (rh) */
    Ifx_UReg_32Bit reserved_29:1;     /**< \brief [29:29] \internal Reserved */
    Ifx_UReg_32Bit LBISTERRINJ:1;     /**< \brief [30:30] LBIST / Test-Mode Alarm Error Injection (rwh) */
    Ifx_UReg_32Bit LBISTREQRED:1;     /**< \brief [31:31] LBIST Request Redundancy (rw) */
} Ifx_SCU_LBISTCTRL0_Bits;

/** \brief Logic BIST Control 1 Register */
typedef struct _Ifx_SCU_LBISTCTRL1_Bits
{
    Ifx_UReg_32Bit SEED:19;           /**< \brief [18:0] LBIST Seed - SEED (rw) */
    Ifx_UReg_32Bit reserved_19:5;     /**< \brief [23:19] \internal Reserved */
    Ifx_UReg_32Bit SPLITSH:3;         /**< \brief [26:24] LBIST Split-Shift Selection - SPLITSH (rw) */
    Ifx_UReg_32Bit BODY:1;            /**< \brief [27:27] Body Application Indicator - BODY (rw) */
    Ifx_UReg_32Bit LBISTFREQU:4;      /**< \brief [31:28] LBIST Frequency Selection - LBISTFREQU (rw) */
} Ifx_SCU_LBISTCTRL1_Bits;

/** \brief Logic BIST Control 2 Register */
typedef struct _Ifx_SCU_LBISTCTRL2_Bits
{
    Ifx_UReg_32Bit LENGTH:12;         /**< \brief [11:0] LBIST Maximum Scan-Chain Length - LENGTH (rwh) */
    Ifx_UReg_32Bit reserved_12:20;    /**< \brief [31:12] \internal Reserved */
} Ifx_SCU_LBISTCTRL2_Bits;

/** \brief Logic BIST Control 3 Register */
typedef struct _Ifx_SCU_LBISTCTRL3_Bits
{
    Ifx_UReg_32Bit SIGNATURE:32;      /**< \brief [31:0] LBIST Signature - SIGNATURE (rh) */
} Ifx_SCU_LBISTCTRL3_Bits;

/** \brief LCL CPU0 and CPU2 Control Register */
typedef struct _Ifx_SCU_LCLCON0_Bits
{
    Ifx_UReg_32Bit reserved_0:1;      /**< \brief [0:0] \internal Reserved */
    Ifx_UReg_32Bit reserved_1:14;     /**< \brief [14:1] \internal Reserved */
    Ifx_UReg_32Bit reserved_15:1;     /**< \brief [15:15] \internal Reserved */
    Ifx_UReg_32Bit LS0:1;             /**< \brief [16:16] Lockstep Mode Status - LS0 (rh) */
    Ifx_UReg_32Bit reserved_17:14;    /**< \brief [30:17] \internal Reserved */
    Ifx_UReg_32Bit LSEN0:1;           /**< \brief [31:31] Lockstep Enable - LSEN0 (rw) */
} Ifx_SCU_LCLCON0_Bits;

/** \brief LCL CPU1 and CPU3 Control Register */
typedef struct _Ifx_SCU_LCLCON1_Bits
{
    Ifx_UReg_32Bit reserved_0:1;      /**< \brief [0:0] \internal Reserved */
    Ifx_UReg_32Bit reserved_1:14;     /**< \brief [14:1] \internal Reserved */
    Ifx_UReg_32Bit reserved_15:1;     /**< \brief [15:15] \internal Reserved */
    Ifx_UReg_32Bit LS1:1;             /**< \brief [16:16] Lockstep Mode Status - LS1 (rh) */
    Ifx_UReg_32Bit reserved_17:14;    /**< \brief [30:17] \internal Reserved */
    Ifx_UReg_32Bit LSEN1:1;           /**< \brief [31:31] Lockstep Enable - LSEN1 (rw) */
} Ifx_SCU_LCLCON1_Bits;

/** \brief LCL Test Register */
typedef struct _Ifx_SCU_LCLTEST_Bits
{
    Ifx_UReg_32Bit LCLT0:1;           /**< \brief [0:0] LCL0 Lockstep Test - LCLT0 (w) */
    Ifx_UReg_32Bit LCLT1:1;           /**< \brief [1:1] LCL1 Lockstep Test - LCLT1 (w) */
    Ifx_UReg_32Bit LCLT2:1;           /**< \brief [2:2] LCL2 Lockstep Test - LCLT2 (w) */
    Ifx_UReg_32Bit LCLT3:1;           /**< \brief [3:3] LCL3 Lockstep Test - LCLT3 (w) */
    Ifx_UReg_32Bit reserved_4:1;      /**< \brief [4:4] \internal Reserved */
    Ifx_UReg_32Bit reserved_5:1;      /**< \brief [5:5] \internal Reserved */
    Ifx_UReg_32Bit reserved_6:10;     /**< \brief [15:6] \internal Reserved */
    Ifx_UReg_32Bit PLCLT0:1;          /**< \brief [16:16] PFI0 Lockstep Test (w) */
    Ifx_UReg_32Bit PLCLT1:1;          /**< \brief [17:17] PFI1 Lockstep Test (w) */
    Ifx_UReg_32Bit PLCLT2:1;          /**< \brief [18:18] PFI2 Lockstep Test (w) */
    Ifx_UReg_32Bit PLCLT3:1;          /**< \brief [19:19] PFI3 Lockstep Test (w) */
    Ifx_UReg_32Bit reserved_20:1;     /**< \brief [20:20] \internal Reserved */
    Ifx_UReg_32Bit reserved_21:1;     /**< \brief [21:21] \internal Reserved */
    Ifx_UReg_32Bit reserved_22:10;    /**< \brief [31:22] \internal Reserved */
} Ifx_SCU_LCLTEST_Bits;

/** \brief Manufacturer Identification Register */
typedef struct _Ifx_SCU_MANID_Bits
{
    Ifx_UReg_32Bit DEPT:5;            /**< \brief [4:0] Department Identification Number - DEPT (r) */
    Ifx_UReg_32Bit MANUF:11;          /**< \brief [15:5] Manufacturer Identification Number - MANUF (r) */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_SCU_MANID_Bits;

/** \brief ESR Output Modification Register */
typedef struct _Ifx_SCU_OMR_Bits
{
    Ifx_UReg_32Bit PS0:1;             /**< \brief [0:0] ESRx Pin Set Bit 0 - PS0 (w) */
    Ifx_UReg_32Bit PS1:1;             /**< \brief [1:1] ESRx Pin Set Bit 1 - PS1 (w) */
    Ifx_UReg_32Bit reserved_2:14;     /**< \brief [15:2] \internal Reserved */
    Ifx_UReg_32Bit PCL0:1;            /**< \brief [16:16] ESRx Pin Clear Bit 0 - PCL0 (w) */
    Ifx_UReg_32Bit PCL1:1;            /**< \brief [17:17] ESRx Pin Clear Bit 1 - PCL1 (w) */
    Ifx_UReg_32Bit reserved_18:14;    /**< \brief [31:18] \internal Reserved */
} Ifx_SCU_OMR_Bits;

/** \brief OSC Control Register */
typedef struct _Ifx_SCU_OSCCON_Bits
{
    Ifx_UReg_32Bit reserved_0:1;      /**< \brief [0:0] \internal Reserved */
    Ifx_UReg_32Bit PLLLV:1;           /**< \brief [1:1] Oscillator for PLL Valid Low Status Bit - PLLLV (rh) */
    Ifx_UReg_32Bit OSCRES:1;          /**< \brief [2:2] Oscillator Watchdog Reset - OSCRES (w) */
    Ifx_UReg_32Bit GAINSEL:2;         /**< \brief [4:3] Oscillator Gain Selection - GAINSEL (rw) */
    Ifx_UReg_32Bit MODE:2;            /**< \brief [6:5] Oscillator Mode - MODE (rw) */
    Ifx_UReg_32Bit SHBY:1;            /**< \brief [7:7] Shaper Bypass - SHBY (rw) */
    Ifx_UReg_32Bit PLLHV:1;           /**< \brief [8:8] Oscillator for PLL Valid High Status Bit - PLLHV (rh) */
    Ifx_UReg_32Bit HYSEN:1;           /**< \brief [9:9] Hysteresis Enable (rw) */
    Ifx_UReg_32Bit HYSCTL:2;          /**< \brief [11:10] Hysteresis Control (rw) */
    Ifx_UReg_32Bit AMPCTL:2;          /**< \brief [13:12] Amplitude Control (rw) */
    Ifx_UReg_32Bit reserved_14:2;     /**< \brief [15:14] \internal Reserved */
    Ifx_UReg_32Bit OSCVAL:5;          /**< \brief [20:16] OSC Frequency Value - OSCVAL (rw) */
    Ifx_UReg_32Bit reserved_21:2;     /**< \brief [22:21] \internal Reserved */
    Ifx_UReg_32Bit APREN:1;           /**< \brief [23:23] Amplitude Regulation Enable - APREN (rw) */
    Ifx_UReg_32Bit CAP0EN:1;          /**< \brief [24:24] Capacitance 0 Enable - CAP0EN (rw) */
    Ifx_UReg_32Bit CAP1EN:1;          /**< \brief [25:25] Capacitance 1 Enable - CAP1EN (rw) */
    Ifx_UReg_32Bit CAP2EN:1;          /**< \brief [26:26] Capacitance 2 Enable - CAP2EN (rw) */
    Ifx_UReg_32Bit CAP3EN:1;          /**< \brief [27:27] Capacitance 3 Enable - CAP3EN (rw) */
    Ifx_UReg_32Bit reserved_28:4;     /**< \brief [31:28] \internal Reserved */
} Ifx_SCU_OSCCON_Bits;

/** \brief ESR Output Register */
typedef struct _Ifx_SCU_OUT_Bits
{
    Ifx_UReg_32Bit P0:1;              /**< \brief [0:0] Output Bit 0 - P0 (rwh) */
    Ifx_UReg_32Bit P1:1;              /**< \brief [1:1] Output Bit 1 - P1 (rwh) */
    Ifx_UReg_32Bit reserved_2:30;     /**< \brief [31:2] \internal Reserved */
} Ifx_SCU_OUT_Bits;

/** \brief Overlay Control Register */
typedef struct _Ifx_SCU_OVCCON_Bits
{
    Ifx_UReg_32Bit CSEL0:1;           /**< \brief [0:0] CPU Select 0 - CSEL0 (w) */
    Ifx_UReg_32Bit CSEL1:1;           /**< \brief [1:1] CPU Select 1 (If product has CPU1) - CSEL1 (w) */
    Ifx_UReg_32Bit CSEL2:1;           /**< \brief [2:2] CPU Select 2 (If product has CPU2) - CSEL2 (w) */
    Ifx_UReg_32Bit CSEL3:1;           /**< \brief [3:3] CPU Select 3 (If product has CPU3) - CSEL3 (w) */
    Ifx_UReg_32Bit reserved_4:1;      /**< \brief [4:4] \internal Reserved */
    Ifx_UReg_32Bit reserved_5:1;      /**< \brief [5:5] \internal Reserved */
    Ifx_UReg_32Bit reserved_6:10;     /**< \brief [15:6] \internal Reserved */
    Ifx_UReg_32Bit OVSTRT:1;          /**< \brief [16:16] Overlay Start - OVSTRT (w) */
    Ifx_UReg_32Bit OVSTP:1;           /**< \brief [17:17] Overlay Stop - OVSTP (w) */
    Ifx_UReg_32Bit DCINVAL:1;         /**< \brief [18:18] Data Cache Invalidate - DCINVAL (w) */
    Ifx_UReg_32Bit reserved_19:5;     /**< \brief [23:19] \internal Reserved */
    Ifx_UReg_32Bit OVCONF:1;          /**< \brief [24:24] Overlay Configured - OVCONF (rw) */
    Ifx_UReg_32Bit POVCONF:1;         /**< \brief [25:25] Write Protection for OVCONF - POVCONF (w) */
    Ifx_UReg_32Bit reserved_26:6;     /**< \brief [31:26] \internal Reserved */
} Ifx_SCU_OVCCON_Bits;

/** \brief Overlay Enable Register */
typedef struct _Ifx_SCU_OVCENABLE_Bits
{
    Ifx_UReg_32Bit OVEN0:1;           /**< \brief [0:0] Overlay Enable 0 - OVEN0 (rw) */
    Ifx_UReg_32Bit OVEN1:1;           /**< \brief [1:1] Overlay Enable 1 (If product has CPU1) - OVEN1 (rw) */
    Ifx_UReg_32Bit OVEN2:1;           /**< \brief [2:2] Overlay Enable 2 (If product has CPU2) - OVEN2 (rw) */
    Ifx_UReg_32Bit OVEN3:1;           /**< \brief [3:3] Overlay Enable 3 (If product has CPU3) - OVEN3 (rw) */
    Ifx_UReg_32Bit reserved_4:1;      /**< \brief [4:4] \internal Reserved */
    Ifx_UReg_32Bit reserved_5:1;      /**< \brief [5:5] \internal Reserved */
    Ifx_UReg_32Bit reserved_6:26;     /**< \brief [31:6] \internal Reserved */
} Ifx_SCU_OVCENABLE_Bits;

/** \brief Pad Disable Control Register */
typedef struct _Ifx_SCU_PDISC_Bits
{
    Ifx_UReg_32Bit PDIS0:1;           /**< \brief [0:0] Pad Disable for ESR Pin 0 - PDIS0 (rw) */
    Ifx_UReg_32Bit PDIS1:1;           /**< \brief [1:1] Pad Disable for ESR Pin 1 - PDIS1 (rw) */
    Ifx_UReg_32Bit reserved_2:30;     /**< \brief [31:2] \internal Reserved */
} Ifx_SCU_PDISC_Bits;

/** \brief ESR Pad Driver Mode Register */
typedef struct _Ifx_SCU_PDR_Bits
{
    Ifx_UReg_32Bit PD0:2;             /**< \brief [1:0] Pad Driver Mode for ESR Pins 0 - PD0 (rw) */
    Ifx_UReg_32Bit PL0:2;             /**< \brief [3:2] Pad Level Selection for ESR Pins 0 - PL0 (rw) */
    Ifx_UReg_32Bit PD1:2;             /**< \brief [5:4] Pad Driver Mode for ESR Pins 1 - PD1 (rw) */
    Ifx_UReg_32Bit PL1:2;             /**< \brief [7:6] Pad Level Selection for ESR Pins 1 - PL1 (rw) */
    Ifx_UReg_32Bit reserved_8:24;     /**< \brief [31:8] \internal Reserved */
} Ifx_SCU_PDR_Bits;

/** \brief Pattern Detection Result Register */
typedef struct _Ifx_SCU_PDRR_Bits
{
    Ifx_UReg_32Bit PDR0:1;            /**< \brief [0:0] Pattern Detection Result of Channel 0 - PDR0 (rh) */
    Ifx_UReg_32Bit PDR1:1;            /**< \brief [1:1] Pattern Detection Result of Channel 1 - PDR1 (rh) */
    Ifx_UReg_32Bit PDR2:1;            /**< \brief [2:2] Pattern Detection Result of Channel 2 - PDR2 (rh) */
    Ifx_UReg_32Bit PDR3:1;            /**< \brief [3:3] Pattern Detection Result of Channel 3 - PDR3 (rh) */
    Ifx_UReg_32Bit PDR4:1;            /**< \brief [4:4] Pattern Detection Result of Channel 4 - PDR4 (rh) */
    Ifx_UReg_32Bit PDR5:1;            /**< \brief [5:5] Pattern Detection Result of Channel 5 - PDR5 (rh) */
    Ifx_UReg_32Bit PDR6:1;            /**< \brief [6:6] Pattern Detection Result of Channel 6 - PDR6 (rh) */
    Ifx_UReg_32Bit PDR7:1;            /**< \brief [7:7] Pattern Detection Result of Channel 7 - PDR7 (rh) */
    Ifx_UReg_32Bit reserved_8:24;     /**< \brief [31:8] \internal Reserved */
} Ifx_SCU_PDRR_Bits;

/** \brief Peripheral PLL Configuration 0 Register */
typedef struct _Ifx_SCU_PERPLLCON0_Bits
{
    Ifx_UReg_32Bit DIVBY:1;           /**< \brief [0:0] Divider Bypass - DIVBY (rw) */
    Ifx_UReg_32Bit reserved_1:8;      /**< \brief [8:1] \internal Reserved */
    Ifx_UReg_32Bit NDIV:7;            /**< \brief [15:9] N-Divider Value - NDIV (rw) */
    Ifx_UReg_32Bit PLLPWD:1;          /**< \brief [16:16] Peripheral PLL Power Saving Mode - PLLPWD (rw) */
    Ifx_UReg_32Bit reserved_17:1;     /**< \brief [17:17] \internal Reserved */
    Ifx_UReg_32Bit RESLD:1;           /**< \brief [18:18] Restart DCO Lock Detection - RESLD (w) */
    Ifx_UReg_32Bit reserved_19:5;     /**< \brief [23:19] \internal Reserved */
    Ifx_UReg_32Bit PDIV:3;            /**< \brief [26:24] P-Divider Value - PDIV (rw) */
    Ifx_UReg_32Bit reserved_27:5;     /**< \brief [31:27] \internal Reserved */
} Ifx_SCU_PERPLLCON0_Bits;

/** \brief Peripheral PLL Configuration 1 Register */
typedef struct _Ifx_SCU_PERPLLCON1_Bits
{
    Ifx_UReg_32Bit K2DIV:3;           /**< \brief [2:0] K2-Divider Value - K2DIV (rw) */
    Ifx_UReg_32Bit reserved_3:5;      /**< \brief [7:3] \internal Reserved */
    Ifx_UReg_32Bit K3DIV:3;           /**< \brief [10:8] K3-Divider Value - K3DIV (rw) */
    Ifx_UReg_32Bit reserved_11:21;    /**< \brief [31:11] \internal Reserved */
} Ifx_SCU_PERPLLCON1_Bits;

/** \brief Peripheral PLL Status Register */
typedef struct _Ifx_SCU_PERPLLSTAT_Bits
{
    Ifx_UReg_32Bit reserved_0:1;      /**< \brief [0:0] \internal Reserved */
    Ifx_UReg_32Bit PWDSTAT:1;         /**< \brief [1:1] Peripheral PLL Power-saving Mode Status - PWDSTAT (rh) */
    Ifx_UReg_32Bit LOCK:1;            /**< \brief [2:2] Peripheral PLL Lock Status - LOCK (rh) */
    Ifx_UReg_32Bit reserved_3:1;      /**< \brief [3:3] \internal Reserved */
    Ifx_UReg_32Bit K3RDY:1;           /**< \brief [4:4] K3 Divider Ready Status - K3RDY (rh) */
    Ifx_UReg_32Bit K2RDY:1;           /**< \brief [5:5] K2 Divider Ready Status - K2RDY (rh) */
    Ifx_UReg_32Bit reserved_6:1;      /**< \brief [6:6] \internal Reserved */
    Ifx_UReg_32Bit reserved_7:25;     /**< \brief [31:7] \internal Reserved */
} Ifx_SCU_PERPLLSTAT_Bits;

/** \brief Power Management Control and Status Register */
typedef struct _Ifx_SCU_PMCSR0_Bits
{
    Ifx_UReg_32Bit REQSLP:2;          /**< \brief [1:0] Idle Mode and Sleep Mode Request - REQSLP (rwh) */
    Ifx_UReg_32Bit reserved_2:6;      /**< \brief [7:2] \internal Reserved */
    Ifx_UReg_32Bit PMST:3;            /**< \brief [10:8] Power management Status - PMST (rh) */
    Ifx_UReg_32Bit reserved_11:21;    /**< \brief [31:11] \internal Reserved */
} Ifx_SCU_PMCSR0_Bits;

/** \brief Power Management Control and Status Register */
typedef struct _Ifx_SCU_PMCSR1_Bits
{
    Ifx_UReg_32Bit REQSLP:2;          /**< \brief [1:0] Idle Mode and Sleep Mode Request - REQSLP (rwh) */
    Ifx_UReg_32Bit reserved_2:6;      /**< \brief [7:2] \internal Reserved */
    Ifx_UReg_32Bit PMST:3;            /**< \brief [10:8] Power management Status - PMST (rh) */
    Ifx_UReg_32Bit reserved_11:21;    /**< \brief [31:11] \internal Reserved */
} Ifx_SCU_PMCSR1_Bits;

/** \brief Power Management Control and Status Register */
typedef struct _Ifx_SCU_PMCSR2_Bits
{
    Ifx_UReg_32Bit REQSLP:2;          /**< \brief [1:0] Idle Mode and Sleep Mode Request - REQSLP (rwh) */
    Ifx_UReg_32Bit reserved_2:6;      /**< \brief [7:2] \internal Reserved */
    Ifx_UReg_32Bit PMST:3;            /**< \brief [10:8] Power management Status - PMST (rh) */
    Ifx_UReg_32Bit reserved_11:21;    /**< \brief [31:11] \internal Reserved */
} Ifx_SCU_PMCSR2_Bits;

/** \brief Power Management Control and Status Register */
typedef struct _Ifx_SCU_PMCSR3_Bits
{
    Ifx_UReg_32Bit REQSLP:2;          /**< \brief [1:0] Idle Mode and Sleep Mode Request - REQSLP (rwh) */
    Ifx_UReg_32Bit reserved_2:6;      /**< \brief [7:2] \internal Reserved */
    Ifx_UReg_32Bit PMST:3;            /**< \brief [10:8] Power management Status - PMST (rh) */
    Ifx_UReg_32Bit reserved_11:21;    /**< \brief [31:11] \internal Reserved */
} Ifx_SCU_PMCSR3_Bits;

/** \brief Power Management Control and Status Register */
typedef struct _Ifx_SCU_PMCSR4_Bits
{
    Ifx_UReg_32Bit REQSLP:2;          /**< \brief [1:0] Idle Mode and Sleep Mode Request - REQSLP (rwh) */
    Ifx_UReg_32Bit reserved_2:6;      /**< \brief [7:2] \internal Reserved */
    Ifx_UReg_32Bit PMST:3;            /**< \brief [10:8] Power management Status - PMST (rh) */
    Ifx_UReg_32Bit reserved_11:21;    /**< \brief [31:11] \internal Reserved */
} Ifx_SCU_PMCSR4_Bits;

/** \brief Power Management Control and Status Register */
typedef struct _Ifx_SCU_PMCSR5_Bits
{
    Ifx_UReg_32Bit REQSLP:2;          /**< \brief [1:0] Idle Mode and Sleep Mode Request - REQSLP (rwh) */
    Ifx_UReg_32Bit reserved_2:6;      /**< \brief [7:2] \internal Reserved */
    Ifx_UReg_32Bit PMST:3;            /**< \brief [10:8] Power management Status - PMST (rh) */
    Ifx_UReg_32Bit reserved_11:21;    /**< \brief [31:11] \internal Reserved */
} Ifx_SCU_PMCSR5_Bits;

/** \brief Power Management Status Register 0 */
typedef struct _Ifx_SCU_PMSTAT0_Bits
{
    Ifx_UReg_32Bit CPU0:1;            /**< \brief [0:0] CPU0 Status - CPU0 (rh) */
    Ifx_UReg_32Bit CPU1:1;            /**< \brief [1:1] CPU1 Status - CPU1 (rh) */
    Ifx_UReg_32Bit CPU2:1;            /**< \brief [2:2] CPU2 Status - CPU2 (rh) */
    Ifx_UReg_32Bit CPU3:1;            /**< \brief [3:3] CPU3 Status - CPU3 (rh) */
    Ifx_UReg_32Bit CPU4:1;            /**< \brief [4:4] CPU4 Status - CPU4 (rh) */
    Ifx_UReg_32Bit CPU5:1;            /**< \brief [5:5] CPU5 Status - CPU5 (rh) */
    Ifx_UReg_32Bit reserved_6:10;     /**< \brief [15:6] \internal Reserved */
    Ifx_UReg_32Bit CPU0LS:1;          /**< \brief [16:16] CPU0LS Status - CPU0LS (rh) */
    Ifx_UReg_32Bit CPU1LS:1;          /**< \brief [17:17] CPU1LS Status - CPU1LS (rh) */
    Ifx_UReg_32Bit CPU2LS:1;          /**< \brief [18:18] CPU2LS Status - CPU2LS (rh) */
    Ifx_UReg_32Bit CPU3LS:1;          /**< \brief [19:19] CPU3LS Status - CPU3LS (rh) */
    Ifx_UReg_32Bit reserved_20:12;    /**< \brief [31:20] \internal Reserved */
} Ifx_SCU_PMSTAT0_Bits;

/** \brief Standby and Wake-up Control Register 1 */
typedef struct _Ifx_SCU_PMSWCR1_Bits
{
    Ifx_UReg_32Bit reserved_0:8;      /**< \brief [7:0] \internal Reserved */
    Ifx_UReg_32Bit CPUIDLSEL:3;       /**< \brief [10:8] CPU selection for Idle mode - CPUIDLSEL (rw) */
    Ifx_UReg_32Bit reserved_11:1;     /**< \brief [11:11] \internal Reserved */
    Ifx_UReg_32Bit IRADIS:1;          /**< \brief [12:12] Idle-Request-Acknowledge Sequence Disable - IRADIS (rw) */
    Ifx_UReg_32Bit reserved_13:11;    /**< \brief [23:13] \internal Reserved */
    Ifx_UReg_32Bit CPUSEL:3;          /**< \brief [26:24] CPU selection for Sleep and Standby mode - CPUSEL (rw) */
    Ifx_UReg_32Bit STBYEVEN:1;        /**< \brief [27:27] Standby Entry Event configuration enable - STBYEVEN (w) */
    Ifx_UReg_32Bit STBYEV:3;          /**< \brief [30:28] Standby Entry Event Configuration - STBYEV (rw) */
    Ifx_UReg_32Bit reserved_31:1;     /**< \brief [31:31] \internal Reserved */
} Ifx_SCU_PMSWCR1_Bits;

/** \brief Power Management Transition Control and Status Register 0 */
typedef struct _Ifx_SCU_PMTRCSR0_Bits
{
    Ifx_UReg_32Bit LJTEN:1;           /**< \brief [0:0] Load Jump Timer Enable - LJTEN (rw) */
    Ifx_UReg_32Bit LJTOVEN:1;         /**< \brief [1:1] Load Jump Timer Overflow Enable - LJTOVEN (rw) */
    Ifx_UReg_32Bit LJTOVIEN:1;        /**< \brief [2:2] Load Jump Timer Overflow Interrupt Enable - LJTOVIEN (rw) */
    Ifx_UReg_32Bit LJTSTRT:1;         /**< \brief [3:3] Load Jump Timer Start - LJTSTRT (rwh) */
    Ifx_UReg_32Bit LJTSTP:1;          /**< \brief [4:4] Load Jump Timer Stop - LJTSTP (rw) */
    Ifx_UReg_32Bit LJTCLR:1;          /**< \brief [5:5] Load Jump Timer Clear - LJTCLR (w) */
    Ifx_UReg_32Bit reserved_6:6;      /**< \brief [11:6] \internal Reserved */
    Ifx_UReg_32Bit SDSTEP:4;          /**< \brief [15:12] Droop Voltage Step(vdroop_step_i) - SDSTEP (rw) */
    Ifx_UReg_32Bit VDTEN:1;           /**< \brief [16:16] Voltage Droop Timer Enable - VDTEN (rw) */
    Ifx_UReg_32Bit VDTOVEN:1;         /**< \brief [17:17] Voltage Droop Timer Overflow Enable - VDTOVEN (rw) */
    Ifx_UReg_32Bit VDTOVIEN:1;        /**< \brief [18:18] Voltage Droop Timer Overflow Interrupt Enable - VDTOVIEN (rw) */
    Ifx_UReg_32Bit VDTSTRT:1;         /**< \brief [19:19] Voltage Droop Timer Start - VDTSTRT (rwh) */
    Ifx_UReg_32Bit VDTSTP:1;          /**< \brief [20:20] Voltage Droop Timer Stop - VDTSTP (rw) */
    Ifx_UReg_32Bit VDTCLR:1;          /**< \brief [21:21] Voltage Droop Timer Clear - VDTCLR (w) */
    Ifx_UReg_32Bit reserved_22:7;     /**< \brief [28:22] \internal Reserved */
    Ifx_UReg_32Bit LPSLPEN:1;         /**< \brief [29:29] EVRC Low Power Mode activation on a Sleep Request - LPSLPEN (rw) */
    Ifx_UReg_32Bit reserved_30:2;     /**< \brief [31:30] \internal Reserved */
} Ifx_SCU_PMTRCSR0_Bits;

/** \brief Power Management Transition Control and Status Register 1 */
typedef struct _Ifx_SCU_PMTRCSR1_Bits
{
    Ifx_UReg_32Bit LJTCV:16;          /**< \brief [15:0] Load Jump Timer Compare Setpoint Value - LJTCV (rw) */
    Ifx_UReg_32Bit VDTCV:10;          /**< \brief [25:16] Voltage Droop Timer Compare Setpoint Value - VDTCV (rw) */
    Ifx_UReg_32Bit reserved_26:6;     /**< \brief [31:26] \internal Reserved */
} Ifx_SCU_PMTRCSR1_Bits;

/** \brief Power Management Transition Control and Status Register 2 */
typedef struct _Ifx_SCU_PMTRCSR2_Bits
{
    Ifx_UReg_32Bit LDJMPREQ:2;        /**< \brief [1:0] Load Jump Request - LDJMPREQ (rwh) */
    Ifx_UReg_32Bit reserved_2:2;      /**< \brief [3:2] \internal Reserved */
    Ifx_UReg_32Bit LJTRUN:2;          /**< \brief [5:4] Load Jump Timer Run Status - LJTRUN (rh) */
    Ifx_UReg_32Bit reserved_6:2;      /**< \brief [7:6] \internal Reserved */
    Ifx_UReg_32Bit LJTOV:1;           /**< \brief [8:8] Load Jump Timer Overflow Status - LJTOV (rh) */
    Ifx_UReg_32Bit reserved_9:3;      /**< \brief [11:9] \internal Reserved */
    Ifx_UReg_32Bit LJTOVCLR:1;        /**< \brief [12:12] Load Jump Timer Overflow Status Clear - LJTOVCLR (w) */
    Ifx_UReg_32Bit reserved_13:3;     /**< \brief [15:13] \internal Reserved */
    Ifx_UReg_32Bit LJTCNT:16;         /**< \brief [31:16] Load Jump Timer Value - LJTCNT (rh) */
} Ifx_SCU_PMTRCSR2_Bits;

/** \brief Power Management Transition Control and Status Register 3 */
typedef struct _Ifx_SCU_PMTRCSR3_Bits
{
    Ifx_UReg_32Bit VDROOPREQ:2;       /**< \brief [1:0] Voltage Droop Request - VDROOPREQ (rwh) */
    Ifx_UReg_32Bit reserved_2:2;      /**< \brief [3:2] \internal Reserved */
    Ifx_UReg_32Bit VDTRUN:2;          /**< \brief [5:4] Voltage Droop Timer Run Status - VDTRUN (rh) */
    Ifx_UReg_32Bit reserved_6:2;      /**< \brief [7:6] \internal Reserved */
    Ifx_UReg_32Bit VDTOV:1;           /**< \brief [8:8] Voltage Droop Timer Overflow Status - VDTOV (rh) */
    Ifx_UReg_32Bit reserved_9:3;      /**< \brief [11:9] \internal Reserved */
    Ifx_UReg_32Bit VDTOVCLR:1;        /**< \brief [12:12] Voltage Droop Timer Overflow Status Clear - VDTOVCLR (w) */
    Ifx_UReg_32Bit reserved_13:3;     /**< \brief [15:13] \internal Reserved */
    Ifx_UReg_32Bit VDTCNT:10;         /**< \brief [25:16] Voltage Droop Timer Value - VDTCNT (rh) */
    Ifx_UReg_32Bit reserved_26:6;     /**< \brief [31:26] \internal Reserved */
} Ifx_SCU_PMTRCSR3_Bits;

/** \brief Reset Configuration Register */
typedef struct _Ifx_SCU_RSTCON_Bits
{
    Ifx_UReg_32Bit ESR0:2;            /**< \brief [1:0] ESR0 Reset Request Trigger Reset Configuration - ESR0 (rw) */
    Ifx_UReg_32Bit ESR1:2;            /**< \brief [3:2] ESR1 Reset Request Trigger Reset Configuration - ESR1 (rw) */
    Ifx_UReg_32Bit reserved_4:2;      /**< \brief [5:4] \internal Reserved */
    Ifx_UReg_32Bit SMU:2;             /**< \brief [7:6] SMU Reset Request Trigger Reset Configuration - SMU (rw) */
    Ifx_UReg_32Bit SW:2;              /**< \brief [9:8] SW Reset Request Trigger Reset Configuration - SW (rw) */
    Ifx_UReg_32Bit STM0:2;            /**< \brief [11:10] STM0 Reset Request Trigger Reset Configuration - STM0 (rw) */
    Ifx_UReg_32Bit STM1:2;            /**< \brief [13:12] STM1 Reset Request Trigger Reset Configuration (If Product has STM1) - STM1 (rw) */
    Ifx_UReg_32Bit STM2:2;            /**< \brief [15:14] STM2 Reset Request Trigger Reset Configuration (If Product has STM2) - STM2 (rw) */
    Ifx_UReg_32Bit STM3:2;            /**< \brief [17:16] STM3 Reset Request Trigger Reset Configuration (If Product has STM3) - STM3 (rw) */
    Ifx_UReg_32Bit reserved_18:2;     /**< \brief [19:18] \internal Reserved */
    Ifx_UReg_32Bit reserved_20:2;     /**< \brief [21:20] \internal Reserved */
    Ifx_UReg_32Bit reserved_22:10;    /**< \brief [31:22] \internal Reserved */
} Ifx_SCU_RSTCON_Bits;

/** \brief Additional Reset Control Register */
typedef struct _Ifx_SCU_RSTCON2_Bits
{
    Ifx_UReg_32Bit FRTO:1;            /**< \brief [0:0] Force Reset Timeout - FRTO (rw) */
    Ifx_UReg_32Bit CLRC:1;            /**< \brief [1:1] Clear Cold Reset Status - CLRC (w) */
    Ifx_UReg_32Bit reserved_2:1;      /**< \brief [2:2] \internal Reserved */
    Ifx_UReg_32Bit reserved_3:1;      /**< \brief [3:3] \internal Reserved */
    Ifx_UReg_32Bit reserved_4:1;      /**< \brief [4:4] \internal Reserved */
    Ifx_UReg_32Bit reserved_5:1;      /**< \brief [5:5] \internal Reserved */
    Ifx_UReg_32Bit reserved_6:1;      /**< \brief [6:6] \internal Reserved */
    Ifx_UReg_32Bit CSSX:6;            /**< \brief [12:7] CPU x Shutdown State Reached - CSSx (rh) */
    Ifx_UReg_32Bit reserved_13:1;     /**< \brief [13:13] \internal Reserved */
    Ifx_UReg_32Bit reserved_14:1;     /**< \brief [14:14] \internal Reserved */
    Ifx_UReg_32Bit reserved_15:1;     /**< \brief [15:15] \internal Reserved */
    Ifx_UReg_32Bit USRINFO:16;        /**< \brief [31:16] User Information - USRINFO (rw) */
} Ifx_SCU_RSTCON2_Bits;

/** \brief Reset Configuration Register 3 */
typedef struct _Ifx_SCU_RSTCON3_Bits
{
    Ifx_UReg_32Bit reserved_0:32;     /**< \brief [31:0] \internal Reserved */
} Ifx_SCU_RSTCON3_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_SCU_RSTSTAT_Bits
{
    Ifx_UReg_32Bit ESR0:1;            /**< \brief [0:0] Reset Request Trigger Reset Status for ESR0 - ESR0 (rh) */
    Ifx_UReg_32Bit ESR1:1;            /**< \brief [1:1] Reset Request Trigger Reset Status for ESR1 - ESR1 (rh) */
    Ifx_UReg_32Bit reserved_2:1;      /**< \brief [2:2] \internal Reserved */
    Ifx_UReg_32Bit SMU:1;             /**< \brief [3:3] Reset Request Trigger Reset Status for SMU - SMU (rh) */
    Ifx_UReg_32Bit SW:1;              /**< \brief [4:4] Reset Request Trigger Reset Status for SW - SW (rh) */
    Ifx_UReg_32Bit STM0:1;            /**< \brief [5:5] Reset Request Trigger Reset Status for STM0 Compare Match - STM0 (rh) */
    Ifx_UReg_32Bit STM1:1;            /**< \brief [6:6] Reset Request Trigger Reset Status for STM1 Compare Match (If Product has STM1) - STM1 (rh) */
    Ifx_UReg_32Bit STM2:1;            /**< \brief [7:7] Reset Request Trigger Reset Status for STM2 Compare Match (If Product has STM2) - STM2 (rh) */
    Ifx_UReg_32Bit STM3:1;            /**< \brief [8:8] Reset Request Trigger Reset Status for STM3 Compare Match (If Product has STM3) - STM3 (rh) */
    Ifx_UReg_32Bit reserved_9:1;      /**< \brief [9:9] \internal Reserved */
    Ifx_UReg_32Bit reserved_10:1;     /**< \brief [10:10] \internal Reserved */
    Ifx_UReg_32Bit reserved_11:5;     /**< \brief [15:11] \internal Reserved */
    Ifx_UReg_32Bit PORST:1;           /**< \brief [16:16] Reset Request Trigger Reset Status for PORST - PORST (rh) */
    Ifx_UReg_32Bit reserved_17:1;     /**< \brief [17:17] \internal Reserved */
    Ifx_UReg_32Bit CB0:1;             /**< \brief [18:18] Reset Request Trigger Reset Status for Cerberus System Reset - CB0 (rh) */
    Ifx_UReg_32Bit CB1:1;             /**< \brief [19:19] Reset Request Trigger Reset Status for Cerberus Debug Reset - CB1 (rh) */
    Ifx_UReg_32Bit CB3:1;             /**< \brief [20:20] Reset Request Trigger Reset Status for Cerberus Application Reset - CB3 (rh) */
    Ifx_UReg_32Bit reserved_21:1;     /**< \brief [21:21] \internal Reserved */
    Ifx_UReg_32Bit reserved_22:1;     /**< \brief [22:22] \internal Reserved */
    Ifx_UReg_32Bit EVRC:1;            /**< \brief [23:23] Reset Request Trigger Reset Status for EVRC - EVRC (rh) */
    Ifx_UReg_32Bit EVR33:1;           /**< \brief [24:24] Reset Request Trigger Reset Status for EVR33 - EVR33 (rh) */
    Ifx_UReg_32Bit SWD:1;             /**< \brief [25:25] Reset Request Trigger Reset Status for Supply Watchdog (SWD) - SWD (rh) */
    Ifx_UReg_32Bit HSMS:1;            /**< \brief [26:26] Reset Request Trigger Reset Status for HSM System Reset (HSM S) - HSMS (rh) */
    Ifx_UReg_32Bit HSMA:1;            /**< \brief [27:27] Reset Request Trigger Reset Status for HSM Application Reset (HSM A) - HSMA (rh) */
    Ifx_UReg_32Bit STBYR:1;           /**< \brief [28:28] Reset Request Trigger Reset Status for Standby Regulator Watchdog (STBYR) - STBYR (rh) */
    Ifx_UReg_32Bit LBPORST:1;         /**< \brief [29:29] LBIST termination due to PORST (rh) */
    Ifx_UReg_32Bit LBTERM:1;          /**< \brief [30:30] LBIST was properly terminated (rh) */
    Ifx_UReg_32Bit reserved_31:1;     /**< \brief [31:31] \internal Reserved */
} Ifx_SCU_RSTSTAT_Bits;

/** \brief Safety ENDINIT Control Register 0 */
typedef struct _Ifx_SCU_SEICON0_Bits
{
    unsigned __sfrbit32 reserved_0:1;    /**< \brief [0:0] \internal Reserved */
    unsigned __sfrbit32 ENDINIT:1;       /**< \brief [1:1] End-of-Initialization Control Bit - ENDINIT (rwh) */
    unsigned __sfrbit32 EPW:14;          /**< \brief [15:2] User-Definable Safety ENDINIT Password Field - EPW (rwh) */
    unsigned __sfrbit32 REL:16;          /**< \brief [31:16] Reload Value for the Safety  ENDINIT Timeout Counter - REL (r) */
} Ifx_SCU_SEICON0_Bits;

/** \brief Safety ENDINIT Control Register 1 */
typedef struct _Ifx_SCU_SEICON1_Bits
{
    Ifx_UReg_32Bit reserved_0:1;      /**< \brief [0:0] \internal Reserved */
    Ifx_UReg_32Bit reserved_1:1;      /**< \brief [1:1] \internal Reserved */
    Ifx_UReg_32Bit IR0:1;             /**< \brief [2:2] Input Frequency Request Control - IR1,IR0 (rw) */
    Ifx_UReg_32Bit DR:1;              /**< \brief [3:3] Disable Request Control Bit - DR (rw) */
    Ifx_UReg_32Bit reserved_4:1;      /**< \brief [4:4] \internal Reserved */
    Ifx_UReg_32Bit IR1:1;             /**< \brief [5:5] Input Frequency Request Control - IR1,IR0 (rw) */
    Ifx_UReg_32Bit reserved_6:26;     /**< \brief [31:6] \internal Reserved */
} Ifx_SCU_SEICON1_Bits;

/** \brief Safety ENDINIT Timeout Status Register */
typedef struct _Ifx_SCU_SEISR_Bits
{
    Ifx_UReg_32Bit AE:1;              /**< \brief [0:0] SEICON0 Access Error Status Flag - AE (rh) */
    Ifx_UReg_32Bit OE:1;              /**< \brief [1:1] SEI Timeout Overflow Error Status Flag - OE (rh) */
    Ifx_UReg_32Bit IS0:1;             /**< \brief [2:2] SEI Timeout Input Clock Status - IS0, IS1 (rh) */
    Ifx_UReg_32Bit DS:1;              /**< \brief [3:3] SEI Enable/Disable Status Flag - DS (rh) */
    Ifx_UReg_32Bit TO:1;              /**< \brief [4:4] SEI Time-Out Mode Flag - TO (rh) */
    Ifx_UReg_32Bit IS1:1;             /**< \brief [5:5] SEI Timeout Input Clock Status - IS0, IS1 (rh) */
    Ifx_UReg_32Bit reserved_6:10;     /**< \brief [15:6] \internal Reserved */
    Ifx_UReg_32Bit TIM:16;            /**< \brief [31:16] Timer Value - TIM (rh) */
} Ifx_SCU_SEISR_Bits;

/** \brief Start-up Configuration Register */
typedef struct _Ifx_SCU_STCON_Bits
{
    Ifx_UReg_32Bit reserved_0:13;     /**< \brief [12:0] \internal Reserved */
    Ifx_UReg_32Bit SFCBAE:1;          /**< \brief [13:13] Set Flash Config. Sector Access Enable - SFCBAE (w) */
    Ifx_UReg_32Bit CFCBAE:1;          /**< \brief [14:14] Clear Flash Config. Sector Access Enable - CFCBAE (w) */
    Ifx_UReg_32Bit STP:1;             /**< \brief [15:15] Start-up Protection Setting - STP (rwh) */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_SCU_STCON_Bits;

/** \brief Start-up Memory Register 1 */
typedef struct _Ifx_SCU_STMEM1_Bits
{
    Ifx_UReg_32Bit MEM:32;            /**< \brief [31:0] Memory - MEM (rw) */
} Ifx_SCU_STMEM1_Bits;

/** \brief Start-up Memory Register 2 */
typedef struct _Ifx_SCU_STMEM2_Bits
{
    Ifx_UReg_32Bit MEM:32;            /**< \brief [31:0] Memory - MEM (rw) */
} Ifx_SCU_STMEM2_Bits;

/** \brief Start-up Memory Register 3 */
typedef struct _Ifx_SCU_STMEM3_Bits
{
    Ifx_UReg_32Bit MEM:32;            /**< \brief [31:0] Memory - MEM (rw) */
} Ifx_SCU_STMEM3_Bits;

/** \brief Start-up Memory Register 4 */
typedef struct _Ifx_SCU_STMEM4_Bits
{
    Ifx_UReg_32Bit MEM:32;            /**< \brief [31:0] Memory - MEM (rw) */
} Ifx_SCU_STMEM4_Bits;

/** \brief Start-up Memory Register 5 */
typedef struct _Ifx_SCU_STMEM5_Bits
{
    Ifx_UReg_32Bit MEM:32;            /**< \brief [31:0] Memory - MEM (rw) */
} Ifx_SCU_STMEM5_Bits;

/** \brief Start-up Memory Register 6 */
typedef struct _Ifx_SCU_STMEM6_Bits
{
    Ifx_UReg_32Bit MEM:32;            /**< \brief [31:0] Memory - MEM (rw) */
} Ifx_SCU_STMEM6_Bits;

/** \brief Start-up Status Register */
typedef struct _Ifx_SCU_STSTAT_Bits
{
    Ifx_UReg_32Bit HWCFG:8;           /**< \brief [7:0] Hardware Configuration Setting - HWCFG (rh) */
    Ifx_UReg_32Bit FTM:7;             /**< \brief [14:8] Firmware Test Setting - FTM (rh) */
    Ifx_UReg_32Bit MODE:1;            /**< \brief [15:15] MODE - MODE (rh) */
    Ifx_UReg_32Bit FCBAE:1;           /**< \brief [16:16] Flash Config. Sector Access Enable - FCBAE (rh) */
    Ifx_UReg_32Bit LUDIS:1;           /**< \brief [17:17] Latch Update Disable - LUDIS (rh) */
    Ifx_UReg_32Bit reserved_18:1;     /**< \brief [18:18] \internal Reserved */
    Ifx_UReg_32Bit TRSTL:1;           /**< \brief [19:19] TRSTL Status - TRSTL (rh) */
    Ifx_UReg_32Bit SPDEN:1;           /**< \brief [20:20] Single Pin DAP Mode Enable - SPDEN (rh) */
    Ifx_UReg_32Bit reserved_21:1;     /**< \brief [21:21] \internal Reserved */
    Ifx_UReg_32Bit reserved_22:1;     /**< \brief [22:22] \internal Reserved */
    Ifx_UReg_32Bit reserved_23:1;     /**< \brief [23:23] \internal Reserved */
    Ifx_UReg_32Bit RAMINT:1;          /**< \brief [24:24] RAM Content Security Integrity - RAMINT (rh) */
    Ifx_UReg_32Bit reserved_25:3;     /**< \brief [27:25] \internal Reserved */
    Ifx_UReg_32Bit reserved_28:4;     /**< \brief [31:28] \internal Reserved */
} Ifx_SCU_STSTAT_Bits;

/** \brief Address Map Control Register */
typedef struct _Ifx_SCU_SWAPCTRL_Bits
{
    Ifx_UReg_32Bit ADDRCFG:2;         /**< \brief [1:0] Address Configuration (rw) */
    Ifx_UReg_32Bit SPARE:14;          /**< \brief [15:2] Spare address configuration registers (rw) */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_SCU_SWAPCTRL_Bits;

/** \brief Software Reset Configuration Register */
typedef struct _Ifx_SCU_SWRSTCON_Bits
{
    Ifx_UReg_32Bit reserved_0:1;      /**< \brief [0:0] \internal Reserved */
    Ifx_UReg_32Bit SWRSTREQ:1;        /**< \brief [1:1] Software Reset Request - SWRSTREQ (w) */
    Ifx_UReg_32Bit reserved_2:6;      /**< \brief [7:2] \internal Reserved */
    Ifx_UReg_32Bit reserved_8:8;      /**< \brief [15:8] \internal Reserved */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_SCU_SWRSTCON_Bits;

/** \brief System Control Register */
typedef struct _Ifx_SCU_SYSCON_Bits
{
    Ifx_UReg_32Bit CCTRIG0:1;         /**< \brief [0:0] Capture Compare Trigger 0 - CCTRIG0 (rw) */
    Ifx_UReg_32Bit reserved_1:1;      /**< \brief [1:1] \internal Reserved */
    Ifx_UReg_32Bit RAMINTM:2;         /**< \brief [3:2] RAM Integrity Modify - RAMINTM (w) */
    Ifx_UReg_32Bit SETLUDIS:1;        /**< \brief [4:4] Set Latch Update Disable - SETLUDIS (w) */
    Ifx_UReg_32Bit reserved_5:1;      /**< \brief [5:5] \internal Reserved */
    Ifx_UReg_32Bit reserved_6:1;      /**< \brief [6:6] \internal Reserved */
    Ifx_UReg_32Bit reserved_7:1;      /**< \brief [7:7] \internal Reserved */
    Ifx_UReg_32Bit DDC:1;             /**< \brief [8:8] Disable DXCPL - DDC (rw) */
    Ifx_UReg_32Bit reserved_9:7;      /**< \brief [15:9] \internal Reserved */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_SCU_SYSCON_Bits;

/** \brief System PLL Configuration 0 Register */
typedef struct _Ifx_SCU_SYSPLLCON0_Bits
{
    Ifx_UReg_32Bit reserved_0:2;      /**< \brief [1:0] \internal Reserved */
    Ifx_UReg_32Bit MODEN:1;           /**< \brief [2:2] Modulation Enable - MODEN (rw) */
    Ifx_UReg_32Bit reserved_3:6;      /**< \brief [8:3] \internal Reserved */
    Ifx_UReg_32Bit NDIV:7;            /**< \brief [15:9] N-Divider Value - NDIV (rw) */
    Ifx_UReg_32Bit PLLPWD:1;          /**< \brief [16:16] System PLL Power Saving Mode - PLLPWD (rw) */
    Ifx_UReg_32Bit reserved_17:1;     /**< \brief [17:17] \internal Reserved */
    Ifx_UReg_32Bit RESLD:1;           /**< \brief [18:18] Restart DCO Lock Detection - RESLD (w) */
    Ifx_UReg_32Bit reserved_19:5;     /**< \brief [23:19] \internal Reserved */
    Ifx_UReg_32Bit PDIV:3;            /**< \brief [26:24] P-Divider Value - PDIV (rw) */
    Ifx_UReg_32Bit reserved_27:3;     /**< \brief [29:27] \internal Reserved */
    Ifx_UReg_32Bit INSEL:2;           /**< \brief [31:30] Input Selection - INSEL (rw) */
} Ifx_SCU_SYSPLLCON0_Bits;

/** \brief System PLL Configuration 1 Register */
typedef struct _Ifx_SCU_SYSPLLCON1_Bits
{
    Ifx_UReg_32Bit K2DIV:3;           /**< \brief [2:0] K2-Divider Value - K2DIV (rw) */
    Ifx_UReg_32Bit reserved_3:29;     /**< \brief [31:3] \internal Reserved */
} Ifx_SCU_SYSPLLCON1_Bits;

/** \brief System PLL Configuration 2 Register */
typedef struct _Ifx_SCU_SYSPLLCON2_Bits
{
    Ifx_UReg_32Bit MODCFG:16;         /**< \brief [15:0] Modulation Configuration - MODCFG (rw) */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_SCU_SYSPLLCON2_Bits;

/** \brief System PLL Status Register */
typedef struct _Ifx_SCU_SYSPLLSTAT_Bits
{
    Ifx_UReg_32Bit reserved_0:1;      /**< \brief [0:0] \internal Reserved */
    Ifx_UReg_32Bit PWDSTAT:1;         /**< \brief [1:1] System PLL Power-saving Mode Status - PWDSTAT (rh) */
    Ifx_UReg_32Bit LOCK:1;            /**< \brief [2:2] System PLL Lock Status - LOCK (rh) */
    Ifx_UReg_32Bit reserved_3:2;      /**< \brief [4:3] \internal Reserved */
    Ifx_UReg_32Bit K2RDY:1;           /**< \brief [5:5] K2 Divider Ready Status - K2RDY (rh) */
    Ifx_UReg_32Bit reserved_6:1;      /**< \brief [6:6] \internal Reserved */
    Ifx_UReg_32Bit MODRUN:1;          /**< \brief [7:7] Modulation Run - MODRUN (rh) */
    Ifx_UReg_32Bit reserved_8:24;     /**< \brief [31:8] \internal Reserved */
} Ifx_SCU_SYSPLLSTAT_Bits;

/** \brief Trap Clear Register */
typedef struct _Ifx_SCU_TRAPCLR_Bits
{
    Ifx_UReg_32Bit ESR0T:1;           /**< \brief [0:0] Clear Trap Request Flag ESR0T - ESR0T (w) */
    Ifx_UReg_32Bit ESR1T:1;           /**< \brief [1:1] Clear Trap Request Flag ESR1T - ESR1T (w) */
    Ifx_UReg_32Bit TRAP2:1;           /**< \brief [2:2] Clear Trap Request Flag TRAP2 - TRAP2 (w) */
    Ifx_UReg_32Bit SMUT:1;            /**< \brief [3:3] Clear Trap Request Flag SMUT - SMUT (w) */
    Ifx_UReg_32Bit reserved_4:28;     /**< \brief [31:4] \internal Reserved */
} Ifx_SCU_TRAPCLR_Bits;

/** \brief Trap Disable Register 0 */
typedef struct _Ifx_SCU_TRAPDIS0_Bits
{
    Ifx_UReg_32Bit CPU0ESR0T:1;       /**< \brief [0:0] Disable Trap Request ESR0T on CPU0 - CPU0ESR0T (rw) */
    Ifx_UReg_32Bit CPU0ESR1T:1;       /**< \brief [1:1] Disable Trap Request ESR1T on CPU0 - CPU0ESR1T (rw) */
    Ifx_UReg_32Bit CPU0TRAP2T:1;      /**< \brief [2:2] Disable Trap Request TRAP2T on CPU0 - CPU0TRAP2T (rw) */
    Ifx_UReg_32Bit CPU0SMUT:1;        /**< \brief [3:3] Disable Trap Request SMUT on CPU0 - CPU0SMUT (rw) */
    Ifx_UReg_32Bit reserved_4:4;      /**< \brief [7:4] \internal Reserved */
    Ifx_UReg_32Bit CPU1ESR0T:1;       /**< \brief [8:8] Disable Trap Request ESR0T on CPU1 (If product has CPU1) - CPU1ESR0T (rw) */
    Ifx_UReg_32Bit CPU1ESR1T:1;       /**< \brief [9:9] Disable Trap Request ESR1T on CPU1 (If product has CPU1) - CPU1ESR1T (rw) */
    Ifx_UReg_32Bit CPU1TRAP2T:1;      /**< \brief [10:10] Disable Trap Request TRAP2T on CPU1 (If product has CPU1) - CPU1TRAP2T (rw) */
    Ifx_UReg_32Bit CPU1SMUT:1;        /**< \brief [11:11] Disable Trap Request SMUT on CPU1 (If product has CPU1) - CPU1SMUT (rw) */
    Ifx_UReg_32Bit reserved_12:4;     /**< \brief [15:12] \internal Reserved */
    Ifx_UReg_32Bit CPU2ESR0T:1;       /**< \brief [16:16] Disable Trap Request ESR0T on CPU2 (If product has CPU2) - CPU2ESR0T (rw) */
    Ifx_UReg_32Bit CPU2ESR1T:1;       /**< \brief [17:17] Disable Trap Request ESR1T on CPU2 (If product has CPU2) - CPU2ESR1T (rw) */
    Ifx_UReg_32Bit CPU2TRAP2T:1;      /**< \brief [18:18] Disable Trap Request TRAP2T on CPU2 (If product has CPU2) - CPU2TRAP2T (rw) */
    Ifx_UReg_32Bit CPU2SMUT:1;        /**< \brief [19:19] Disable Trap Request SMUT on CPU2 (If product has CPU2) - CPU2SMUT (rw) */
    Ifx_UReg_32Bit reserved_20:4;     /**< \brief [23:20] \internal Reserved */
    Ifx_UReg_32Bit CPU3ESR0T:1;       /**< \brief [24:24] Disable Trap Request ESR0T on CPU3 (If product has CPU3) - CPU3ESR0T (rw) */
    Ifx_UReg_32Bit CPU3ESR1T:1;       /**< \brief [25:25] Disable Trap Request ESR1T on CPU3 (If product has CPU3) - CPU3ESR1T (rw) */
    Ifx_UReg_32Bit CPU3TRAP2T:1;      /**< \brief [26:26] Disable Trap Request TRAP2T on CPU3 (If product has CPU3) - CPU3TRAP2T (rw) */
    Ifx_UReg_32Bit CPU3SMUT:1;        /**< \brief [27:27] Disable Trap Request SMUT on CPU3 (If product has CPU3) - CPU3SMUT (rw) */
    Ifx_UReg_32Bit reserved_28:4;     /**< \brief [31:28] \internal Reserved */
} Ifx_SCU_TRAPDIS0_Bits;

/** \brief Trap Disable Register 1 */
typedef struct _Ifx_SCU_TRAPDIS1_Bits
{
    Ifx_UReg_32Bit reserved_0:4;      /**< \brief [3:0] \internal Reserved */
    Ifx_UReg_32Bit reserved_4:4;      /**< \brief [7:4] \internal Reserved */
    Ifx_UReg_32Bit reserved_8:4;      /**< \brief [11:8] \internal Reserved */
    Ifx_UReg_32Bit reserved_12:4;     /**< \brief [15:12] \internal Reserved */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_SCU_TRAPDIS1_Bits;

/** \brief Trap Set Register */
typedef struct _Ifx_SCU_TRAPSET_Bits
{
    Ifx_UReg_32Bit ESR0T:1;           /**< \brief [0:0] Set Trap Request Flag ESR0T - ESR0T (w) */
    Ifx_UReg_32Bit ESR1T:1;           /**< \brief [1:1] Set Trap Request Flag ESR1T - ESR1T (w) */
    Ifx_UReg_32Bit TRAP2:1;           /**< \brief [2:2] Set Trap Request Flag TRAP2 - TRAP2 (w) */
    Ifx_UReg_32Bit SMUT:1;            /**< \brief [3:3] Set Trap Request Flag SMUT - SMUT (w) */
    Ifx_UReg_32Bit reserved_4:28;     /**< \brief [31:4] \internal Reserved */
} Ifx_SCU_TRAPSET_Bits;

/** \brief Trap Status Register */
typedef struct _Ifx_SCU_TRAPSTAT_Bits
{
    Ifx_UReg_32Bit ESR0T:1;           /**< \brief [0:0] ESR0 Trap Request Flag - ESR0T (rh) */
    Ifx_UReg_32Bit ESR1T:1;           /**< \brief [1:1] ESR1 Trap Request Flag - ESR1T (rh) */
    Ifx_UReg_32Bit TRAP2:1;           /**< \brief [2:2] Trap Bit 2 Request Flag - TRAP2 (rh) */
    Ifx_UReg_32Bit SMUT:1;            /**< \brief [3:3] SMU Alarm Trap Request Flag - SMUT (rh) */
    Ifx_UReg_32Bit reserved_4:28;     /**< \brief [31:4] \internal Reserved */
} Ifx_SCU_TRAPSTAT_Bits;

/** \brief CPU${y} WDT Control Register 0 */
typedef struct _Ifx_SCU_WDTCPU_CON0_Bits
{
    unsigned __sfrbit32 ENDINIT:1;       /**< \brief [0:0] End-of-Initialization Control Bit - ENDINIT (rwh) */
    unsigned __sfrbit32 LCK:1;           /**< \brief [1:1] Lock Bit to Control Access to WDTxCON0 - LCK (rwh) */
    unsigned __sfrbit32 PW:14;           /**< \brief [15:2] User-Definable Password Field for Access to WDTxCON0 - PW (rwh) */
    unsigned __sfrbit32 REL:16;          /**< \brief [31:16] Reload Value for the WDT (also Time Check Value) - REL (rw) */
} Ifx_SCU_WDTCPU_CON0_Bits;

/** \brief CPU${y} WDT Control Register 1 */
typedef struct _Ifx_SCU_WDTCPU_CON1_Bits
{
    Ifx_UReg_32Bit reserved_0:1;      /**< \brief [0:0] \internal Reserved */
    Ifx_UReg_32Bit reserved_1:1;      /**< \brief [1:1] \internal Reserved */
    Ifx_UReg_32Bit IR0:1;             /**< \brief [2:2] Input Frequency Request Control - IR1,IR0 (rw) */
    Ifx_UReg_32Bit DR:1;              /**< \brief [3:3] Disable Request Control Bit - DR (rw) */
    Ifx_UReg_32Bit reserved_4:1;      /**< \brief [4:4] \internal Reserved */
    Ifx_UReg_32Bit IR1:1;             /**< \brief [5:5] Input Frequency Request Control - IR1,IR0 (rw) */
    Ifx_UReg_32Bit UR:1;              /**< \brief [6:6] Unlock Restriction Request Control Bit - UR (rw) */
    Ifx_UReg_32Bit PAR:1;             /**< \brief [7:7] Password Auto-sequence Request Bit - PAR (rw) */
    Ifx_UReg_32Bit TCR:1;             /**< \brief [8:8] Counter Check Request Bit - TCR (rw) */
    Ifx_UReg_32Bit TCTR:7;            /**< \brief [15:9] Timer Check Tolerance Request - TCTR (rw) */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_SCU_WDTCPU_CON1_Bits;

/** \brief CPU${y} WDT Status Register */
typedef struct _Ifx_SCU_WDTCPU_SR_Bits
{
    Ifx_UReg_32Bit AE:1;              /**< \brief [0:0] Watchdog Access Error Status Flag - AE (rh) */
    Ifx_UReg_32Bit OE:1;              /**< \brief [1:1] Watchdog Overflow Error Status Flag - OE (rh) */
    Ifx_UReg_32Bit IS0:1;             /**< \brief [2:2] Watchdog Input Clock Status - IS1,IS0 (rh) */
    Ifx_UReg_32Bit DS:1;              /**< \brief [3:3] Watchdog Enable/Disable Status Flag - DS (rh) */
    Ifx_UReg_32Bit TO:1;              /**< \brief [4:4] Watchdog Time-Out Mode Flag - TO (rh) */
    Ifx_UReg_32Bit IS1:1;             /**< \brief [5:5] Watchdog Input Clock Status - IS1,IS0 (rh) */
    Ifx_UReg_32Bit US:1;              /**< \brief [6:6] SMU Unlock Restriction Status Flag - US (rh) */
    Ifx_UReg_32Bit PAS:1;             /**< \brief [7:7] Password Auto-sequence Status Flag - PAS (rh) */
    Ifx_UReg_32Bit TCS:1;             /**< \brief [8:8] Timer Check Status Flag - TCS (rh) */
    Ifx_UReg_32Bit TCT:7;             /**< \brief [15:9] Timer Check Tolerance - TCT (rh) */
    Ifx_UReg_32Bit TIM:16;            /**< \brief [31:16] Timer Value - TIM (rh) */
} Ifx_SCU_WDTCPU_SR_Bits;

/** \brief Safety WDT Control Register 0 */
typedef struct _Ifx_SCU_WDTS_CON0_Bits
{
    unsigned __sfrbit32 ENDINIT:1;       /**< \brief [0:0] End-of-Initialization Control Bit - ENDINIT (rwh) */
    unsigned __sfrbit32 LCK:1;           /**< \brief [1:1] Lock Bit to Control Access to WDTxCON0 - LCK (rwh) */
    unsigned __sfrbit32 PW:14;           /**< \brief [15:2] User-Definable Password Field for Access to WDTxCON0 - PW (rwh) */
    unsigned __sfrbit32 REL:16;          /**< \brief [31:16] Reload Value for the WDT (also Time Check Value) - REL (rw) */
} Ifx_SCU_WDTS_CON0_Bits;

/** \brief Safety WDT Control Register 1 */
typedef struct _Ifx_SCU_WDTS_CON1_Bits
{
    Ifx_UReg_32Bit CLRIRF:1;          /**< \brief [0:0] Clear Internal Reset Flag - CLRIRF (rwh) */
    Ifx_UReg_32Bit reserved_1:1;      /**< \brief [1:1] \internal Reserved */
    Ifx_UReg_32Bit IR0:1;             /**< \brief [2:2] Input Frequency Request Control - IR1,IR0 (rw) */
    Ifx_UReg_32Bit DR:1;              /**< \brief [3:3] Disable Request Control Bit - DR (rw) */
    Ifx_UReg_32Bit reserved_4:1;      /**< \brief [4:4] \internal Reserved */
    Ifx_UReg_32Bit IR1:1;             /**< \brief [5:5] Input Frequency Request Control - IR1,IR0 (rw) */
    Ifx_UReg_32Bit UR:1;              /**< \brief [6:6] Unlock Restriction Request Control Bit - UR (rw) */
    Ifx_UReg_32Bit PAR:1;             /**< \brief [7:7] Password Auto-sequence Request Bit - PAR (rw) */
    Ifx_UReg_32Bit TCR:1;             /**< \brief [8:8] Counter Check Request Bit - TCR (rw) */
    Ifx_UReg_32Bit TCTR:7;            /**< \brief [15:9] Timer Check Tolerance Request - TCTR (rw) */
    Ifx_UReg_32Bit reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_SCU_WDTS_CON1_Bits;

/** \brief Safety WDT Status Register */
typedef struct _Ifx_SCU_WDTS_SR_Bits
{
    Ifx_UReg_32Bit AE:1;              /**< \brief [0:0] Watchdog Access Error Status Flag - AE (rh) */
    Ifx_UReg_32Bit OE:1;              /**< \brief [1:1] Watchdog Overflow Error Status Flag - OE (rh) */
    Ifx_UReg_32Bit IS0:1;             /**< \brief [2:2] Watchdog Input Clock Status - IS1,IS0 (rh) */
    Ifx_UReg_32Bit DS:1;              /**< \brief [3:3] Watchdog Enable/Disable Status Flag - DS (rh) */
    Ifx_UReg_32Bit TO:1;              /**< \brief [4:4] Watchdog Time-Out Mode Flag - TO (rh) */
    Ifx_UReg_32Bit IS1:1;             /**< \brief [5:5] Watchdog Input Clock Status - IS1,IS0 (rh) */
    Ifx_UReg_32Bit US:1;              /**< \brief [6:6] SMU Unlock Restriction Status Flag - US (rh) */
    Ifx_UReg_32Bit PAS:1;             /**< \brief [7:7] Password Auto-sequence Status Flag - PAS (rh) */
    Ifx_UReg_32Bit TCS:1;             /**< \brief [8:8] Timer Check Status Flag - TCS (rh) */
    Ifx_UReg_32Bit TCT:7;             /**< \brief [15:9] Timer Check Tolerance - TCT (rh) */
    Ifx_UReg_32Bit TIM:16;            /**< \brief [31:16] Timer Value - TIM (rh) */
} Ifx_SCU_WDTS_SR_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_scu_Registers_union
 * \{   */
/** \brief Access Enable Register 00   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ACCEN00_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_ACCEN00;

/** \brief Access Enable Register 01   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ACCEN01_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_ACCEN01;

/** \brief Access Enable Register 10   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ACCEN10_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_ACCEN10;

/** \brief Access Enable Register 11   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ACCEN11_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_ACCEN11;

/** \brief Application Reset Disable Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ARSTDIS_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_ARSTDIS;

/** \brief CCU Clock Control Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_CCUCON0_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_CCUCON0;

/** \brief CCU Clock Control Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_CCUCON1_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_CCUCON1;

/** \brief CCU Clock Control Register 2   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_CCUCON2_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_CCUCON2;

/** \brief CCU Clock Control Register 3   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_CCUCON3_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_CCUCON3;

/** \brief CCU Clock Control Register 4   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_CCUCON4_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_CCUCON4;

/** \brief CCU Clock Control Register 5   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_CCUCON5_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_CCUCON5;

/** \brief CCU Clock Control Register 6   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_CCUCON6_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_CCUCON6;

/** \brief CCU Clock Control Register 7   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_CCUCON7_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_CCUCON7;

/** \brief CCU Clock Control Register 8   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_CCUCON8_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_CCUCON8;

/** \brief CCU Clock Control Register 9   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_CCUCON9_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_CCUCON9;

/** \brief Chip Identification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_CHIPID_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_CHIPID;

/** \brief Core Die Temperature Sensor Limit Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_DTSCLIM_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_DTSCLIM;

/** \brief Core Die Temperature Sensor Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_DTSCSTAT_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_DTSCSTAT;

/** \brief ENDINIT Global Control Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_EICON0_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_EICON0;

/** \brief ENDINIT Global Control Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_EICON1_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_EICON1;

/** \brief External Input Channel Register ${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_EICR_Bits B;              /**< \brief Bitfield access */
} Ifx_SCU_EICR;

/** \brief External Input Filter Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_EIFILT_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_EIFILT;

/** \brief External Input Flag Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_EIFR_Bits B;              /**< \brief Bitfield access */
} Ifx_SCU_EIFR;

/** \brief ENDINIT Timeout Counter Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_EISR_Bits B;              /**< \brief Bitfield access */
} Ifx_SCU_EISR;

/** \brief Emergency Stop Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_EMSR_Bits B;              /**< \brief Bitfield access */
} Ifx_SCU_EMSR;

/** \brief Emergency Stop Software set and clear register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_EMSSW_Bits B;             /**< \brief Bitfield access */
} Ifx_SCU_EMSSW;

/** \brief ESR${x} Input Configuration Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ESRCFGX_ESRCFGX_Bits B;    /**< \brief Bitfield access */
} Ifx_SCU_ESRCFGX_ESRCFGX;

/** \brief ESR Output Configuration Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ESROCFG_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_ESROCFG;

/** \brief External Clock Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_EXTCON_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_EXTCON;

/** \brief Fractional Divider Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_FDR_Bits B;               /**< \brief Bitfield access */
} Ifx_SCU_FDR;

/** \brief Flag Modification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_FMR_Bits B;               /**< \brief Bitfield access */
} Ifx_SCU_FMR;

/** \brief Identification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ID_Bits B;                /**< \brief Bitfield access */
} Ifx_SCU_ID;

/** \brief Flag Gating Register ${j}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_IGCR_Bits B;              /**< \brief Bitfield access */
} Ifx_SCU_IGCR;

/** \brief ESR Input Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_IN_Bits B;                /**< \brief Bitfield access */
} Ifx_SCU_IN;

/** \brief Input/Output Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_IOCR_Bits B;              /**< \brief Bitfield access */
} Ifx_SCU_IOCR;

/** \brief Logic BIST Control 0 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_LBISTCTRL0_Bits B;        /**< \brief Bitfield access */
} Ifx_SCU_LBISTCTRL0;

/** \brief Logic BIST Control 1 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_LBISTCTRL1_Bits B;        /**< \brief Bitfield access */
} Ifx_SCU_LBISTCTRL1;

/** \brief Logic BIST Control 2 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_LBISTCTRL2_Bits B;        /**< \brief Bitfield access */
} Ifx_SCU_LBISTCTRL2;

/** \brief Logic BIST Control 3 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_LBISTCTRL3_Bits B;        /**< \brief Bitfield access */
} Ifx_SCU_LBISTCTRL3;

/** \brief LCL CPU0 and CPU2 Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_LCLCON0_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_LCLCON0;

/** \brief LCL CPU1 and CPU3 Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_LCLCON1_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_LCLCON1;

/** \brief LCL Test Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_LCLTEST_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_LCLTEST;

/** \brief Manufacturer Identification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_MANID_Bits B;             /**< \brief Bitfield access */
} Ifx_SCU_MANID;

/** \brief ESR Output Modification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_OMR_Bits B;               /**< \brief Bitfield access */
} Ifx_SCU_OMR;

/** \brief OSC Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_OSCCON_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_OSCCON;

/** \brief ESR Output Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_OUT_Bits B;               /**< \brief Bitfield access */
} Ifx_SCU_OUT;

/** \brief Overlay Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_OVCCON_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_OVCCON;

/** \brief Overlay Enable Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_OVCENABLE_Bits B;         /**< \brief Bitfield access */
} Ifx_SCU_OVCENABLE;

/** \brief Pad Disable Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PDISC_Bits B;             /**< \brief Bitfield access */
} Ifx_SCU_PDISC;

/** \brief ESR Pad Driver Mode Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PDR_Bits B;               /**< \brief Bitfield access */
} Ifx_SCU_PDR;

/** \brief Pattern Detection Result Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PDRR_Bits B;              /**< \brief Bitfield access */
} Ifx_SCU_PDRR;

/** \brief Peripheral PLL Configuration 0 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PERPLLCON0_Bits B;        /**< \brief Bitfield access */
} Ifx_SCU_PERPLLCON0;

/** \brief Peripheral PLL Configuration 1 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PERPLLCON1_Bits B;        /**< \brief Bitfield access */
} Ifx_SCU_PERPLLCON1;

/** \brief Peripheral PLL Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PERPLLSTAT_Bits B;        /**< \brief Bitfield access */
} Ifx_SCU_PERPLLSTAT;

/** \brief Power Management Control and Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PMCSR0_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_PMCSR0;

/** \brief Power Management Control and Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PMCSR1_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_PMCSR1;

/** \brief Power Management Control and Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PMCSR2_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_PMCSR2;

/** \brief Power Management Control and Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PMCSR3_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_PMCSR3;

/** \brief Power Management Control and Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PMCSR4_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_PMCSR4;

/** \brief Power Management Control and Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PMCSR5_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_PMCSR5;

/** \brief Power Management Status Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PMSTAT0_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_PMSTAT0;

/** \brief Standby and Wake-up Control Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PMSWCR1_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_PMSWCR1;

/** \brief Power Management Transition Control and Status Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PMTRCSR0_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_PMTRCSR0;

/** \brief Power Management Transition Control and Status Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PMTRCSR1_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_PMTRCSR1;

/** \brief Power Management Transition Control and Status Register 2   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PMTRCSR2_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_PMTRCSR2;

/** \brief Power Management Transition Control and Status Register 3   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PMTRCSR3_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_PMTRCSR3;

/** \brief Reset Configuration Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_RSTCON_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_RSTCON;

/** \brief Additional Reset Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_RSTCON2_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_RSTCON2;

/** \brief Reset Configuration Register 3   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_RSTCON3_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_RSTCON3;

/** \brief Reset Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_RSTSTAT_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_RSTSTAT;

/** \brief Safety ENDINIT Control Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_SEICON0_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_SEICON0;

/** \brief Safety ENDINIT Control Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_SEICON1_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_SEICON1;

/** \brief Safety ENDINIT Timeout Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_SEISR_Bits B;             /**< \brief Bitfield access */
} Ifx_SCU_SEISR;

/** \brief Start-up Configuration Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_STCON_Bits B;             /**< \brief Bitfield access */
} Ifx_SCU_STCON;

/** \brief Start-up Memory Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_STMEM1_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_STMEM1;

/** \brief Start-up Memory Register 2   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_STMEM2_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_STMEM2;

/** \brief Start-up Memory Register 3   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_STMEM3_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_STMEM3;

/** \brief Start-up Memory Register 4   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_STMEM4_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_STMEM4;

/** \brief Start-up Memory Register 5   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_STMEM5_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_STMEM5;

/** \brief Start-up Memory Register 6   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_STMEM6_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_STMEM6;

/** \brief Start-up Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_STSTAT_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_STSTAT;

/** \brief Address Map Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_SWAPCTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_SWAPCTRL;

/** \brief Software Reset Configuration Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_SWRSTCON_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_SWRSTCON;

/** \brief System Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_SYSCON_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_SYSCON;

/** \brief System PLL Configuration 0 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_SYSPLLCON0_Bits B;        /**< \brief Bitfield access */
} Ifx_SCU_SYSPLLCON0;

/** \brief System PLL Configuration 1 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_SYSPLLCON1_Bits B;        /**< \brief Bitfield access */
} Ifx_SCU_SYSPLLCON1;

/** \brief System PLL Configuration 2 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_SYSPLLCON2_Bits B;        /**< \brief Bitfield access */
} Ifx_SCU_SYSPLLCON2;

/** \brief System PLL Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_SYSPLLSTAT_Bits B;        /**< \brief Bitfield access */
} Ifx_SCU_SYSPLLSTAT;

/** \brief Trap Clear Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPCLR_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_TRAPCLR;

/** \brief Trap Disable Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPDIS0_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_TRAPDIS0;

/** \brief Trap Disable Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPDIS1_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_TRAPDIS1;

/** \brief Trap Set Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPSET_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_TRAPSET;

/** \brief Trap Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPSTAT_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_TRAPSTAT;

/** \brief CPU${y} WDT Control Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_WDTCPU_CON0_Bits B;       /**< \brief Bitfield access */
} Ifx_SCU_WDTCPU_CON0;

/** \brief CPU${y} WDT Control Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_WDTCPU_CON1_Bits B;       /**< \brief Bitfield access */
} Ifx_SCU_WDTCPU_CON1;

/** \brief CPU${y} WDT Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_WDTCPU_SR_Bits B;         /**< \brief Bitfield access */
} Ifx_SCU_WDTCPU_SR;

/** \brief Safety WDT Control Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_WDTS_CON0_Bits B;         /**< \brief Bitfield access */
} Ifx_SCU_WDTS_CON0;

/** \brief Safety WDT Control Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_WDTS_CON1_Bits B;         /**< \brief Bitfield access */
} Ifx_SCU_WDTS_CON1;

/** \brief Safety WDT Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_WDTS_SR_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_WDTS_SR;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scu_ESRCFGx_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ESRCFGX object */
typedef volatile struct _Ifx_SCU_ESRCFGX
{
       Ifx_SCU_ESRCFGX_ESRCFGX             ESRCFGX;                /**< \brief 0, ESR${x} Input Configuration Register*/
} Ifx_SCU_ESRCFGX;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scu_WDTCPU_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief WDTCPU object */
typedef volatile struct _Ifx_SCU_WDTCPU
{
       Ifx_SCU_WDTCPU_CON0                 CON0;                   /**< \brief 0, */
       Ifx_SCU_WDTCPU_CON1                 CON1;                   /**< \brief 4, */
       Ifx_SCU_WDTCPU_SR                   SR;                     /**< \brief 8, */
} Ifx_SCU_WDTCPU;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scu_WDTS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief WDTS object */
typedef volatile struct _Ifx_SCU_WDTS
{
       Ifx_SCU_WDTS_CON0                   CON0;                   /**< \brief 0, Safety WDT Control Register 0*/
       Ifx_SCU_WDTS_CON1                   CON1;                   /**< \brief 4, Safety WDT Control Register 1*/
       Ifx_SCU_WDTS_SR                     SR;                     /**< \brief 8, Safety WDT Status Register*/
} Ifx_SCU_WDTS;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/** \addtogroup IfxSfr_Scu_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief SCU object */
typedef volatile struct _Ifx_SCU
{
       Ifx_UReg_8Bit                       reserved_0[8];          /**< \brief 0, \internal Reserved */
       Ifx_SCU_ID                          ID;                     /**< \brief 8, Identification Register*/
       Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       Ifx_SCU_OSCCON                      OSCCON;                 /**< \brief 10, OSC Control Register*/
       Ifx_SCU_SYSPLLSTAT                  SYSPLLSTAT;             /**< \brief 14, System PLL Status Register*/
       Ifx_SCU_SYSPLLCON0                  SYSPLLCON0;             /**< \brief 18, System PLL Configuration 0 Register*/
       Ifx_SCU_SYSPLLCON1                  SYSPLLCON1;             /**< \brief 1C, System PLL Configuration 1 Register*/
       Ifx_SCU_SYSPLLCON2                  SYSPLLCON2;             /**< \brief 20, System PLL Configuration 2 Register*/
       Ifx_SCU_PERPLLSTAT                  PERPLLSTAT;             /**< \brief 24, Peripheral PLL Status Register*/
       Ifx_SCU_PERPLLCON0                  PERPLLCON0;             /**< \brief 28, Peripheral PLL Configuration 0 Register*/
       Ifx_SCU_PERPLLCON1                  PERPLLCON1;             /**< \brief 2C, Peripheral PLL Configuration 1 Register*/
       Ifx_SCU_CCUCON0                     CCUCON0;                /**< \brief 30, CCU Clock Control Register 0*/
       Ifx_SCU_CCUCON1                     CCUCON1;                /**< \brief 34, CCU Clock Control Register 1*/
       Ifx_SCU_FDR                         FDR;                    /**< \brief 38, Fractional Divider Register*/
       Ifx_SCU_EXTCON                      EXTCON;                 /**< \brief 3C, External Clock Control Register*/
       Ifx_SCU_CCUCON2                     CCUCON2;                /**< \brief 40, CCU Clock Control Register 2*/
       Ifx_SCU_CCUCON3                     CCUCON3;                /**< \brief 44, CCU Clock Control Register 3*/
       Ifx_SCU_CCUCON4                     CCUCON4;                /**< \brief 48, CCU Clock Control Register 4*/
       Ifx_SCU_CCUCON5                     CCUCON5;                /**< \brief 4C, CCU Clock Control Register 5*/
       Ifx_SCU_RSTSTAT                     RSTSTAT;                /**< \brief 50, */
       Ifx_UReg_8Bit                       reserved_54[4];         /**< \brief 54, \internal Reserved */
       Ifx_SCU_RSTCON                      RSTCON;                 /**< \brief 58, */
       Ifx_SCU_ARSTDIS                     ARSTDIS;                /**< \brief 5C, */
       Ifx_SCU_SWRSTCON                    SWRSTCON;               /**< \brief 60, */
       Ifx_SCU_RSTCON2                     RSTCON2;                /**< \brief 64, */
       Ifx_SCU_RSTCON3                     RSTCON3;                /**< \brief 68, */
       Ifx_UReg_8Bit                       reserved_6C[4];         /**< \brief 6C, \internal Reserved */
       Ifx_SCU_ESRCFGX                     ESRCFGX[2];             /**< \brief 70, ESR${x} Input Configuration Register*/
       Ifx_SCU_ESROCFG                     ESROCFG;                /**< \brief 78, ESR Output Configuration Register*/
       Ifx_SCU_SYSCON                      SYSCON;                 /**< \brief 7C, System Control Register*/
       Ifx_SCU_CCUCON6                     CCUCON6;                /**< \brief 80, CCU Clock Control Register 6*/
       Ifx_SCU_CCUCON7                     CCUCON7;                /**< \brief 84, CCU Clock Control Register 7*/
       Ifx_SCU_CCUCON8                     CCUCON8;                /**< \brief 88, CCU Clock Control Register 8*/
       Ifx_SCU_CCUCON9                     CCUCON9;                /**< \brief 8C, CCU Clock Control Register 9*/
       Ifx_UReg_8Bit                       reserved_90[12];        /**< \brief 90, \internal Reserved */
       Ifx_SCU_PDR                         PDR;                    /**< \brief 9C, ESR Pad Driver Mode Register*/
       Ifx_SCU_IOCR                        IOCR;                   /**< \brief A0, Input/Output Control Register*/
       Ifx_SCU_OUT                         OUT;                    /**< \brief A4, ESR Output Register*/
       Ifx_SCU_OMR                         OMR;                    /**< \brief A8, ESR Output Modification Register*/
       Ifx_SCU_IN                          IN;                     /**< \brief AC, ESR Input Register*/
       Ifx_UReg_8Bit                       reserved_B0[16];        /**< \brief B0, \internal Reserved */
       Ifx_SCU_STSTAT                      STSTAT;                 /**< \brief C0, */
       Ifx_SCU_STCON                       STCON;                  /**< \brief C4, Start-up Configuration Register*/
       Ifx_SCU_PMCSR0                      PMCSR0;                 /**< \brief C8, Power Management Control and Status Register*/
       Ifx_SCU_PMCSR1                      PMCSR1;                 /**< \brief CC, Power Management Control and Status Register*/
       Ifx_SCU_PMCSR2                      PMCSR2;                 /**< \brief D0, Power Management Control and Status Register*/
       Ifx_SCU_PMCSR3                      PMCSR3;                 /**< \brief D4, Power Management Control and Status Register*/
       Ifx_SCU_PMCSR4                      PMCSR4;                 /**< \brief D8, Power Management Control and Status Register*/
       Ifx_SCU_PMCSR5                      PMCSR5;                 /**< \brief DC, Power Management Control and Status Register*/
       Ifx_UReg_8Bit                       reserved_E0[4];         /**< \brief E0, \internal Reserved */
       Ifx_SCU_PMSTAT0                     PMSTAT0;                /**< \brief E4, Power Management Status Register 0*/
       Ifx_SCU_PMSWCR1                     PMSWCR1;                /**< \brief E8, Standby and Wake-up Control Register 1*/
       Ifx_UReg_8Bit                       reserved_EC[16];        /**< \brief EC, \internal Reserved */
       Ifx_SCU_EMSR                        EMSR;                   /**< \brief FC, Emergency Stop Register*/
       Ifx_SCU_EMSSW                       EMSSW;                  /**< \brief 100, Emergency Stop Software set and clear register*/
       Ifx_SCU_DTSCSTAT                    DTSCSTAT;               /**< \brief 104, Core Die Temperature Sensor Status Register*/
       Ifx_SCU_DTSCLIM                     DTSCLIM;                /**< \brief 108, Core Die Temperature Sensor Limit Register*/
       Ifx_UReg_8Bit                       reserved_10C[20];       /**< \brief 10C, \internal Reserved */
       Ifx_SCU_TRAPDIS1                    TRAPDIS1;               /**< \brief 120, Trap Disable Register 1*/
       Ifx_SCU_TRAPSTAT                    TRAPSTAT;               /**< \brief 124, Trap Status Register*/
       Ifx_SCU_TRAPSET                     TRAPSET;                /**< \brief 128, Trap Set Register*/
       Ifx_SCU_TRAPCLR                     TRAPCLR;                /**< \brief 12C, Trap Clear Register*/
       Ifx_SCU_TRAPDIS0                    TRAPDIS0;               /**< \brief 130, Trap Disable Register 0*/
       Ifx_SCU_LCLCON0                     LCLCON0;                /**< \brief 134, LCL CPU0 and CPU2 Control Register*/
       Ifx_SCU_LCLCON1                     LCLCON1;                /**< \brief 138, LCL CPU1 and CPU3 Control Register*/
       Ifx_SCU_LCLTEST                     LCLTEST;                /**< \brief 13C, LCL Test Register*/
       Ifx_SCU_CHIPID                      CHIPID;                 /**< \brief 140, Chip Identification Register*/
       Ifx_SCU_MANID                       MANID;                  /**< \brief 144, Manufacturer Identification Register*/
       Ifx_UReg_8Bit                       reserved_148[4];        /**< \brief 148, \internal Reserved */
       Ifx_SCU_SWAPCTRL                    SWAPCTRL;               /**< \brief 14C, Address Map Control Register*/
       Ifx_UReg_8Bit                       reserved_150[20];       /**< \brief 150, \internal Reserved */
       Ifx_SCU_LBISTCTRL0                  LBISTCTRL0;             /**< \brief 164, Logic BIST Control 0 Register*/
       Ifx_SCU_LBISTCTRL1                  LBISTCTRL1;             /**< \brief 168, Logic BIST Control 1 Register*/
       Ifx_SCU_LBISTCTRL2                  LBISTCTRL2;             /**< \brief 16C, Logic BIST Control 2 Register*/
       Ifx_SCU_LBISTCTRL3                  LBISTCTRL3;             /**< \brief 170, Logic BIST Control 3 Register*/
       Ifx_UReg_8Bit                       reserved_174[16];       /**< \brief 174, \internal Reserved */
       Ifx_SCU_STMEM1                      STMEM1;                 /**< \brief 184, Start-up Memory Register 1*/
       Ifx_SCU_STMEM2                      STMEM2;                 /**< \brief 188, Start-up Memory Register 2*/
       Ifx_SCU_PDISC                       PDISC;                  /**< \brief 18C, Pad Disable Control Register*/
       Ifx_UReg_8Bit                       reserved_190[8];        /**< \brief 190, \internal Reserved */
       Ifx_SCU_PMTRCSR0                    PMTRCSR0;               /**< \brief 198, Power Management Transition Control and Status Register 0*/
       Ifx_SCU_PMTRCSR1                    PMTRCSR1;               /**< \brief 19C, Power Management Transition Control and Status Register 1*/
       Ifx_SCU_PMTRCSR2                    PMTRCSR2;               /**< \brief 1A0, Power Management Transition Control and Status Register 2*/
       Ifx_SCU_PMTRCSR3                    PMTRCSR3;               /**< \brief 1A4, Power Management Transition Control and Status Register 3*/
       Ifx_UReg_8Bit                       reserved_1A8[24];       /**< \brief 1A8, \internal Reserved */
       Ifx_SCU_STMEM3                      STMEM3;                 /**< \brief 1C0, Start-up Memory Register 3*/
       Ifx_SCU_STMEM4                      STMEM4;                 /**< \brief 1C4, Start-up Memory Register 4*/
       Ifx_SCU_STMEM5                      STMEM5;                 /**< \brief 1C8, Start-up Memory Register 5*/
       Ifx_SCU_STMEM6                      STMEM6;                 /**< \brief 1CC, Start-up Memory Register 6*/
       Ifx_UReg_8Bit                       reserved_1D0[16];       /**< \brief 1D0, \internal Reserved */
       Ifx_SCU_OVCENABLE                   OVCENABLE;              /**< \brief 1E0, Overlay Enable Register*/
       Ifx_SCU_OVCCON                      OVCCON;                 /**< \brief 1E4, Overlay Control Register*/
       Ifx_UReg_8Bit                       reserved_1E8[36];       /**< \brief 1E8, \internal Reserved */
       Ifx_SCU_EIFILT                      EIFILT;                 /**< \brief 20C, External Input Filter Register*/
       Ifx_SCU_EICR                        EICR[4];                /**< \brief 210, External Input Channel Register ${i}*/
       Ifx_SCU_EIFR                        EIFR;                   /**< \brief 220, External Input Flag Register*/
       Ifx_SCU_FMR                         FMR;                    /**< \brief 224, Flag Modification Register*/
       Ifx_SCU_PDRR                        PDRR;                   /**< \brief 228, Pattern Detection Result Register*/
       Ifx_SCU_IGCR                        IGCR[4];                /**< \brief 22C, Flag Gating Register ${j}*/
       Ifx_UReg_8Bit                       reserved_23C[16];       /**< \brief 23C, \internal Reserved */
       Ifx_SCU_WDTCPU                      WDTCPU[4];              /**< \brief 24C, */
       Ifx_UReg_8Bit                       reserved_27C[32];       /**< \brief 27C, \internal Reserved */
       Ifx_SCU_EICON0                      EICON0;                 /**< \brief 29C, ENDINIT Global Control Register 0*/
       Ifx_SCU_EICON1                      EICON1;                 /**< \brief 2A0, ENDINIT Global Control Register 1*/
       Ifx_SCU_EISR                        EISR;                   /**< \brief 2A4, ENDINIT Timeout Counter Status Register*/
       Ifx_SCU_WDTS                        WDTS;                   /**< \brief 2A8, Safety WDT Status Register*/
       Ifx_SCU_SEICON0                     SEICON0;                /**< \brief 2B4, Safety ENDINIT Control Register 0*/
       Ifx_SCU_SEICON1                     SEICON1;                /**< \brief 2B8, Safety ENDINIT Control Register 1*/
       Ifx_SCU_SEISR                       SEISR;                  /**< \brief 2BC, Safety ENDINIT Timeout Status Register*/
       Ifx_UReg_8Bit                       reserved_2C0[304];      /**< \brief 2C0, \internal Reserved */
       Ifx_SCU_ACCEN11                     ACCEN11;                /**< \brief 3F0, Access Enable Register 11*/
       Ifx_SCU_ACCEN10                     ACCEN10;                /**< \brief 3F4, Access Enable Register 10*/
       Ifx_SCU_ACCEN01                     ACCEN01;                /**< \brief 3F8, Access Enable Register 01*/
       Ifx_SCU_ACCEN00                     ACCEN00;                /**< \brief 3FC, Access Enable Register 00*/
} Ifx_SCU;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/


#line 57 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Infra\\Sfr\\TC38A\\_Reg\\IfxScu_reg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/** \addtogroup IfxSfr_Scu_Registers_Cfg_BaseAddress
 * \{  */

/** \brief SCU object */

/** \}  */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scu_Registers_Cfg_Scu
 * \{  */
/** \brief 8, Identification Register */


/** \brief 10, OSC Control Register */


/** \brief 14, System PLL Status Register */


/** \brief 18, System PLL Configuration 0 Register */


/** \brief 1C, System PLL Configuration 1 Register */


/** \brief 20, System PLL Configuration 2 Register */


/** \brief 24, Peripheral PLL Status Register */


/** \brief 28, Peripheral PLL Configuration 0 Register */


/** \brief 2C, Peripheral PLL Configuration 1 Register */


/** \brief 30, CCU Clock Control Register 0 */


/** \brief 34, CCU Clock Control Register 1 */


/** \brief 38, Fractional Divider Register */


/** \brief 3C, External Clock Control Register */


/** \brief 40, CCU Clock Control Register 2 */


/** \brief 44, CCU Clock Control Register 3 */


/** \brief 48, CCU Clock Control Register 4 */


/** \brief 4C, CCU Clock Control Register 5 */


/** \brief 50, Reset Status Register */


/** \brief 58, Reset Configuration Register */


/** \brief 5C, Application Reset Disable Register */


/** \brief 60, Software Reset Configuration Register */


/** \brief 64, Additional Reset Control Register */


/** \brief 68, Reset Configuration Register 3 */


/** \brief 70, ESR0 Input Configuration Register */

/** Alias (User Manual Name) for SCU_ESRCFGX0_ESRCFGX.
* To use register names with standard convension, please use SCU_ESRCFGX0_ESRCFGX.
*/


/** \brief 74, ESR1 Input Configuration Register */

/** Alias (User Manual Name) for SCU_ESRCFGX1_ESRCFGX.
* To use register names with standard convension, please use SCU_ESRCFGX1_ESRCFGX.
*/


/** \brief 78, ESR Output Configuration Register */


/** \brief 7C, System Control Register */


/** \brief 80, CCU Clock Control Register 6 */


/** \brief 84, CCU Clock Control Register 7 */


/** \brief 88, CCU Clock Control Register 8 */


/** \brief 8C, CCU Clock Control Register 9 */


/** \brief 9C, ESR Pad Driver Mode Register */


/** \brief A0, Input/Output Control Register */


/** \brief A4, ESR Output Register */


/** \brief A8, ESR Output Modification Register */


/** \brief AC, ESR Input Register */


/** \brief C0, Start-up Status Register */


/** \brief C4, Start-up Configuration Register */


/** \brief C8, Power Management Control and Status Register */


/** \brief CC, Power Management Control and Status Register */


/** \brief D0, Power Management Control and Status Register */


/** \brief D4, Power Management Control and Status Register */


/** \brief D8, Power Management Control and Status Register */


/** \brief DC, Power Management Control and Status Register */


/** \brief E4, Power Management Status Register 0 */


/** \brief E8, Standby and Wake-up Control Register 1 */


/** \brief FC, Emergency Stop Register */


/** \brief 100, Emergency Stop Software set and clear register */


/** \brief 104, Core Die Temperature Sensor Status Register */


/** \brief 108, Core Die Temperature Sensor Limit Register */


/** \brief 120, Trap Disable Register 1 */


/** \brief 124, Trap Status Register */


/** \brief 128, Trap Set Register */


/** \brief 12C, Trap Clear Register */


/** \brief 130, Trap Disable Register 0 */


/** \brief 134, LCL CPU0 and CPU2 Control Register */


/** \brief 138, LCL CPU1 and CPU3 Control Register */


/** \brief 13C, LCL Test Register */


/** \brief 140, Chip Identification Register */


/** \brief 144, Manufacturer Identification Register */


/** \brief 14C, Address Map Control Register */


/** \brief 164, Logic BIST Control 0 Register */


/** \brief 168, Logic BIST Control 1 Register */


/** \brief 16C, Logic BIST Control 2 Register */


/** \brief 170, Logic BIST Control 3 Register */


/** \brief 184, Start-up Memory Register 1 */


/** \brief 188, Start-up Memory Register 2 */


/** \brief 18C, Pad Disable Control Register */


/** \brief 198, Power Management Transition Control and Status Register 0 */


/** \brief 19C, Power Management Transition Control and Status Register 1 */


/** \brief 1A0, Power Management Transition Control and Status Register 2 */


/** \brief 1A4, Power Management Transition Control and Status Register 3 */


/** \brief 1C0, Start-up Memory Register 3 */


/** \brief 1C4, Start-up Memory Register 4 */


/** \brief 1C8, Start-up Memory Register 5 */


/** \brief 1CC, Start-up Memory Register 6 */


/** \brief 1E0, Overlay Enable Register */


/** \brief 1E4, Overlay Control Register */


/** \brief 20C, External Input Filter Register */


/** \brief 210, External Input Channel Register 0 */


/** \brief 214, External Input Channel Register 1 */


/** \brief 218, External Input Channel Register 2 */


/** \brief 21C, External Input Channel Register 3 */


/** \brief 220, External Input Flag Register */


/** \brief 224, Flag Modification Register */


/** \brief 228, Pattern Detection Result Register */


/** \brief 22C, Flag Gating Register 0 */


/** \brief 230, Flag Gating Register 1 */


/** \brief 234, Flag Gating Register 2 */


/** \brief 238, Flag Gating Register 3 */


/** \brief 24C, CPU0 WDT Control Register 0 */

/** Alias (User Manual Name) for SCU_WDTCPU0_CON0.
* To use register names with standard convension, please use SCU_WDTCPU0_CON0.
*/


/** \brief 250, CPU0 WDT Control Register 1 */

/** Alias (User Manual Name) for SCU_WDTCPU0_CON1.
* To use register names with standard convension, please use SCU_WDTCPU0_CON1.
*/


/** \brief 254, CPU0 WDT Status Register */

/** Alias (User Manual Name) for SCU_WDTCPU0_SR.
* To use register names with standard convension, please use SCU_WDTCPU0_SR.
*/


/** \brief 258, CPU1 WDT Control Register 0 */

/** Alias (User Manual Name) for SCU_WDTCPU1_CON0.
* To use register names with standard convension, please use SCU_WDTCPU1_CON0.
*/


/** \brief 25C, CPU1 WDT Control Register 1 */

/** Alias (User Manual Name) for SCU_WDTCPU1_CON1.
* To use register names with standard convension, please use SCU_WDTCPU1_CON1.
*/


/** \brief 260, CPU1 WDT Status Register */

/** Alias (User Manual Name) for SCU_WDTCPU1_SR.
* To use register names with standard convension, please use SCU_WDTCPU1_SR.
*/


/** \brief 264, CPU2 WDT Control Register 0 */

/** Alias (User Manual Name) for SCU_WDTCPU2_CON0.
* To use register names with standard convension, please use SCU_WDTCPU2_CON0.
*/


/** \brief 268, CPU2 WDT Control Register 1 */

/** Alias (User Manual Name) for SCU_WDTCPU2_CON1.
* To use register names with standard convension, please use SCU_WDTCPU2_CON1.
*/


/** \brief 26C, CPU2 WDT Status Register */

/** Alias (User Manual Name) for SCU_WDTCPU2_SR.
* To use register names with standard convension, please use SCU_WDTCPU2_SR.
*/


/** \brief 270, CPU3 WDT Control Register 0 */

/** Alias (User Manual Name) for SCU_WDTCPU3_CON0.
* To use register names with standard convension, please use SCU_WDTCPU3_CON0.
*/


/** \brief 274, CPU3 WDT Control Register 1 */

/** Alias (User Manual Name) for SCU_WDTCPU3_CON1.
* To use register names with standard convension, please use SCU_WDTCPU3_CON1.
*/


/** \brief 278, CPU3 WDT Status Register */

/** Alias (User Manual Name) for SCU_WDTCPU3_SR.
* To use register names with standard convension, please use SCU_WDTCPU3_SR.
*/


/** \brief 29C, ENDINIT Global Control Register 0 */


/** \brief 2A0, ENDINIT Global Control Register 1 */


/** \brief 2A4, ENDINIT Timeout Counter Status Register */


/** \brief 2A8, Safety WDT Control Register 0 */

/** Alias (User Manual Name) for SCU_WDTS_CON0.
* To use register names with standard convension, please use SCU_WDTS_CON0.
*/


/** \brief 2AC, Safety WDT Control Register 1 */

/** Alias (User Manual Name) for SCU_WDTS_CON1.
* To use register names with standard convension, please use SCU_WDTS_CON1.
*/


/** \brief 2B0, Safety WDT Status Register */

/** Alias (User Manual Name) for SCU_WDTS_SR.
* To use register names with standard convension, please use SCU_WDTS_SR.
*/


/** \brief 2B4, Safety ENDINIT Control Register 0 */


/** \brief 2B8, Safety ENDINIT Control Register 1 */


/** \brief 2BC, Safety ENDINIT Timeout Status Register */


/** \brief 3F0, Access Enable Register 11 */


/** \brief 3F4, Access Enable Register 10 */


/** \brief 3F8, Access Enable Register 01 */


/** \brief 3FC, Access Enable Register 00 */



/** \}  */

/******************************************************************************/

/******************************************************************************/


#line 66 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Scu\\Std\\IfxScuWdt.h"


#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Scu\\Std\\IfxScuWdt.asm.h"
/**
 * \file IfxScuWdt.asm.h
 * \brief SCU  basic functionality
 * \ingroup IfxLld_Scu
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxLld_Scu_Std_Wdt_Operative Wdt Operative Functionality
 * \ingroup IfxLld_Scu_Std_Wdt
 */




#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Ifx_Types.h"
/**
 * \file Ifx_Types.h
 * \brief This files defines all types used by the IFX HAL and libraries
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
























































































































































































#line 48 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Scu\\Std\\IfxScuWdt.asm.h"


/** \addtogroup IfxLld_Scu_Std_Wdt_Operative
 * \{ */

/**
 * \brief SCUWDT Inline API utility to Calculte new 14-bit LFSR.
 *
 * This API will Calculte new 14-bit LFSR (Linear Feedback Shift Register) with characteristic polynomial
 * x14+x13+x12+x2+1.
 *
 * \param password Password for which LFSR value to be calculated.
 * \return New LFSR.
 */
static inline uint16 IfxScuWdt_calculateLfsr(uint16 password);
/** \}  */

/**
 * \brief SCUWDT Inline API utility to Calculte new 14-bit LFSR.
 */
















static inline uint16 IfxScuWdt_calculateLfsr(uint16 pwd)
{
    /* *INDENT-OFF* */
    uint32 temp = pwd;
    uint16 res;

    __asm("xor.t  %0,%1,13,%1,12 \n           xor.t  %0,%0,0,%1,11  \n           sh.xor.t %1,%0,0,%1,1  \n           mov d4,#0 \n           mov d5,#14 \n           extr.u %0,%1,e4     \n" : "=&d" (res) : "d" (temp));





    return res;
    /* *INDENT-ON* */
}


































#line 68 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Scu\\Std\\IfxScuWdt.h"


/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief Endinit operation Timeout counter
 */


/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \brief Configuration structure for Scu Watchdog.
 * IfxScuWdt_Config is a type describing configuration structure of CPU and
 * Safety WDT registers defined in IfxScuWdt.h file.
 */
typedef struct
{
    uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
    uint16            reload;                              /**< \brief WDT reload value */
    IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
    boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
    boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
    boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
    boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
    boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
    boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
    IfxScu_WDTCON1_IR globalEndInitInputFrequency;         /**< \brief input frequency of the global End init WDT */
} IfxScuWdt_Config;

/** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief SCUWDT API to initialize WDT configuration structure - Constructor
 *   This API initialize the ScuWdt configuration structure to default values, these default
 *   values are for software specific, not necessarily hardware reset values.
 *   User must use this API call before IfxScuWdt_Init API call
 * \param config ScuWdt configuration structure to be initialized
 * \return None
 */
extern void IfxScuWdt_initConfig(IfxScuWdt_Config *config);

/** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
 *
 *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
 *   User can configure project specific Watchdog password, Watchdog timer period and other settings
 *   with this interface.
 *   API corresponds to one instance of the hardware module.
 *   User must use this API call for each instance of the WDT hardware module used.
 * \param wdt reference to register map of CPU WDT hardware instance
 * \param config ScuWdt configuration structure
 * \return None
 */
extern void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);

/** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
 *
 *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
 *   User can configure project specific Watchdog password, Watchdog timer period and other settings
 *   with this interface.
 *   API corresponds to one instance of the hardware module.
 *   User must use this API call for each instance of the WDT hardware module used.
 * \param wdt reference to register map of Safety WDT hardware instance
 * \param config ScuWdt configuration structure
 * \return None
 */
extern void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);

/** \} */

/** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
 *
 * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
 * This API is only meant to be used with startup routines where function call is not possible.
 * User need to use this API call before modifying any ENDINIT protected register. User must
 * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
 * ENDINIT shall not be interrupted by another interrupt/call.
 * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
 * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
static inline void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);

/** \brief Clear the Global safety Endinit password (Inline)
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
static inline void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password);

/** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
 *
 * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
 * This API is only meant to be used with startup routines where function call is not possible.
 * User need to use this API call before modifying any ENDINIT protected register. User must
 * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
 * ENDINIT shall not be interrupted by another interrupt/call.
 * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
static inline void IfxScuWdt_clearSafetyEndinitInline(uint16 password);

/** \brief API to fetch current password of global safety endinit Watchdog module.
 *
 * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
 * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
 * or store the password globally in a global variable at the application memory.
 * This API is only meant to be used with startup routines where function call is not possible.
 * \return password Existing (Application specific) password for the Watchdog module.
 */
static inline uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void);

/** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
 *
 * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
 * This API is only meant to be used with startup routines where function call is not possible.
 * User need to use this API call after modifying any ENDINIT protected register.
 * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
 * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
static inline void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);

/** \brief Set the Global safety Endinit password (Inline)
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
static inline void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password);

/** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
 *
 * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
 * This API is only meant to be used with startup routines where function call is not possible.
 * User need to use this API call after modifying any ENDINIT protected register.
 * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
static inline void IfxScuWdt_setSafetyEndinitInline(uint16 password);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
 *
 *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
 *   User need to use this API call before modifying any ENDINIT protected register. User must
 *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
 *   ENDINIT shall not be interrupted by another interrupt/call.
 *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_clearCpuEndinit(uint16 password);

/** \brief API to Clear global ENDINIT bit provided by CPU WDT Hardware module.
 *
 * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
 * This API is only meant to be used with startup routines where function call is not possible.
 * User need to use this API call before modifying any ENDINIT protected register. User must
 * always set the ENDINIT bit using other API IfxScuWdt_setGlobalEndinit. The sequence clear and set
 * ENDINIT shall not be interrupted by another interrupt/call.
 * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_clearGlobalEndinit(uint16 password);

/** \brief API to Clear global safety ENDINIT bit provided by safety WDT Hardware module.
 *
 * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
 * This API is only meant to be used with startup routines where function call is not possible.
 * User need to use this API call before modifying any ENDINIT protected register. User must
 * always set the ENDINIT bit using other API IfxScuWdt_setGlobalSafetyEndinit. The sequence clear and set
 * ENDINIT shall not be interrupted by another interrupt/call.
 * User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_clearGlobalSafetyEndinit(uint16 password);

/** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
 *
 * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
 * User need to use this API call before modifying any ENDINIT protected register. User must
 * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
 * ENDINIT shall not be interrupted by another interrupt/call.
 * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_clearSafetyEndinit(uint16 password);

/** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
 *
 *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
 *   User need to use this API call after modifying any ENDINIT protected register.
 *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_setCpuEndinit(uint16 password);

/** \brief API to set global ENDINIT bit provided by CPU WDT Hardware module.
 *
 *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
 *   User need to use this API call after modifying any ENDINIT protected register.
 *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword)
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_setGlobalEndinit(uint16 password);

/** \brief API to set global safety ENDINIT bit provided by safety WDT Hardware module.
 *
 *   This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
 *   User need to use this API call after modifying any ENDINIT protected register.
 *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword)
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_setGlobalSafetyEndinit(uint16 password);

/** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
 *
 * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
 * User need to use this API call after modifying any ENDINIT protected register.
 * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_setSafetyEndinit(uint16 password);

/** \} */

/** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
 *
 * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
 * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
 * or store the password globally in a global variable at the application memory.
 * This API is only meant to be used with startup routines where function call is not possible.
 * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
 * \return password Existing (Application specific) password for the Watchdog module.
 */
static inline uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);

/** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
 * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
 * \return Endinit status for the CPU Watchdog module.
 */
static inline boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);

/** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
 * \return Endinit status for the Safety Watchdog module.
 */
static inline boolean IfxScuWdt_getSafetyWatchdogEndInit(void);

/** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
 *
 * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
 * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
 * or store the password globally in a global variable at the application memory.
 * This API is only meant to be used with startup routines where function call is not possible.
 * \return password Existing (Application specific) password for the Watchdog module.
 */
static inline uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief SCUWDT API to change CPU Watchdog password.
 *
 *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
 *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \param newPassword Application specific new password to be changed for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);

/** \brief SCUWDT API to change CPU Watchdog timer reload value.
 *
 * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
 * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
 * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \param reload Reload value for the timer.
 * \return None
 */
extern void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);

/** \brief API to change global endinit password.
 *
 *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
 *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalEndinitPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \param newPassword Application specific new password to be changed for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_changeGlobalEndinitPassword(uint16 password, uint16 newPassword);

/** \brief API to change global safety endinit password.
 *
 *   This API will change password to new one for the corresponding to Safety WDT Hardware module.
 *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getGlobalSafetyEndinitPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \param newPassword Application specific new password to be changed for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_changeGlobalSafetyEndinitPassword(uint16 password, uint16 newPassword);

/** \brief SCUWDT API to change Safety Watchdog password.
 *
 * This API will change password to new one for the corresponding to Safety WDT Hardware module.
 * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \param newPassword Application specific new password to be changed for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);

/** \brief SCUWDT API to change Safety Watchdog timer reload value.
 *
 * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
 * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
 * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \param reload Reload value for the timer.
 * \return None
 */
extern void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);

/** \brief SCUWDT API to disable CPU Watchdog functionality.
 *
 * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
 * after this API call.
 * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_disableCpuWatchdog(uint16 password);

/** \brief SCUWDT API to disable Safety Watchdog functionality.
 *
 * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
 * after this API call.
 * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_disableSafetyWatchdog(uint16 password);

/** \brief SCUWDT API to enable CPU Watchdog functionality.
 *
 *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
 *   periodically after this API call.
 *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_enableCpuWatchdog(uint16 password);

/** \brief SCUWDT API to enable Safety Watchdog functionality.
 *
 * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
 * periodically after this API call.
 * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_enableSafetyWatchdog(uint16 password);

/** \brief SCUWDT API to fetch current password of CPU Watchdog module.
 *
 * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
 * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
 * or store the password globally in a global variable at the application memory.
 * \return password Existing (Application specific) password for the Watchdog module.
 */
extern uint16 IfxScuWdt_getCpuWatchdogPassword(void);

/** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
 * \return Endinit status for the CPU Watchdog module.
 */
extern boolean IfxScuWdt_getCpuWatchdogEndInit(void);

/** \brief API to fetch current password of global endinit Watchdog module.
 *
 * This API will fetch current global endinit password for CPU WDT Hardware module. password is needed to be passed
 * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
 * or store the password globally in a global variable at the application memory.
 * This API is only meant to be used with startup routines where function call is not possible.
 * \return password Existing (Application specific) password for the Watchdog module.
 */
extern uint16 IfxScuWdt_getGlobalEndinitPassword(void);

/** \brief API to fetch current password of global safety endinit Watchdog module.
 *
 * This API will fetch current global endinit password for Safety WDT Hardware module. password is needed to be passed
 * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
 * or store the password globally in a global variable at the application memory.
 * This API is only meant to be used with startup routines where function call is not possible.
 * \return password Existing (Application specific) password for the Watchdog module.
 */
extern uint16 IfxScuWdt_getGlobalSafetyEndinitPassword(void);

/** \brief SCUWDT API to fetch current password of Safety Watchdog module.
 *
 * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
 * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
 * or store the password globally in a global variable at the application memory.
 * \return password Existing (Application specific) password for the Watchdog module.
 */
extern uint16 IfxScuWdt_getSafetyWatchdogPassword(void);

/** \brief SCUWDT API to service CPU Watchdog functionality.
 *
 *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
 *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
 *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_serviceCpuWatchdog(uint16 password);

/** \brief SCUWDT API to service Safety Watchdog functionality.
 *
 * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
 * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
 * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
 * \param password Existing (Application specific) password for the Watchdog module.
 * \return None
 */
extern void IfxScuWdt_serviceSafetyWatchdog(uint16 password);

/** \brief SCUWDT API to fetch current status of CPU Watchdog module.
 * \return status
 */
extern uint8 IfxScuWdt_getCpuWatchdogStatus(void);

/** \} */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Enables the watchdog functionality with debugger connected,\n
 * debug interface will also be enabled, if not enabled already.
 * \return Status, Success = 0, Failure = 1.
 */
extern boolean IfxScuWdt_enableWatchdogWithDebugger(void);

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

static inline void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << (0u)) |
                           (0 << (1u)) |
                           (password << (2u)) |
                           (watchdog->CON0.B.REL << (16u));
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << (0u)) |
                       (1 << (1u)) |
                       (password << (2u)) |
                       (watchdog->CON0.B.REL << (16u));

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
    {}
}


static inline void IfxScuWdt_clearGlobalSafetyEndinitInline(uint16 password)
{
    /* Clear EndInit Watch-dog*/
    ((*(Ifx_SCU*)0xF0036000u)).SEICON0.U = (0xFFFCU << 16U) | (password << (2u));

    while (((*(Ifx_SCU*)0xF0036000u)).SEICON0.B.ENDINIT == 1)
    {}
}


static inline void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if ((*(volatile Ifx_SCU_WDTS_CON0*)0xF00362A8u).B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        (*(volatile Ifx_SCU_WDTS_CON0*)0xF00362A8u).U = (1 << (0u)) |
                          (0 << (1u)) |
                          (password << (2u)) |
                          ((*(volatile Ifx_SCU_WDTS_CON0*)0xF00362A8u).B.REL << (16u));
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    (*(volatile Ifx_SCU_WDTS_CON0*)0xF00362A8u).U = (0 << (0u)) |
                      (1 << (1u)) |
                      (password << (2u)) |
                      ((*(volatile Ifx_SCU_WDTS_CON0*)0xF00362A8u).B.REL << (16u));

    /* read back ENDINIT and wait until it has been cleared */
    while ((*(volatile Ifx_SCU_WDTS_CON0*)0xF00362A8u).B.ENDINIT == 1)
    {}
}


static inline uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
{
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
    password ^= 0x003F;

    return password;
}


static inline boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
{
    return (boolean)watchdog->CON0.B.ENDINIT;
}


static inline uint16 IfxScuWdt_getGlobalSafetyEndinitPasswordInline(void)
{
    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */

    uint16 password = ((*(Ifx_SCU*)0xF0036000u)).SEICON0.B.EPW ^ 0x003F;
    return password;
}


static inline boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
{
    return (boolean)((*(Ifx_SCU*)0xF0036000u)).WDTS.CON0.B.ENDINIT;
}


static inline uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
{
    uint16        password;
    Ifx_SCU_WDTS *watchdog = &((*(Ifx_SCU*)0xF0036000u)).WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
    password ^= 0x003F;

    return password;
}


static inline void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << (0u)) |
                           (0 << (1u)) |
                           (password << (2u)) |
                           (watchdog->CON0.B.REL << (16u));
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << (0u)) |
                       (1 << (1u)) |
                       (password << (2u)) |
                       (watchdog->CON0.B.REL << (16u));

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
    {}
}


static inline void IfxScuWdt_setGlobalSafetyEndinitInline(uint16 password)
{
    /* Set EndInit Watch-dog*/
    ((*(Ifx_SCU*)0xF0036000u)).SEICON0.U = (0xFFFCU << 16U) | (password << (2u)) | (1 << (1u));

    while (((*(Ifx_SCU*)0xF0036000u)).SEICON0.B.ENDINIT == 0)
    {}
}


static inline void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if ((*(volatile Ifx_SCU_WDTS_CON0*)0xF00362A8u).B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        (*(volatile Ifx_SCU_WDTS_CON0*)0xF00362A8u).U = (1 << (0u)) |
                          (0 << (1u)) |
                          (password << (2u)) |
                          ((*(volatile Ifx_SCU_WDTS_CON0*)0xF00362A8u).B.REL << (16u));
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    (*(volatile Ifx_SCU_WDTS_CON0*)0xF00362A8u).U = (1 << (0u)) |
                      (1 << (1u)) |
                      (password << (2u)) |
                      ((*(volatile Ifx_SCU_WDTS_CON0*)0xF00362A8u).B.REL << (16u));

    /* read back ENDINIT and wait until it has been cleared */
    while ((*(volatile Ifx_SCU_WDTS_CON0*)0xF00362A8u).B.ENDINIT == 0)
    {}
}



#line 62 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Port\\Std\\IfxPort.h"

#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Service\\CpuGeneric\\_Utilities\\Ifx_Assert.h"
/**
 * \file Ifx_Assert.h
 * \brief Assert functions.
 * \ingroup library_srvsw_utilities_assert
 *
 * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
 *
 * $Date: 2014-02-28 14:15:42 GMT$
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup library_srvsw_utilities_assert Assertion
 * This module implements assertion functions.
 * \ingroup library_srvsw_utilities
 *
 */






#line 1 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Ifx_Types.h"
/**
 * \file Ifx_Types.h
 * \brief This files defines all types used by the IFX HAL and libraries
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
























































































































































































#line 52 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\Service\\CpuGeneric\\_Utilities\\Ifx_Assert.h"

/** \addtogroup library_srvsw_utilities_assert
 * \{ */








/** \brief Constant to be used to indicate  not implemented feature */

/** \brief Feature is not available on the selected hardware */






















/** \} */


#line 63 "D:\\RTOS_PROJEKT\\erica\\aurix_workspace\\tc38_led\\Libraries\\iLLD\\TC38A\\Tricore\\Port\\Std\\IfxPort.h"

/******************************************************************************/
/*--------------------------------Enumerations--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Port_Std_Enum
 * \{ */
/** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
 * HSCT module.declared in MODULE_PORTx.LPCRx
 */
typedef enum
{
    IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
    IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
} IfxPort_ControlledBy;

/** \brief Ifx_P output modification modes definition.
 */
typedef enum
{
    IfxPort_InputMode_undefined    = -1,
    IfxPort_InputMode_noPullDevice = 0 << 3,
        IfxPort_InputMode_pullDown = 1U << 3,
        IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
} IfxPort_InputMode;

/** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
 */
typedef enum
{
    IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
    IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
} IfxPort_LvdsMode;

/** \brief Ifx_P input / output mode definition.
 *
 * \see Ifx_P.IOCR, IfxPort_setPinMode()
 */
typedef enum
{
    IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
    IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
    IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
    IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
    IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
    IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
    IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
    IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
    IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
    IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
    IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
    IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
    IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
    IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
    IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
    IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
    IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
    IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
    IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
} IfxPort_Mode;

/** \brief Pin output alternate index
 */
typedef enum
{
    IfxPort_OutputIdx_general  = 0x10U << 3,
        IfxPort_OutputIdx_alt1 = 0x11U << 3,
        IfxPort_OutputIdx_alt2 = 0x12U << 3,
        IfxPort_OutputIdx_alt3 = 0x13U << 3,
        IfxPort_OutputIdx_alt4 = 0x14U << 3,
        IfxPort_OutputIdx_alt5 = 0x15U << 3,
        IfxPort_OutputIdx_alt6 = 0x16U << 3,
        IfxPort_OutputIdx_alt7 = 0x17U << 3
} IfxPort_OutputIdx;

/** \brief Pin output mode definition
 */
typedef enum
{
    IfxPort_OutputMode_pushPull      = 0x10U << 3,
        IfxPort_OutputMode_openDrain = 0x18U << 3,
        IfxPort_OutputMode_none      = 0
} IfxPort_OutputMode;

/** \brief Pad driver mode definition (strength and slew rate).
 *
 * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
 */
typedef enum
{
    IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
    IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
    IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
    IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
    IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
    IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
    IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
    IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
    IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
    IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
    IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
    IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
} IfxPort_PadDriver;

/** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
 */
typedef enum
{
    IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
    IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
} IfxPort_PadSupply;

/** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
 */
typedef enum
{
    IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
    IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
} IfxPort_PinFunctionMode;

/** \brief Ifx_P output modification modes definition.
 *
 * \see Ifx_P.OMR, IfxPort_setPinState()
 */
typedef enum
{
    IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
    IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
    IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
    IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
} IfxPort_State;

/** \} */

/** \brief Enable/DIsable LVDS direction TX or RX
 */
typedef enum
{
    IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
    IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
} IfxPort_LvdsDirection;

/** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
 */
typedef enum
{
    IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
    IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
} IfxPort_LvdsPath;

/** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
 */
typedef enum
{
    IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
    IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
} IfxPort_LvdsPullDown;

/** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
 */
typedef enum
{
    IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
    IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
} IfxPort_LvdsTerminationMode;

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Port_Std_DataStructures
 * \{ */
/** \brief To Configure LVDS mode
 */
typedef struct
{
    IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
    IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
    IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
} IfxPort_LvdsConfig;

/** \brief Defines a pin
 */
typedef struct
{
    Ifx_P *port;
    uint8  pinIndex;
} IfxPort_Pin;

/** \brief To configure pins
 */
typedef struct
{
    Ifx_P            *port;
    uint8             pinIndex;
    IfxPort_OutputIdx mode;
    IfxPort_PadDriver padDriver;
} IfxPort_Pin_Config;

/** \} */

/** \addtogroup IfxLld_Port_Std_SinglePin
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Return the port state.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin for which the state should be returned.
 * \return Returns TRUE the pin is high; FALSE the pin is low
 *
 * Coding example:
 * \code
 *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
 *      // ...
 *    }
 * \endcode
 *
 */
static inline boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);

/** \brief set analog/digital mode for pin
 * \param port Pointer to Port register space
 * \param pinIndex specifies the pin index
 * \param mode set analog/digital mode
 * \return None
 */
static inline void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);

/** \brief Set the port output.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin to be set.
 * \return None
 *
 * Coding example:
 * \code
 * IfxPort_setPinHigh(&MODULE_P33, 0);
 * \endcode
 *
 * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
 *
 */
static inline void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);

/** \brief Reset the port output.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin to be reset.
 * \return None
 *
 * Coding example:
 * \code
 * IfxPort_setPinLow(&MODULE_P33, 0);
 * \endcode
 *
 * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
 *
 */
static inline void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);

/** \brief Configure the port input / output mode.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin to be configured.
 * \param mode Specifies the port pin mode.
 * \return None
 *
 * Coding example:
 * \code
 *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
 * \endcode
 *
 */
static inline void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);

/** \brief Configure the port input / output mode.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin to be configured.
 * \param mode Specifies the port pin mode.
 * \param index Specifies the alternate (or general purpose) output channel.
 * \return None
 *
 * Coding example:
 * \code
 *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
 * \endcode
 *
 */
static inline void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);

/** \brief Set / Resets / Toggle the port output.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin to modify.
 * \param action Specifies the action: set, reset, toggle.
 * \return None
 *
 * Coding example:
 * \code
 * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
 * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
 * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
 * \endcode
 *
 */
static inline void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);

/** \brief Toggle the port output.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin to be toggled.
 * \return None
 *
 * Coding example:
 * \code
 * IfxPort_togglePin(&MODULE_P33, 0);
 * \endcode
 *
 * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
 *
 */
static inline void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Disable the emergency stop function.
 * This function disables the emergency stop function. A check is done on port functionality.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
 * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
 *
 * Coding example:
 * /code
 *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
 *     {
 *         // failed to disable emergency stop for P33.0
 *     }
 * /endcode
 *
 * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
 *
 */
extern boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);

/** \brief Enable the emergency stop function.
 * This function enables the emergency stop function. A check is done on port functionality.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
 * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
 *
 * Coding example:
 * \code
 *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
 *       // failed to enable emergency stop for P33.0
 *     }
 * \endcode
 *
 * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
 *
 */
extern boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);

/** \brief Configure the port input / output mode.
 * Also Configures the P40/P41 Port for digital functionality
 * which bydefault support analog functionality.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin to be configured.
 * \param mode Specifies the port pin mode.
 * \return None
 *
 * Coding example:
 * \code
 *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
 * \endcode
 *
 */
extern void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);

/** \brief set lvds mode
 * \param port pointer to Port Register space
 * \param pinIndex specifies pin index
 * \param pinMode specifes the mode of pin
 * \param lvds config LVDS
 * \return None
 */
extern void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);

/** \brief Configure the pad driver mode.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin for which the mode will be set.
 * \param padDriver Specifies the driver mode.
 * \return None
 *
 * Coding example:
 * \code
 * // enable strong 3.3V driver
 * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
 * \endcode
 *
 */
extern void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);

/** \brief Enable the Pin Controller Selection.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin for which the mode has to be set.
 * \return None
 */
extern void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);

/** \brief Disable the Pin Controller Selection.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin for which the mode has to be cleared.
 * \return None
 */
extern void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);

/** \} */

/** \addtogroup IfxLld_Port_Std_PortGroup
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Return the port group state
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex start at the given pin
 * \param mask selects the pins which should be read (starting from pinIndex)
 * \return Returns the selected pin values
 *
 * Coding example:
 * \code
 * // read the current value of P33[7:0]
 * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
 * \endcode
 *
 */
static inline uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);

/** \brief Set the port group state.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex start at the given pin
 * \param mask selects the pins which should be modified (starting from pinIndex)
 * \param data specifies the value which should be set
 * \return None
 *
 * Coding example:
 * \code
 * // configure P33.[7:0] as GPIO outputs
 * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
 *
 * // set initial value
 * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
 * \endcode
 *
 */
static inline void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Returns the module address of the selected Port module
 * \param port Pointer to PORT module registers
 * \return PORT module register address
 */
extern Ifx_P *IfxPort_getAddress(IfxPort_Index port);

/** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
 * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
 * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
 */
extern IfxPort_Index IfxPort_getIndex(Ifx_P *port);

/** \brief Set pin modes to input at the pin location specified by '1' by the mask
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex start at the given pin
 * \param mask selects the pins which should be modified (starting from pinIndex)
 * \param mode Specifies the port pin mode.
 * \return None
 *
 * Coding example:
 * \code
 * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
 * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
 *  \endcode
 *
 */
extern void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);

/** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex start at the given pin
 * \param mask selects the pins which should be modified (starting from pinIndex)
 * \param mode Specifies the port pin mode.
 * \param index Specifies the alternate (or general purpose) output channel.
 * \return None
 *
 * Coding example:
 * \code
 * // configure P33.[7:0] as GPIO outputs
 * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
 * \endcode
 *
 */
extern void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);

/** \brief Set pad driver strength at the pin location specified by '1' by the mask
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex start at the given pin
 * \param mask selects the pins which should be modified (starting from pinIndex)
 * \param padDriver Specifies the pad driver strength.
 * \return None
 *
 * Coding example:
 * \code
 * // configure P33.[7:0] to use CMOS pad driver with speed 1
 * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
 * \endcode
 *
 */
extern void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);

/** \} */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Disable the emergency stop function.
 * This function disables the emergency stop function. No check is done on port functionality.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
 * \return None
 *
 * \see IfxPort_disableEmergencyStop()
 *
 */
extern void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);

/** \brief Enable the emergency stop function.
 * This function enables the emergency stop function. No check is done on port functionality.
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
 * \return None
 *
 * \see IfxPort_enableEmergencyStop()
 *
 */
extern void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);

/**
 * \param port Pointer to the port which should be accessed.
 * \param pinIndex Specifies the pin for which the mode has to be set.
 * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
 * 0-> normal function
 * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
 * \return None
 */
extern void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

static inline uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
{
    return (uint32)((port->IN.U) >> (pinIndex)) & mask;
}


static inline boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
{
    return (__getbit(&port->IN.U, pinIndex) != 0) ? (1u) : (0u);
}


static inline void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
{
    port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
}


static inline void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    port->PDISC.U |= (mode << pinIndex);
    IfxScuWdt_setCpuEndinit(passwd);
}


static inline void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
{
    IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
}


static inline void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
{
    IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
}


static inline void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
}


static inline void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
}


static inline void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
}


static inline void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex)
{
    IfxPort_setPinState(port, pinIndex, IfxPort_State_toggled);
}



#line 32 "D:/RTOS_PROJEKT/erica/aurix_workspace/tc38_led/ee/Blinky_LED.c"
//#include "Bsp.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/




















/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
/* This function initializes the port pin which drives the LED */
void initLED(void)
{
    /* Initialization of the LED used in this example */
    IfxPort_setPinModeOutput(&((*(Ifx_P*)0xF003AF00u)),0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(&((*(Ifx_P*)0xF003C200u)),4, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003AB00u)),15, IfxPort_InputMode_pullUp);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003C200u)),4, IfxPort_InputMode_pullUp);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003AB00u)),8, IfxPort_InputMode_noPullDevice);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003AB00u)),9, IfxPort_InputMode_noPullDevice);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003AB00u)),10, IfxPort_InputMode_noPullDevice);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003AB00u)),11, IfxPort_InputMode_noPullDevice);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003AB00u)),12, IfxPort_InputMode_noPullDevice);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003AB00u)),0, IfxPort_InputMode_noPullDevice);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003AB00u)),1, IfxPort_InputMode_noPullDevice);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003AB00u)),2, IfxPort_InputMode_noPullDevice);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003AB00u)),3, IfxPort_InputMode_noPullDevice);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003AB00u)),4, IfxPort_InputMode_noPullDevice);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003AB00u)),5, IfxPort_InputMode_noPullDevice);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003AB00u)),6, IfxPort_InputMode_noPullDevice);
    IfxPort_setPinModeInput(&((*(Ifx_P*)0xF003AB00u)),7, IfxPort_InputMode_noPullDevice);

    IfxPort_setPinModeOutput(&((*(Ifx_P*)0xF003AB00u)),15, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(&((*(Ifx_P*)0xF003AB00u)),15, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);

    /* Switch OFF the LED (low-level active) */
    IfxPort_setPinHigh(&((*(Ifx_P*)0xF003AF00u)),0);
    IfxPort_setPinHigh(&((*(Ifx_P*)0xF003C200u)),4);
    IfxPort_setPinHigh(&((*(Ifx_P*)0xF003AB00u)),15);
}

/* This function toggles the port pin and wait 500 milliseconds */
void blinkLED(void)
{
    IfxPort_togglePin(&((*(Ifx_P*)0xF003AF00u)),0);                                                /* Toggle the state of the LED      */
    IfxPort_togglePin(&((*(Ifx_P*)0xF003C200u)),4);
    IfxPort_togglePin(&((*(Ifx_P*)0xF003AB00u)),15);
    //waitTime(IfxStm_getTicksFromMilliseconds(BSP_DEFAULT_TIMER, WAIT_TIME));    /* Wait 500 milliseconds            */

}
void switch_LED(unsigned int state)
{
    if (state == 0)
    {
        IfxPort_setPinState(&((*(Ifx_P*)0xF003AF00u)),0, IfxPort_State_low);
    }else
    {
        IfxPort_setPinState(&((*(Ifx_P*)0xF003AF00u)),0,IfxPort_State_high);
    }
}
