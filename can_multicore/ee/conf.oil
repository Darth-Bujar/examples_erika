/* ###*B*###
 * Erika Enterprise, version 3
 * 
 * Copyright (C) 2017 - 2018 Evidence s.r.l.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License, version 2, for more details.
 * 
 * You should have received a copy of the GNU General Public License,
 * version 2, along with this program; if not, see
 * < www.gnu.org/licenses/old-licenses/gpl-2.0.html >.
 * 
 * This program is distributed to you subject to the following
 * clarifications and special exceptions to the GNU General Public
 * License, version 2.
 * 
 * THIRD PARTIES' MATERIALS
 * 
 * Certain materials included in this library are provided by third
 * parties under licenses other than the GNU General Public License. You
 * may only use, copy, link to, modify and redistribute this library
 * following the terms of license indicated below for third parties'
 * materials.
 * 
 * In case you make modified versions of this library which still include
 * said third parties' materials, you are obligated to grant this special
 * exception.
 * 
 * The complete list of Third party materials allowed with ERIKA
 * Enterprise version 3, together with the terms and conditions of each
 * license, is present in the file THIRDPARTY.TXT in the root of the
 * project.
 * ###*E*### */

CPU test_application 
{

  OS EE 
  {
    /* EE_OPT = "OS_EE_VERBOSE"; */
    EE_OPT = "OSEE_DEBUG";
    EE_OPT = "OSEE_ASSERT";
    EE_OPT = "OS_EE_APPL_BUILD_DEBUG";
    EE_OPT = "OS_EE_BUILD_DEBUG";
    //EE_OPT = "OSEE_TC_LINK_BMHD";
    //EE_OPT = "OSEE_TC_CLONE_OS";

    CPU_DATA = TRICORE 
    {
      ID = 0x0;
      CPU_CLOCK = 200.0;
      COMPILER = TASKING;
      IDLEHOOK = TRUE 
      {
        HOOKNAME = "idle_hook_core0";
      };
      
    };

    CPU_DATA = TRICORE 
    {
      ID = 0x1;
      MULTI_STACK = TRUE;
      IDLEHOOK = TRUE 
      {
        HOOKNAME = "idle_hook_core1";
      };
    };

    MCU_DATA = TC39X 
    {
      DERIVATIVE = "tc387xe";
    };

    STATUS = EXTENDED;
    ERRORHOOK = TRUE;
    USERESSCHEDULER = FALSE;

    USEORTI = TRUE;

    KERNEL_TYPE = OSEK 
    {
      CLASS = ECC1;
//      RQ    = MQ;
    };
    
  };

  APPDATA tricore_2G_mc 
  {
    APP_SRC="cpu0_appl.c";
    APP_SRC="cpu1_appl.c";
    APP_SRC="can_control.c";
  };

	//SPINLOCK spinlock_can_sw_buffer {};
  //RESOURCE mutex_can_data { RESOURCEPROPERTY = ; };
    EVENT can_sw_buffer_full  { MASK = AUTO; };

// TASKS
//  TASK task_can_rx_msg_processing_cpu0 
//  {
//  	//RESOURCE = mutex_can_data;
//    CPU_ID = 0x0;
//    PRIORITY = 10;
//    ACTIVATION = 1;
//  };
//  
  TASK task_can_tx_msg_processing_cpu1 
  {
    CPU_ID = 0x1;
    PRIORITY = 10;
    ACTIVATION = 1;
    STACK = PRIVATE {
      SIZE = 256;
    };
	EVENT = can_sw_buffer_full;
  };

  TASK task_keep_alive_cpu0 
  {
    CPU_ID = 0x0;
    PRIORITY = 1;

  };

// ISR
//  ISR can_isr_rx_handler_func {
//		CPU_ID = 0x0;
//		CATEGORY = 1;
//		SOURCE = "CAN_CAN0_INT2";
//		PRIORITY = 12;
//   };
   
   ISR can_isr_fifo0_msg_lost {
		CPU_ID = 0x0;
		CATEGORY = 1;
		SOURCE = "CAN_CAN0_INT1";
		PRIORITY = 11;
   };
   
   ISR can_isr_tx_success {
		CPU_ID = 0x0;
		CATEGORY = 1;
		SOURCE = "CAN_CAN0_INT4";
		PRIORITY = 14;
   };
   
   ISR can_isr_fifo0_full {
		CPU_ID = 0x0;
		CATEGORY = 2;
		SOURCE = "CAN_CAN0_INT3";
		PRIORITY = 13;
   };

// COUNTERS
  COUNTER system_timer_cpu0 
  {
    CPU_ID = 0x0;
    MINCYCLE = 1;
    MAXALLOWEDVALUE = 2147483647;
    TICKSPERBASE = 1;
    TYPE = HARDWARE {
        DEVICE = "STM_SR0";
        SYSTEM_TIMER = TRUE;
        PRIORITY = 2;
    };
    SECONDSPERTICK = 0.001;
  };

//  COUNTER system_timer_cpu1
//  {
//    CPU_ID = 0x2;
//    MINCYCLE = 1;
//    MAXALLOWEDVALUE = 2147483647;
//    TICKSPERBASE = 1;
//    TYPE = HARDWARE
//     {
//      DEVICE = "STM_SR0";
//      SYSTEM_TIMER = TRUE;
//      PRIORITY = 2;
//    };
//    SECONDSPERTICK = 0.001;
//  };
  
// ALARMS
  ALARM keep_alive_alarm_cpu0_1s
  {
    COUNTER = system_timer_cpu0;
    ACTION = ACTIVATETASK { TASK = task_keep_alive_cpu0; };
    AUTOSTART = TRUE { ALARMTIME = 100; CYCLETIME = 1000; };
  };

//  ALARM can_rx_msg_processing_cpu0_100ms 
//  {
//    COUNTER = system_timer_cpu0;
//    ACTION = ACTIVATETASK { TASK = task_can_rx_msg_processing_cpu0; };
//    AUTOSTART = TRUE { ALARMTIME = 50; CYCLETIME = 100; };
//  };
};
