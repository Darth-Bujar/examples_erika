/**********************************************************************************************************************
 * \file SPI_CPU.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef QSPI_CPU_H_
#define QSPI_CPU_H_


/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxQspi_SpiMaster.h"
#include "can_control.h"
#include <stdbool.h>
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define SPI_BUFFER_SIZE     8192                       /* Buffers size                  */
#define RELOAD_VALUE        2u                  /* Reload value to have an interrupt each 500ms         */


#define QSPI_MOSI                  &MODULE_P34,2
#define QSPI_MISO                  &MODULE_P34,3
#define QSPI_CLK                   &MODULE_P33,1
#define QSPI_CS                    &MODULE_P33,2
#define SD_CD                      &MODULE_P34,1

#define RISING 1
#define FALLING 0

enum
{
    RX_EVENT,
    TX_EVENT,
    ERROR_EVENT,
    INFO_EVENT
}
typedef struct
{
    can_message msg;
    log_type type;

}log_item;
/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
/* This function initialize the QSPI modules */
void initQSPI(void);

/* This function to initialize the QSPI modules and the LED */
void initPeripherals(void);

/* Load data to the transmit buffer */
void set_tx_buff(uint8 *tx, uint16 len);

/* Get data from the receive buffer */
void get_rx_buff(uint8 *rx, uint16 len);

/* Check ready status of the spi */
uint8 get_rdy(void);


void initGpt12Timer(void);

void initQSPI2Master(void);


/* QSPI Master SW buffer initialization
 * This function initializes SW buffers the Master uses.
 */
void initQSPI2MasterBuffers(void);

/*Helper functions to clean up buffers*/
void clear_first_byte_of_rx_buff(void);
void clear_first_n_bytes_of_rx_buff(uint16 len);
void clear_first_n_bytes_of_tx_buff(uint16 len);

/* This function to initialize the LED */
void initLED(void);


/**
 * @brief Self-explaining name
 */
void qspiTransfer(uint16 len);

/**
 * @brief Self-explaining name
 */
void __setBit(uint8 state);

/**
 * @brief Self-explaining name
 */
void __setCS(uint8 state);

/**
 * @brief Self-explaining name
 */
void __setMOSI(uint8 state);

/**
 * @brief Self-explaining name
 */
void __setCLK(uint8 state);

/**
 * @brief Self-explaining name
 */
uint8 __getMISO(void);

/**
 * @brief Self-explaining name
 */
void __setGPIO(Ifx_P *port, uint8 pinIndex, uint8 state);

/**
 * @brief Add a data to log bufer
 * 
 * @param  log - pointer to a log_item stucture to be filled
 * @return TRUE - log stored inW buffer
 *         FALSE - buffer is empty/cannot access
 */
boolean log_buffer_write_message(log_item* ;pg)

/**
 * @brief Return a pointer to log_item in log buffer.
 * 
 * @param  log - pointer to a log_item stucture to be filled
 * @return TRUE - next message stored in SW buffer
 *         FALSE - buffer is empty/cannot access
 */
boolean log_buffer_pick_message(log_item* log)

/**
 * @brief Write log using SPI peripheral
 * 
 * @param  log - pointer to a log
 * @return TRUE - log has been written
 *         FALSE - log has NOT been written
 */
boolean spi_write_log(log_item* log);

/**
 * @brief incrementing index of log buffer
 */
void log_buffer_move_index(void);


#endif /* QSPI_CPU_H_ */
