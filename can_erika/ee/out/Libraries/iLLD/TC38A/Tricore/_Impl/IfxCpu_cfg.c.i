#line 1 "E:/Projects/Erika/aurix_workspace/can_erika/ee/../Libraries/iLLD/TC38A/Tricore/_Impl/IfxCpu_cfg.c"
/**
 * \file IfxCpu_cfg.c
 * \brief CPU on-chip implementation data
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2017 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/


#line 1 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\ee\\..\\Libraries\\iLLD\\TC38A\\Tricore\\_Impl\\IfxCpu_cfg.h"
/**
 * \file IfxCpu_cfg.h
 * \brief CPU on-chip implementation data
 * \ingroup IfxLld_Cpu
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxLld_Cpu CPU
 * \ingroup IfxLld
 * \defgroup IfxLld_Cpu_Impl Implementation
 * \ingroup IfxLld_Cpu
 * \defgroup IfxLld_Cpu_Std Standard Driver
 * \ingroup IfxLld_Cpu
 */




/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/


#line 1 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\IfxCpu_Intrinsics.h"
/**
 * \file IfxCpu_Intrinsics.h
 * \ingroup IfxLld_Cpu_Intrinsics Intrinsics
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxLld_Cpu_Intrinsics Intrinsics
 * \ingroup IfxLld_Cpu_Std
 *
 */


/******************************************************************************/

#line 1 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Ifx_Types.h"
/**
 * \file Ifx_Types.h
 * \brief This files defines all types used by the IFX HAL and libraries
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */




/******************************************************************************/

#line 1 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\Infra\\Platform\\Tricore\\Compilers\\Compilers.h"
/**
 * \file Compilers.h
 *
 * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
 *
 * $Date: 2014-04-07 12:13:19 GMT$
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */




/******************************************************************************/


#line 1 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Configurations\\Ifx_Cfg.h"
/**********************************************************************************************************************
 * \file Ifx_Cfg.h
 * \brief Project configuration file.
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/




/*********************************************************************************************************************/
/*------------------------------------------Configuration for IfxScu_cfg.h-------------------------------------------*/
/*********************************************************************************************************************/
/* External oscillator frequency in Hz */

/* System PLL frequency in Hz */


/* Peripheral PLL1 frequency in Hz */

/* Peripheral PLL2 frequency in Hz */


/*********************************************************************************************************************/
/*-----------------------------------Configuration for Software managed interrupt------------------------------------*/
/*********************************************************************************************************************/
/* #define IFX_USE_SW_MANAGED_INT */ /* Decomment this line if the project needs to use Software managed interrupts */

/*********************************************************************************************************************/
/*---------------------------------Configuration for Trap Hook Functions' Extensions---------------------------------*/
/*********************************************************************************************************************/
/* #define IFX_CFG_EXTEND_TRAP_HOOKS */ /* Decomment this line if the project needs to extend trap hook functions */


#line 47 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\Infra\\Platform\\Tricore\\Compilers\\Compilers.h"

/*this file shall not be modified by the user, IFX_XXXX defines shall be defined in Ifx_Cfg.h */





































#line 1 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\Infra\\Platform\\Tricore\\Compilers\\CompilerTasking.h"
/**
 * \file CompilerTasking.h
 *
 * \version iLLD_New
 * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */




/******************************************************************************/


#line 1 "C:\\Infineon\\AURIX-Studio-1.9.4\\plugins\\com.infineon.aurix.tools_1.9.4\\build_system\\tools\\Compilers\\Tasking_1.1r8\\ctc\\include\\stddef.h"
/**************************************************************************
**                                                                        *
**  FILE        :  stddef.h                                               *
**                                                                        *
**  DESCRIPTION :  Include file with macros for common use                *
**                                                                        *
**  Copyright 1996-2022 Altium BV                                         *
**                                                                        *
**************************************************************************/






#pragma nomisrac 19.7,19.10,20.1







typedef __size_t        size_t;




typedef __wchar_t       wchar_t;



typedef __ptrdiff_t     ptrdiff_t;













#pragma nomisrac restore


#line 47 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\Infra\\Platform\\Tricore\\Compilers\\CompilerTasking.h"

/*Linker definitions which are specific to Tasking */
/* IFX_CFG_USE_COMPILER_DEFAULT_LINKER shall be defined in Ifx_Cfg.h
 * to use the default compiler linker varaibles and startup */



/*Start: Common definitions ********************************************** */



/*End: Common definitions ********************************************** */

/*Start: Core 0 definitions ********************************************** */

















/*Wrapper macros for the tool specific definitions */















/******************************************************************************/






/* FXIME check how to pack structure members */





/* Note that __REVISION__ is only available for tasking compiler! */


/******************************************************************************/








/* *INDENT-OFF* */









/* *INDENT-ON* */

/******************************************************************************/



/******************************************************************************/
/*Memory qualifiers*/























/******************************************************************************/


#line 86 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\Infra\\Platform\\Tricore\\Compilers\\Compilers.h"

















































/* Functions prototypes                                                       */
/******************************************************************************/
void Ifx_C_Init(void);
/******************************************************************************/



#line 47 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Ifx_Types.h"

#line 1 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Platform_Types.h"
/**
 * \file Platform_Types.h
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */



/******************************************************************************
**                      Includes                                             **
******************************************************************************/

/******************************************************************************
**                      Global Macro Definitions                             **
******************************************************************************/








/* [cover parentID={5294D975-045A-4d91-9A1A-B1765FAB4653}] */
/* CPU register width type definition */



/* Register width of CPU*/

/* [/cover] */


/* [cover parentID={FBA2FA55-430B-4dfb-82B1-C791F0878F9B}] */
/* Bit order type definition*/


/* Bit order of Register level*/

/* [/cover] */


/* [cover parentID={0E2E6A28-264A-4d32-96EE-5F5C93286311}] */
/* Byte order type definition*/


/* Byte order on Memory level*/

/* [/cover] */


/* TRUE, FALSE symbol for Boolean types*/
/* [cover parentID={FF7F9840-8904-4b7d-83A7-988524B795DE}] */






/* [/cover] */
/******************************************************************************
**                      Global Type Definitions                              **
******************************************************************************/
/* AUTOSAR integer data types*/

/* unsigned char with a bit length that is the shortest one natively supported
  by the platform.*/
/* [cover parentID={F7B51F71-6687-4e05-8408-7F5AAC55C638}] boolean [/cover]*/
typedef unsigned char       boolean;        /* for use with TRUE/FALSE      */

/* 8bit unsigned :  0 .. 255 [0X00 .. 0XFF]*/
/* [cover parentID={4269E5AB-7F28-4803-8D60-7B4EC91CB087}] uint8 [/cover] */
typedef unsigned char       uint8;

/* 16bit unsigned:  0..65535 [0x0000..0xFFFF]*/
/* [cover parentID={66E964CA-35D5-4013-BB61-1E824636D713}] uint16 [/cover] */
typedef unsigned short      uint16;

/* 32bit unsigned:  0..4294967295 [0x00000000..0xFFFFFFFF]*/
/* [cover parentID={DA33B7A0-7CD3-45e7-9C9A-6D63FB8BA3DC}] uint32 [/cover] */
typedef unsigned long       uint32;

/* 64bit unsigned
*          0..18446744073709551615   [0x0000000000000000..0xFFFFFFFFFFFFFFFF]*/
/* [cover parentID={3409E2A3-BF2D-44a5-9B00-A72300848166}] uint64 */
typedef unsigned long long  uint64;

/* 8bit signed, 7 bit + 1 bit sign -128..+127 [0x80..0x7F]*/
/* [cover parentID={94E0756B-993D-4cae-9499-416CDFD6FEAF}] sint8[/cover]*/
typedef signed char         sint8;

/* 16bit signed, 15 bit + 1 bit sign -32768..+32767 [0x8000..0x7FFF]*/
/* [cover parentID={B3482DFF-8DFF-41bd-95E0-0406E2451CB0}] sint16 [/cover]*/
typedef short               sint16;

/* 32bit signed, 31 bit + 1 bit sign
 -2147483648..+2147483647 [0x80000000..0x7FFFFFFF]*/
/* [cover parentID={B027B471-A1A2-456c-A015-35F4A34A88EF}] sint32 [/cover]*/
typedef long                sint32;
/*
* 64bit signed, 63 bit + 1 bit sign
* -9223372036854775808..9223372036854775807
* [0x8000000000000000..0x7FFFFFFFFFFFFFFF]
*/
/* [cover parentID={3CF3471C-EB1A-450c-B78F-4B96D226A1F5}] sint64 [/cover]*/
typedef long long           sint64;

/* At least 8 bit*/
/* [cover parentID={F8719785-0A16-486e-AB85-0A2859402037}] uint8_least[/cover]*/
typedef unsigned long       uint8_least;

/* At least 16 bit*/
/* [cover parentID={BEAD868D-0EC1-44f0-AFEE-B57401CC9E65}]uint16_least[/cover]*/
typedef unsigned long       uint16_least;

/* least 32 bit*/
/* [cover parentID={9B9CC46A-0F61-4d25-8001-679CF210C135}]uint32_least[/cover]*/
typedef unsigned long       uint32_least;

/* At least 7 bit + 1 bit sign*/
/* [cover parentID={5C0DE046-8407-4708-8D26-41B96731D89D}]sint8_least[/cover]*/
typedef signed long         sint8_least;

/* At least 15 bit + 1 bit sign*/
/* [cover parentID={0A83DB6E-ECD8-42f0-B97C-057F9FBFEB6E}]sint16_least[/cover]*/
typedef signed long         sint16_least;

/* At least 31 bit + 1 bit sign*/
/* [cover parentID={A65F0248-A0A7-4ab7-BAFA-A5428F4E8A96}]sint32_least[/cover]*/
typedef signed long         sint32_least;

/* IEEE754-2008 single precision
* -3.4028235e+38..+3.4028235e+38*/
/* [cover parentID={BBC4F70E-DA81-4d37-BCA4-628A89B29517}] float32  [/cover]*/
typedef float               float32;        /* IEEE754-2008 single precision */

/* IEEE754-2008 double precision
* -1.7976931348623157e+308..+1.7976931348623157e+308*/
/* [cover parentID={0D62172C-9309-493a-8028-06A7299D7906}] float64 [/cover]*/
typedef double              float64;        /* IEEE754-2008 double precision */


/******************************************************************************
**                      Global Constant Declarations                         **
******************************************************************************/

/******************************************************************************
**                      Global Variable Declarations                         **
******************************************************************************/

/******************************************************************************
**                      Global Function Declarations                         **
******************************************************************************/


#line 48 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Ifx_Types.h"

/*******************************************************************************
**                      Global Data Types                                     **
**                      (Types not defined by AUTOSAR)                        **
*******************************************************************************/
typedef const char        *pchar;                           /**< \brief const char pointer                               */
typedef void              *pvoid;                           /**< \brief void pointer                                     */
typedef volatile void     *vvoid;                           /**< \brief volatile void pointer                            */
typedef void              (*voidfuncvoid) (void);           /**< \brief void pointer which takes void argument           */

typedef struct
{
    float32 real;               /**< \brief Real part */
    float32 imag;               /**< \brief Imaginary part */
} cfloat32;

typedef struct
{
    sint32 real;				/**< \brief Real part */
    sint32 imag;				/**< \brief Imaginary part */
} csint32;

typedef struct
{
    sint16 real;				/**< \brief Real part */
    sint16 imag;				/**< \brief Imaginary part */
} csint16;

typedef sint64             Ifx_TickTime;    /**< \brief Time in ticks */












typedef sint16 Ifx_SizeT;                       /**< \brief Type used for data stream size */


/** \brief Circular buffer definition. */
typedef struct
{
    void  *base;                   /**< \brief buffer base address */
    uint16 index;                  /**< \brief buffer current index */
    uint16 length;                 /**< \brief buffer length*/
} Ifx_CircularBuffer;

typedef uint16 Ifx_Priority;       /**< \brief Used in interrupt service priorities */
typedef uint32 Ifx_TimerValue;     /**< \brief Used in timer values */
typedef sint32 Ifx_SignedTimerVal; /**< \brief Used in signed timer values */

typedef pvoid  Ifx_AddressValue;   /**< \brief Used in address values */

typedef struct
{
    uint16 priority;
    uint16 provider;
} Ifx_IsrSetting;

/** \brief Signal active state definition. */
typedef enum
{
    Ifx_ActiveState_low  = 0,       /**< \brief The signal is low active */
    Ifx_ActiveState_high = 1        /**< \brief The signal is high active */
} Ifx_ActiveState;

typedef enum
{
    Ifx_ParityMode_even = 0,
    Ifx_ParityMode_odd  = 1
} Ifx_ParityMode;

/** \brief input multiplexer definition used in PinMaps
 */
typedef enum
{
    Ifx_RxSel_a,
    Ifx_RxSel_b,
    Ifx_RxSel_c,
    Ifx_RxSel_d,
    Ifx_RxSel_e,
    Ifx_RxSel_f,
    Ifx_RxSel_g,
    Ifx_RxSel_h
} Ifx_RxSel;

/** \brief Module address and index map */
typedef struct
{
    volatile void *module;      /**< \brief Module address */
    sint32         index;       /**< \brief Module index */
} IfxModule_IndexMap;

typedef struct
{
    Ifx_TickTime timestamp;
    uint8        data;
}Ifx_DataBufferMode_TimeStampSingle;

/*
 * typedef struct
 * {
 *  Ifx_TickTime timestamp;
 *  uint8 count[1];     // Number of valid data
 *  uint8 data[7];
 * }Ifx_DataBufferMode_TimeStampBurst;
 */

typedef enum
{
    Ifx_DataBufferMode_normal = 0,           /**< \brief normal mode, each received byte is moved to the rx fifo */
    Ifx_DataBufferMode_timeStampSingle,      /**< \brief Single byte type stamp mode. The rx fifo is filled in with Ifx_DataBufferMode_TimeStampSingle items. */
//    Ifx_DataBufferMode_timeStameBurst      /**< \brief Burst byte type stamp mode. The rx fifo is filled in with Ifx_DataBufferMode_TimeStampBurst items. */
}Ifx_DataBufferMode;

/**
 * Defines the PWM modes
 *
 * The 1st member shall start with value 0, and the next members value shall be the previous member +1
 * pwmMode_off shall be the member with the higher index
 * \note enum order and values should not be modified, except Ifx_Pwm_Mode_init and Ifx_Pwm_Mode_count
 */
typedef enum
{
    Ifx_Pwm_Mode_centerAligned         = 0, /**< \brief Center aligned mode */
    Ifx_Pwm_Mode_centerAlignedInverted = 1, /**< \brief Center aligned inverted aligned mode */
    Ifx_Pwm_Mode_leftAligned           = 2, /**< \brief Left aligned mode. The PWM period starts with a rising edge */
    Ifx_Pwm_Mode_rightAligned          = 3, /**< \brief Right aligned mode. The PWM period starts with a falling edge*/
    Ifx_Pwm_Mode_off                   = 4, /**< \brief All switch open */
    Ifx_Pwm_Mode_init                  = 5, /**< \brief Initialisation mode, do not use at run time */
    Ifx_Pwm_Mode_count                      /**< \brief Number of defined modes */
} Ifx_Pwm_Mode;






#line 1 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Ifx_TypesTasking.h"
/**
 * \file Ifx_TypesTasking.h
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2012 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


/******************************************************************************/




/******************************************************************************/

/******************************************************************************/


#line 191 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\Ifx_Types.h"














typedef struct
{
    __fract real;				/**< \brief Real part */
    __fract imag;				/**< \brief Imaginary part */
} cfract;

typedef struct
{
    __sfract real;				/**< \brief Real part */
    __sfract imag;				/**< \brief Imaginary part */
} csfract;









#line 48 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\IfxCpu_Intrinsics.h"









#line 1 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\IfxCpu_IntrinsicsTasking.h"
/**
 * \file IfxCpu_IntrinsicsTasking.h
 *
 * \version iLLD_1_0_1_15_0_1
 * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxLld_Cpu_Intrinsics_Tasking Intrinsics for TASKING compiler
 * \ingroup IfxLld_Cpu_Intrinsics
 *
 */


/******************************************************************************/

/******************************************************************************/
/* *INDENT-OFF* */


/** Function call without return
 */


/** Jump and link
 */
static inline void Ifx__jump_and_link(void (*fun)(void))
{
	__asm("jli %0"::"a"(fun));
}

static inline void Ifx__moveToDataParam0(unsigned int var)
{
	__asm("mov d4, %0"::"d"(var));
}

static inline void Ifx__moveToAddrParam0(const void *var)
{
	__asm("mov.aa a4, %0"::"a"(var));
}

static inline unsigned int Ifx__getDataParamRet(void)
{
	unsigned int var;
	__asm(" mov\t %0, d2":"=d"(var));
	return var;
}

static inline void Ifx__moveToDataParamRet(unsigned int var)
{
	__asm("mov d2, %0"::"d"(var));
}

static inline void Ifx__jumpToFunction(const void *fun)
{
	__asm("\tji %0"::"a"(fun));
}

static inline void Ifx__jumpToFunctionWithLink(const void *fun)
{
	Ifx__jump_and_link((void (*)(void))fun);
}

static inline void Ifx__jumpBackToLink(void)
{
	__asm("ji a11");
}

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_any_type Cross type arithmetic operation
 *
 * Macro compatible with float, fix point, signed integer and unsigned integer
 *
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */




/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_singed_integer Signed integer operation
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */

/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_unsinged_integer Unsigned integer operation
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */

/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_float Floating point operation
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */




















/** \} */
/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_fractional Fractional Arithmetic Support
 The next table provides an overview of intrinsic functions to convert fractional values. Note that the
 TASKING VX-toolset C compiler for TriCore fully supports the fractional type so normally you should not
 need these intrinsic functions (except for __mulfractlong). For compatibility reasons the TASKING C
 compiler does support these functions.
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */






/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_insert Insert / Extract Bit-fields and Bits
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */









/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_interrupt_handling Interrupt Handling
 The next table provides an overview of the intrinsic functions to read or set interrupt handling.
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */




/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_miscellaneous Miscellaneous Intrinsic Functions
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */

/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_packed Packed Data Type Support
 The next table provides an overview of the intrinsic functions for initialization of packed data type.
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */

/** \} */


/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_register Register Handling
 The next table provides an overview of the intrinsic functions that you can use to access control registers.
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */



/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_saturation Saturation Arithmetic Support
 These intrinsics support saturation arithmetic
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */









/** \} */

/** \defgroup IfxLld_Cpu_Intrinsics_Tasking_single_assembly Insert Single Assembly Instruction
 The next table provides an overview of the intrinsic functions that you can use to insert a single assembly
 instruction.You can also use inline assembly but these intrinsics provide a shorthand for frequently used
 assembly instructions.
 * \ingroup IfxLld_Cpu_Intrinsics_Tasking
 * \{
 */

static inline void Ifx__nops(void* cnt)
{
    __asm("nop16 \n\t"
          "loop %0,*-2"
          ::"a"(((char*)cnt) - 1));
}



/** Insert a memory barrier
 */











static inline void Ifx__ldmstAsm(volatile void *addr, uint32 mask, uint32 data)
{
    __asm("\tmov d3, %1 \n"
          "\tmov d2, %2 \n"
          "\tldmst [%0],e2"
          ::"a"(addr), "d"(mask), "d"(data):"d2", "d3");

}

/** Convert float to fract
 */
static inline __fract Ifx__float_to_fract(float a)
{
    __fract res;
    __asm("ftoq31  %0,%1,%2":"=d"(res):"d"(a), "d"(0):"memory");
    return res;
}



/** Convert float to sfract
 */
static inline __sfract Ifx__float_to_sfract(float a)
{
    __fract tmp = Ifx__float_to_fract(a);
    return __round16(tmp);
}




static inline void Ifx__stopPerfCounters(void)
{ //__mtcr (CPU_CCTRL, 0);
    __asm(
            "    mov d0,#0\n"
            "    mtcr #0xFC00,d0\n"
            "    isync\n"
            :::"d0");
}

/** \} */

/* FIXME use inline instead of #define */
/* FIXME is it really required to have #define __setareg(areg,val) ___setareg(areg,val) or can __setareg() implemented directly */




/** \brief This function is a implementation of a binary semaphore using compare and swap instruction
 * \param address address of resource.
 * \param value This variable is updated with status of address
 * \param condition if the value of address matches with the value of condition, then swap of value & address occurs.
 *
 */



/** \brief Convert a fixpoint value to float32
 *
 * This function converts a value from a fixpoint format to a float32 format.
 *
 *
 * \param value value to be converted.
 * \param shift position of the fix point. Range = [-256, 255] => (Qx.y format where x = shift+1).
 *
 * \return Returns the converted value in the float32 format.
 *
 */
static inline float32 Ifx__fixpoint_to_float32(__fract value, sint32 shift)
{
    float32 result;

    __asm(
        "   q31tof\t%0, %1, %2  \n"
        : "=d" (result)
        : "d" (value), "d" (shift));
    return result;
}

static inline void* Ifx__getA11(void)
{
    unsigned int *res;
    __asm("mov.aa %0, a11": "=a" (res) : :"a11");
    return res;
}

static inline void Ifx__setStackPointer(void *stackAddr)
{
    __asm("mov.aa a10, %0": : "a" (stackAddr) :"a10");
}

static inline uint32 IfxCpu_calculateCrc32(uint32 *startaddress, uint8 length)
{
    uint32 returnvalue;
    __asm("MOV d0, #0x0"); /* set seed value to 0 */
    for (;length > 0; length--)
    {
        /* calculate the CRC over all data */
        __asm("LD.W d1,[%0]" : : "a" (startaddress));
        __asm("CRC32 d0,d0,d1");
        startaddress++;
    }
    __asm("MOV %0,d0" : "=d" (returnvalue)); /* return result of CRC*/
    return returnvalue;
}

static inline uint32 IfxCpu_getRandomVal(uint32 a, uint32 x, uint32 m)
{
	uint32 result;
    __asm("      mul.u     e14,%1,%2      ; d15 = Eh; d14 = El    \n"
        "        mov       d12,d14        ;   e12 = El            \n"
        "        mov       d13,#0         ;                       \n"
        "        madd.u    e14,e12,d15,#5 ; e14 = El + 5 * d15    \n"
        " 1:     jge.u     d14,%3,2n      ;                       \n"
        "        jz        d15,3n         ;                       \n"
        " 2:     subx      d14,d14,%3     ;  e12=e12-m            \n"
        "        subc      d15,d15,d13    ; d13=d13-0             \n"
        "        loopu     1p             ;                       \n"
        " 3:     mov       %0,d14         ;                       \n"
        : "=d"(result) : "d"(a), "d"(x), "d"(m) : "e14","e12");
    return result;
}

static inline sint32 Ifx__popcnt(sint32 a)
{ 
	sint32 res; 
	__asm("popcnt.w %0,%1":"=d"(res):"d"(a)); 
		return res; 
}


/* Macros for backward compatibility of the intrinsics*/
/******************************************************************************/










































































































































































































































/******************************************************************************/
/* *INDENT-ON* */
/******************************************************************************/

#line 57 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\iLLD\\TC38A\\Tricore\\Cpu\\Std\\IfxCpu_Intrinsics.h"
























//______________________________________________________________________________

/** Convert context pointer to address pointer
 * \param[in] cx context pointer
 * \return address pointer
 */
static inline void *__cx_to_addr(uint32 cx)
{
    uint32 seg_nr = __extru(cx, 16, 4);
    return (void *)__insert(seg_nr << 28, cx, 6, 16);
}


/** Convert address pointer to context pointer
 * \param[in] addr address pointer
 * \return context pointer
 */
static inline uint32 __addr_to_cx(void *addr)
{
    uint32 seg_nr, seg_idx;
    seg_nr  = __extru((int)addr, 28, 4) << 16;
    seg_idx = __extru((int)addr, 6, 16);
    return seg_nr | seg_idx;
}


/******************************************************************************/
static inline void __ldmst_c(volatile void *address, unsigned mask, unsigned value)
{
    *(volatile uint32 *)address = (*(volatile uint32 *)address & ~(mask)) | (mask & value);
}


/** 32bit load operation
 */
static inline uint32 __ld32(void *addr)
{
    return *(volatile uint32 *)addr;
}


/** 32bit store operation
 */
static inline void __st32(void *addr, uint32 value)
{
    *(volatile uint32 *)addr = value;
}


/** 64bit load operation
 */
static inline uint64 __ld64(void *addr)
{
    return *(volatile uint64 *)addr;
}


/** 64bit store operation
 */
static inline void __st64(void *addr, uint64 value)
{
    *(volatile uint64 *)addr = value;
}


/** 64bit load operation which returns the lower and upper 32bit word
 */
static inline void __ld64_lu(void *addr, uint32 *valueLower, uint32 *valueUpper)
{
    register uint64 value;
    value       = __ld64(addr);
    *valueLower = (uint32)value;
    *valueUpper = (uint32)(value >> 32);
}


/** 64bit store operation which stores a lower and upper 32bit word
 */
static inline void __st64_lu(void *addr, uint32 valueLower, uint32 valueUpper)
{
    register uint64 value = ((uint64)valueUpper << 32) | valueLower;
    __st64(addr, value);
}


/******************************************************************************/

#line 57 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\ee\\..\\Libraries\\iLLD\\TC38A\\Tricore\\_Impl\\IfxCpu_cfg.h"

#line 1 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\Infra\\Sfr\\TC38A\\_Reg\\IfxCpu_reg.h"
/**
 * \file IfxCpu_reg.h
 * \brief
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: TC38XA_UM_V1.5.0
 * Specification: TC3xx User Manual V1.5.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Cpu_Registers_Cfg Cpu address
 * \ingroup IfxSfr_Cpu_Registers
 * 
 * \defgroup IfxSfr_Cpu_Registers_Cfg_BaseAddress Base address
 * \ingroup IfxSfr_Cpu_Registers_Cfg
 *
 * \defgroup IfxSfr_Cpu_Registers_Cfg_Cpu0 2-CPU0
 * \ingroup IfxSfr_Cpu_Registers_Cfg
 *
 * \defgroup IfxSfr_Cpu_Registers_Cfg_Cpu1 2-CPU1
 * \ingroup IfxSfr_Cpu_Registers_Cfg
 *
 * \defgroup IfxSfr_Cpu_Registers_Cfg_Cpu2 2-CPU2
 * \ingroup IfxSfr_Cpu_Registers_Cfg
 *
 * \defgroup IfxSfr_Cpu_Registers_Cfg_Cpu3 2-CPU3
 * \ingroup IfxSfr_Cpu_Registers_Cfg
 *
 *
 */


/******************************************************************************/

#line 1 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\Infra\\Sfr\\TC38A\\_Reg\\IfxCpu_regdef.h"
/**
 * \file IfxCpu_regdef.h
 * \brief
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: TC38XA_UM_V1.5.0
 * Specification: TC3xx User Manual V1.5.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Cpu_Registers Cpu Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Cpu_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Cpu_Registers
 * 
 * \defgroup IfxSfr_Cpu_Registers_union Register unions
 * \ingroup IfxSfr_Cpu_Registers
 * 
 * \defgroup IfxSfr_Cpu_Registers_struct Memory map
 * \ingroup IfxSfr_Cpu_Registers
 */


/******************************************************************************/

#line 1 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\Infra\\Sfr\\TC38A\\_Reg\\Ifx_TypesReg.h"
/**
 * \file Ifx_TypesReg.h
 * \brief
 * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
 *
 * Version: IFXREGTYPES_V1.0.R0
 *
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * Data type access rules for peripheral space
 * data type                               | Allowed access size   | Alignment of address in memory
 * ----------------------------------------|-----------------------|-----------------------------------
 * Ifx_UReg_8Bit, Ifx_SReg_8Bit            | Byte                  | Byte (1H)                         
 * Ifx_UReg_16Bit, Ifx_SReg_16Bit          | Byte, Half-Word       | 2 bytes (2H)                      
 * Ifx_UReg_32Bit, Ifx_SReg_32Bit          | Byte, Half-Word, Word | 4 bytes (4H)                      
 * Ifx_Strict_16Bit                        | Half-Word             | 2 bytes (2H)                      
 * Ifx_Strict_32Bit                        | Word                  | 4 bytes (4H)                      
 * 
 * 
 * Alignment rules for peripheral space (From TriCoreTM TC1.6.2 core architecture manual, 2.2.1 Alignment Requirements)
 * Access type                             | Access size           | Required alignment of address in memory    
 * ----------------------------------------|-----------------------|-----------------------------------
 * Load, Store Data Register               | Byte (8-bits)         | Byte (1H)                         
 * Load, Store Data Register               | Half-Word (16-bits)   | 2 bytes (2H)                      
 * Load, Store Data Register               | Word (32-bits)        | 4 bytes (4H)                      
 * Load, Store Data Register               | Double-Word (64-bits) | 8 bytes (8H)                      
 * Load, Store Address Register            | Word                  | 4 bytes (4H)                      
 * Load, Store Address Register            | Double-Word           | 8 bytes (8H)                      
 * SWAP.W, LDMST, ST.T                     | Word                  | 4 bytes (4H)                      
 * CMPSWAP.W, SWAPMSK.W                    | Word                  | 4 bytes (4H)                      
 * Context Load / Store / Restore / Save   | 16 x 32-bit registers | Not Permitted                     
 * 
 * 
 * 
 *  Peripheral space : segment F and E (From TriCoreTM TC1.6.2 core architecture manual, 8.3.4 Default Memory types for all segments)
 */



/******************************************************************************/


 
 
 
 

















typedef unsigned char  Ifx_UReg_8Bit;
typedef unsigned short Ifx_UReg_16Bit;
typedef unsigned int   Ifx_UReg_32Bit;
typedef signed char    Ifx_SReg_8Bit;
typedef signed short   Ifx_SReg_16Bit;
typedef signed int     Ifx_SReg_32Bit;


/******************************************************************************/

#line 58 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\Infra\\Sfr\\TC38A\\_Reg\\IfxCpu_regdef.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Cpu_Registers_Bitfields
 * \{  */
/** \brief CPUx Address General Purpose Register ${y} */
typedef struct _Ifx_CPU_A_Bits
{
    unsigned __sfrbit32 ADDR:32;         /**< \brief [31:0] Address Register - ADDR (rw) */
} Ifx_CPU_A_Bits;

/** \brief CPUx Base Interrupt Vector Table Pointer */
typedef struct _Ifx_CPU_BIV_Bits
{
    unsigned __sfrbit32 VSS:1;           /**< \brief [0:0] Vector Spacing Select - VSS (rw) */
    unsigned __sfrbit32 BIV:31;          /**< \brief [31:1] Base Address of Interrupt Vector Table - BIV (rw) */
} Ifx_CPU_BIV_Bits;

/** \brief CPUx Overlay Mask Register ${i} */
typedef struct _Ifx_CPU_BLK_OMASK_Bits
{
    unsigned __sfrbit32 reserved_0:5;    /**< \brief [4:0] \internal Reserved */
    unsigned __sfrbit32 OMASK:12;        /**< \brief [16:5] Overlay Address Mask - OMASK (rw) */
    unsigned __sfrbit32 ONE:11;          /**< \brief [27:17] Fixed "1" Values - ONE (r) */
    unsigned __sfrbit32 reserved_28:4;    /**< \brief [31:28] \internal Reserved */
} Ifx_CPU_BLK_OMASK_Bits;

/** \brief CPUx Overlay Target Address Register ${i} */
typedef struct _Ifx_CPU_BLK_OTAR_Bits
{
    unsigned __sfrbit32 reserved_0:5;    /**< \brief [4:0] \internal Reserved */
    unsigned __sfrbit32 TBASE:23;        /**< \brief [27:5] Target Base - TBASE (rw) */
    unsigned __sfrbit32 reserved_28:4;    /**< \brief [31:28] \internal Reserved */
} Ifx_CPU_BLK_OTAR_Bits;

/** \brief CPUx Redirected Address Base Register ${i} */
typedef struct _Ifx_CPU_BLK_RABR_Bits
{
    unsigned __sfrbit32 reserved_0:5;    /**< \brief [4:0] \internal Reserved */
    unsigned __sfrbit32 OBASE:17;        /**< \brief [21:5] Overlay Block Base Address - OBASE (rw) */
    unsigned __sfrbit32 reserved_22:2;    /**< \brief [23:22] \internal Reserved */
    unsigned __sfrbit32 OMEM:4;          /**< \brief [27:24] Overlay Memory Select - OMEM (rw) */
    unsigned __sfrbit32 reserved_28:3;    /**< \brief [30:28] \internal Reserved */
    unsigned __sfrbit32 OVEN:1;          /**< \brief [31:31] Overlay Enabled - OVEN (rwh) */
} Ifx_CPU_BLK_RABR_Bits;

/** \brief CPUx Base Trap Vector Table Pointer */
typedef struct _Ifx_CPU_BTV_Bits
{
    unsigned __sfrbit32 reserved_0:1;    /**< \brief [0:0] \internal Reserved */
    unsigned __sfrbit32 BTV:31;          /**< \brief [31:1] Base Address of Trap Vector Table - BTV (rw) */
} Ifx_CPU_BTV_Bits;

/** \brief CPUx CPU Clock Cycle Count */
typedef struct _Ifx_CPU_CCNT_Bits
{
    unsigned __sfrbit32 COUNTVALUE:31;    /**< \brief [30:0] Count Value - CountValue (rwh) */
    unsigned __sfrbit32 SOVF:1;          /**< \brief [31:31] Sticky Overflow Bit - SOvf (rwh) */
} Ifx_CPU_CCNT_Bits;

/** \brief CPUx Counter Control */
typedef struct _Ifx_CPU_CCTRL_Bits
{
    unsigned __sfrbit32 CM:1;            /**< \brief [0:0] Counter Mode - CM (rw) */
    unsigned __sfrbit32 CE:1;            /**< \brief [1:1] Count Enable - CE (rw) */
    unsigned __sfrbit32 M1:3;            /**< \brief [4:2] M1CNT Configuration - M1 (rw) */
    unsigned __sfrbit32 M2:3;            /**< \brief [7:5] M2CNT Configuration - M2 (rw) */
    unsigned __sfrbit32 M3:3;            /**< \brief [10:8] M3CNT Configuration - M3 (rw) */
    unsigned __sfrbit32 reserved_11:21;    /**< \brief [31:11] \internal Reserved */
} Ifx_CPU_CCTRL_Bits;

/** \brief CPUx Compatibility Control Register */
typedef struct _Ifx_CPU_COMPAT_Bits
{
    unsigned __sfrbit32 reserved_0:3;    /**< \brief [2:0] \internal Reserved */
    unsigned __sfrbit32 RM:1;            /**< \brief [3:3] Rounding Mode Compatibility - RM (rw) */
    unsigned __sfrbit32 SP:1;            /**< \brief [4:4] SYSCON Safety Protection Mode Compatibility - SP (rw) */
    unsigned __sfrbit32 reserved_5:27;    /**< \brief [31:5] \internal Reserved */
} Ifx_CPU_COMPAT_Bits;

/** \brief CPUx Core Identification Register */
typedef struct _Ifx_CPU_CORE_ID_Bits
{
    unsigned __sfrbit32 CORE_ID:3;       /**< \brief [2:0] Core Identification Number - CORE_ID (r) */
    unsigned __sfrbit32 reserved_3:29;    /**< \brief [31:3] \internal Reserved */
} Ifx_CPU_CORE_ID_Bits;

/** \brief CPUx Code Protection Range ${y} Lower Bound Register */
typedef struct _Ifx_CPU_CPR_L_Bits
{
    unsigned __sfrbit32 reserved_0:5;    /**< \brief [4:0] \internal Reserved */
    unsigned __sfrbit32 LOWBND:27;       /**< \brief [31:5] CPRy Lower Boundary Address - LOWBND (rw) */
} Ifx_CPU_CPR_L_Bits;

/** \brief CPUx Code Protection Range ${y} Upper Bound Register */
typedef struct _Ifx_CPU_CPR_U_Bits
{
    unsigned __sfrbit32 reserved_0:5;    /**< \brief [4:0] \internal Reserved */
    unsigned __sfrbit32 UPPBND:27;       /**< \brief [31:5] CPR0_m Upper Boundary Address - UPPBND (rw) */
} Ifx_CPU_CPR_U_Bits;

/** \brief CPUx Identification Register TC1.6.2P */
typedef struct _Ifx_CPU_CPU_ID_Bits
{
    unsigned __sfrbit32 MOD_REV:8;       /**< \brief [7:0] Revision Number - MOD_REV (r) */
    unsigned __sfrbit32 MOD_32B:8;       /**< \brief [15:8] 32-Bit Module Enable - MOD_32B (r) */
    unsigned __sfrbit32 MOD:16;          /**< \brief [31:16] Module Identification Number - MOD (r) */
} Ifx_CPU_CPU_ID_Bits;

/** \brief  */
typedef struct _Ifx_CPU_CPXE_Bits
{
    unsigned __sfrbit32 XE_N:10;         /**< \brief [9:0] Execute Enable Range select - XE[n] (rw) */
    unsigned __sfrbit32 reserved_10:22;    /**< \brief [31:10] \internal Reserved */
} Ifx_CPU_CPXE_Bits;

/** \brief CPUx Core Register Access Event */
typedef struct _Ifx_CPU_CREVT_Bits
{
    unsigned __sfrbit32 EVTA:3;          /**< \brief [2:0] Event Associated - EVTA (rw) */
    unsigned __sfrbit32 BBM:1;           /**< \brief [3:3] Break Before Make (BBM) or Break After Make (BAM) Selection - BBM (rw) */
    unsigned __sfrbit32 BOD:1;           /**< \brief [4:4] Breakout Disable - BOD (rw) */
    unsigned __sfrbit32 SUSP:1;          /**< \brief [5:5] CDC Suspend-Out Signal State - SUSP (rw) */
    unsigned __sfrbit32 CNT:2;           /**< \brief [7:6] Counter - CNT (rw) */
    unsigned __sfrbit32 reserved_8:24;    /**< \brief [31:8] \internal Reserved */
} Ifx_CPU_CREVT_Bits;

/** \brief CPUx Customer ID register */
typedef struct _Ifx_CPU_CUS_ID_Bits
{
    unsigned __sfrbit32 CID:3;           /**< \brief [2:0] Customer ID - CID (r) */
    unsigned __sfrbit32 reserved_3:29;    /**< \brief [31:3] \internal Reserved */
} Ifx_CPU_CUS_ID_Bits;

/** \brief CPUx Data General Purpose Register ${y} */
typedef struct _Ifx_CPU_D_Bits
{
    unsigned __sfrbit32 DATA:32;         /**< \brief [31:0] Data Register - DATA (rw) */
} Ifx_CPU_D_Bits;

/** \brief CPUx Data Asynchronous Trap Register */
typedef struct _Ifx_CPU_DATR_Bits
{
    unsigned __sfrbit32 reserved_0:3;    /**< \brief [2:0] \internal Reserved */
    unsigned __sfrbit32 SBE:1;           /**< \brief [3:3] Store Bus Error - SBE (rwh) */
    unsigned __sfrbit32 reserved_4:5;    /**< \brief [8:4] \internal Reserved */
    unsigned __sfrbit32 CWE:1;           /**< \brief [9:9] Cache Writeback Error - CWE (rwh) */
    unsigned __sfrbit32 CFE:1;           /**< \brief [10:10] Cache Flush Error - CFE (rwh) */
    unsigned __sfrbit32 reserved_11:3;    /**< \brief [13:11] \internal Reserved */
    unsigned __sfrbit32 SOE:1;           /**< \brief [14:14] Store Overlay Error - SOE (rwh) */
    unsigned __sfrbit32 reserved_15:1;    /**< \brief [15:15] \internal Reserved */
    unsigned __sfrbit32 reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_CPU_DATR_Bits;

/** \brief CPUx Debug Status Register */
typedef struct _Ifx_CPU_DBGSR_Bits
{
    unsigned __sfrbit32 DE:1;            /**< \brief [0:0] Debug Enable - DE (rh) */
    unsigned __sfrbit32 HALT:2;          /**< \brief [2:1] CPU Halt Request / Status Field - HALT (rwh) */
    unsigned __sfrbit32 SIH:1;           /**< \brief [3:3] Suspend-in Halt - SIH (rh) */
    unsigned __sfrbit32 SUSP:1;          /**< \brief [4:4] Current State of the Core Suspend-Out Signal - SUSP (rwh) */
    unsigned __sfrbit32 reserved_5:1;    /**< \brief [5:5] \internal Reserved */
    unsigned __sfrbit32 PREVSUSP:1;      /**< \brief [6:6] Previous State of Core Suspend-Out Signal - PREVSUSP (rh) */
    unsigned __sfrbit32 PEVT:1;          /**< \brief [7:7] Posted Event - PEVT (rwh) */
    unsigned __sfrbit32 EVTSRC:5;        /**< \brief [12:8] Event Source - EVTSRC (rh) */
    unsigned __sfrbit32 reserved_13:19;    /**< \brief [31:13] \internal Reserved */
} Ifx_CPU_DBGSR_Bits;

/** \brief CPUx Debug Trap Control Register */
typedef struct _Ifx_CPU_DBGTCR_Bits
{
    unsigned __sfrbit32 DTA:1;           /**< \brief [0:0] Debug Trap Active Bit - DTA (rwh) */
    unsigned __sfrbit32 reserved_1:31;    /**< \brief [31:1] \internal Reserved */
} Ifx_CPU_DBGTCR_Bits;

/** \brief CPUx Data Memory Control Register */
typedef struct _Ifx_CPU_DCON0_Bits
{
    unsigned __sfrbit32 reserved_0:1;    /**< \brief [0:0] \internal Reserved */
    unsigned __sfrbit32 DCBYP:1;         /**< \brief [1:1] Data Cache Bypass - DCBYP (rw) */
    unsigned __sfrbit32 reserved_2:30;    /**< \brief [31:2] \internal Reserved */
} Ifx_CPU_DCON0_Bits;

/** \brief CPUx Data Control Register 2 */
typedef struct _Ifx_CPU_DCON2_Bits
{
    unsigned __sfrbit32 DCACHE_SZE:16;    /**< \brief [15:0] Data Cache Size - DCACHE_SZE (r) */
    unsigned __sfrbit32 DSCRATCH_SZE:16;    /**< \brief [31:16] Data Scratch Size - DSCRATCH_SZE (r) */
} Ifx_CPU_DCON2_Bits;

/** \brief CPUx Debug Context Save Area Pointer */
typedef struct _Ifx_CPU_DCX_Bits
{
    unsigned __sfrbit32 reserved_0:6;    /**< \brief [5:0] \internal Reserved */
    unsigned __sfrbit32 DCXVALUE:26;     /**< \brief [31:6] Debug Context Save Area Pointer - DCXValue (rw) */
} Ifx_CPU_DCX_Bits;

/** \brief CPUx Data Error Address Register */
typedef struct _Ifx_CPU_DEADD_Bits
{
    unsigned __sfrbit32 ERROR_ADDRESS:32;    /**< \brief [31:0] Error Address - ERROR_ADDRESS (rh) */
} Ifx_CPU_DEADD_Bits;

/** \brief CPUx Data Integrity Error Address Register */
typedef struct _Ifx_CPU_DIEAR_Bits
{
    unsigned __sfrbit32 TA:32;           /**< \brief [31:0] Transaction Address - TA (rh) */
} Ifx_CPU_DIEAR_Bits;

/** \brief CPUx Data Integrity Error Trap Register */
typedef struct _Ifx_CPU_DIETR_Bits
{
    unsigned __sfrbit32 IED:1;           /**< \brief [0:0] Integrity Error Detected - IED (rwh) */
    unsigned __sfrbit32 IE_T:1;          /**< \brief [1:1] Integrity Error - Tag Memory - IE_T (rh) */
    unsigned __sfrbit32 IE_C:1;          /**< \brief [2:2] Integrity Error - Cache Memory - IE_C (rh) */
    unsigned __sfrbit32 IE_S:1;          /**< \brief [3:3] Integrity Error - Scratchpad Memory - IE_S (rh) */
    unsigned __sfrbit32 IE_BI:1;         /**< \brief [4:4] Integrity Error - Bus Interface - IE_BI (rh) */
    unsigned __sfrbit32 E_INFO:6;        /**< \brief [10:5] Error Information - E_INFO (rh) */
    unsigned __sfrbit32 IE_UNC:1;        /**< \brief [11:11] Dual Bit Error Detected - IE_UNC (rh) */
    unsigned __sfrbit32 IE_SP:1;         /**< \brief [12:12] Safety Protection Error Detected - IE_SP (rh) */
    unsigned __sfrbit32 IE_BS:1;         /**< \brief [13:13] Bus Slave Access Indicator - IE_BS (rh) */
    unsigned __sfrbit32 IE_DLMU:1;       /**< \brief [14:14] Integrity Error - DLMU - IE_DLMU (rh) */
    unsigned __sfrbit32 IE_LPB:1;        /**< \brief [15:15] Integrity Error - Local Pflash Bank - IE_LPB (rh) */
    unsigned __sfrbit32 IE_MTMV:1;       /**< \brief [16:16] Memory Test Mode Violation detected - IE_MTMV (rh) */
    unsigned __sfrbit32 reserved_17:15;    /**< \brief [31:17] \internal Reserved */
} Ifx_CPU_DIETR_Bits;

/** \brief CPUx Safety Protection Region DLMU Read Access Enable Register A${i} */
typedef struct _Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits
{
    unsigned __sfrbit32 EN0:1;           /**< \brief [0:0] Access Enable for Master TAG ID 0 - EN0 (rw) */
    unsigned __sfrbit32 EN1:1;           /**< \brief [1:1] Access Enable for Master TAG ID 1 - EN1 (rw) */
    unsigned __sfrbit32 EN2:1;           /**< \brief [2:2] Access Enable for Master TAG ID 2 - EN2 (rw) */
    unsigned __sfrbit32 EN3:1;           /**< \brief [3:3] Access Enable for Master TAG ID 3 - EN3 (rw) */
    unsigned __sfrbit32 EN4:1;           /**< \brief [4:4] Access Enable for Master TAG ID 4 - EN4 (rw) */
    unsigned __sfrbit32 EN5:1;           /**< \brief [5:5] Access Enable for Master TAG ID 5 - EN5 (rw) */
    unsigned __sfrbit32 EN6:1;           /**< \brief [6:6] Access Enable for Master TAG ID 6 - EN6 (rw) */
    unsigned __sfrbit32 EN7:1;           /**< \brief [7:7] Access Enable for Master TAG ID 7 - EN7 (rw) */
    unsigned __sfrbit32 EN8:1;           /**< \brief [8:8] Access Enable for Master TAG ID 8 - EN8 (rw) */
    unsigned __sfrbit32 EN9:1;           /**< \brief [9:9] Access Enable for Master TAG ID 9 - EN9 (rw) */
    unsigned __sfrbit32 EN10:1;          /**< \brief [10:10] Access Enable for Master TAG ID 10 - EN10 (rw) */
    unsigned __sfrbit32 EN11:1;          /**< \brief [11:11] Access Enable for Master TAG ID 11 - EN11 (rw) */
    unsigned __sfrbit32 EN12:1;          /**< \brief [12:12] Access Enable for Master TAG ID 12 - EN12 (rw) */
    unsigned __sfrbit32 EN13:1;          /**< \brief [13:13] Access Enable for Master TAG ID 13 - EN13 (rw) */
    unsigned __sfrbit32 EN14:1;          /**< \brief [14:14] Access Enable for Master TAG ID 14 - EN14 (rw) */
    unsigned __sfrbit32 EN15:1;          /**< \brief [15:15] Access Enable for Master TAG ID 15 - EN15 (rw) */
    unsigned __sfrbit32 EN16:1;          /**< \brief [16:16] Access Enable for Master TAG ID 16 - EN16 (rw) */
    unsigned __sfrbit32 EN17:1;          /**< \brief [17:17] Access Enable for Master TAG ID 17 - EN17 (rw) */
    unsigned __sfrbit32 EN18:1;          /**< \brief [18:18] Access Enable for Master TAG ID 18 - EN18 (rw) */
    unsigned __sfrbit32 EN19:1;          /**< \brief [19:19] Access Enable for Master TAG ID 19 - EN19 (rw) */
    unsigned __sfrbit32 EN20:1;          /**< \brief [20:20] Access Enable for Master TAG ID 20 - EN20 (rw) */
    unsigned __sfrbit32 EN21:1;          /**< \brief [21:21] Access Enable for Master TAG ID 21 - EN21 (rw) */
    unsigned __sfrbit32 EN22:1;          /**< \brief [22:22] Access Enable for Master TAG ID 22 - EN22 (rw) */
    unsigned __sfrbit32 EN23:1;          /**< \brief [23:23] Access Enable for Master TAG ID 23 - EN23 (rw) */
    unsigned __sfrbit32 EN24:1;          /**< \brief [24:24] Access Enable for Master TAG ID 24 - EN24 (rw) */
    unsigned __sfrbit32 EN25:1;          /**< \brief [25:25] Access Enable for Master TAG ID 25 - EN25 (rw) */
    unsigned __sfrbit32 EN26:1;          /**< \brief [26:26] Access Enable for Master TAG ID 26 - EN26 (rw) */
    unsigned __sfrbit32 EN27:1;          /**< \brief [27:27] Access Enable for Master TAG ID 27 - EN27 (rw) */
    unsigned __sfrbit32 EN28:1;          /**< \brief [28:28] Access Enable for Master TAG ID 28 - EN28 (rw) */
    unsigned __sfrbit32 EN29:1;          /**< \brief [29:29] Access Enable for Master TAG ID 29 - EN29 (rw) */
    unsigned __sfrbit32 EN30:1;          /**< \brief [30:30] Access Enable for Master TAG ID 30 - EN30 (rw) */
    unsigned __sfrbit32 EN31:1;          /**< \brief [31:31] Access Enable for Master TAG ID 31 - EN31 (rw) */
} Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits;

/** \brief CPUx Safety Protection Region DLMU Write Access Enable Register A${i} */
typedef struct _Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits
{
    unsigned __sfrbit32 EN0:1;           /**< \brief [0:0] Access Enable for Master TAG ID 0 - EN0 (rw) */
    unsigned __sfrbit32 EN1:1;           /**< \brief [1:1] Access Enable for Master TAG ID 1 - EN1 (rw) */
    unsigned __sfrbit32 EN2:1;           /**< \brief [2:2] Access Enable for Master TAG ID 2 - EN2 (rw) */
    unsigned __sfrbit32 EN3:1;           /**< \brief [3:3] Access Enable for Master TAG ID 3 - EN3 (rw) */
    unsigned __sfrbit32 EN4:1;           /**< \brief [4:4] Access Enable for Master TAG ID 4 - EN4 (rw) */
    unsigned __sfrbit32 EN5:1;           /**< \brief [5:5] Access Enable for Master TAG ID 5 - EN5 (rw) */
    unsigned __sfrbit32 EN6:1;           /**< \brief [6:6] Access Enable for Master TAG ID 6 - EN6 (rw) */
    unsigned __sfrbit32 EN7:1;           /**< \brief [7:7] Access Enable for Master TAG ID 7 - EN7 (rw) */
    unsigned __sfrbit32 EN8:1;           /**< \brief [8:8] Access Enable for Master TAG ID 8 - EN8 (rw) */
    unsigned __sfrbit32 EN9:1;           /**< \brief [9:9] Access Enable for Master TAG ID 9 - EN9 (rw) */
    unsigned __sfrbit32 EN10:1;          /**< \brief [10:10] Access Enable for Master TAG ID 10 - EN10 (rw) */
    unsigned __sfrbit32 EN11:1;          /**< \brief [11:11] Access Enable for Master TAG ID 11 - EN11 (rw) */
    unsigned __sfrbit32 EN12:1;          /**< \brief [12:12] Access Enable for Master TAG ID 12 - EN12 (rw) */
    unsigned __sfrbit32 EN13:1;          /**< \brief [13:13] Access Enable for Master TAG ID 13 - EN13 (rw) */
    unsigned __sfrbit32 EN14:1;          /**< \brief [14:14] Access Enable for Master TAG ID 14 - EN14 (rw) */
    unsigned __sfrbit32 EN15:1;          /**< \brief [15:15] Access Enable for Master TAG ID 15 - EN15 (rw) */
    unsigned __sfrbit32 EN16:1;          /**< \brief [16:16] Access Enable for Master TAG ID 16 - EN16 (rw) */
    unsigned __sfrbit32 EN17:1;          /**< \brief [17:17] Access Enable for Master TAG ID 17 - EN17 (rw) */
    unsigned __sfrbit32 EN18:1;          /**< \brief [18:18] Access Enable for Master TAG ID 18 - EN18 (rw) */
    unsigned __sfrbit32 EN19:1;          /**< \brief [19:19] Access Enable for Master TAG ID 19 - EN19 (rw) */
    unsigned __sfrbit32 EN20:1;          /**< \brief [20:20] Access Enable for Master TAG ID 20 - EN20 (rw) */
    unsigned __sfrbit32 EN21:1;          /**< \brief [21:21] Access Enable for Master TAG ID 21 - EN21 (rw) */
    unsigned __sfrbit32 EN22:1;          /**< \brief [22:22] Access Enable for Master TAG ID 22 - EN22 (rw) */
    unsigned __sfrbit32 EN23:1;          /**< \brief [23:23] Access Enable for Master TAG ID 23 - EN23 (rw) */
    unsigned __sfrbit32 EN24:1;          /**< \brief [24:24] Access Enable for Master TAG ID 24 - EN24 (rw) */
    unsigned __sfrbit32 EN25:1;          /**< \brief [25:25] Access Enable for Master TAG ID 25 - EN25 (rw) */
    unsigned __sfrbit32 EN26:1;          /**< \brief [26:26] Access Enable for Master TAG ID 26 - EN26 (rw) */
    unsigned __sfrbit32 EN27:1;          /**< \brief [27:27] Access Enable for Master TAG ID 27 - EN27 (rw) */
    unsigned __sfrbit32 EN28:1;          /**< \brief [28:28] Access Enable for Master TAG ID 28 - EN28 (rw) */
    unsigned __sfrbit32 EN29:1;          /**< \brief [29:29] Access Enable for Master TAG ID 29 - EN29 (rw) */
    unsigned __sfrbit32 EN30:1;          /**< \brief [30:30] Access Enable for Master TAG ID 30 - EN30 (rw) */
    unsigned __sfrbit32 EN31:1;          /**< \brief [31:31] Access Enable for Master TAG ID 31 - EN31 (rw) */
} Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits;

/** \brief CPUx Safety Protection Region DLMU Read Access Enable Register B${i} */
typedef struct _Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits
{
    unsigned __sfrbit32 EN32:1;          /**< \brief [0:0] Access Enable for Master TAG ID 32 - EN32 (rw) */
    unsigned __sfrbit32 EN33:1;          /**< \brief [1:1] Access Enable for Master TAG ID 33 - EN33 (rw) */
    unsigned __sfrbit32 EN34:1;          /**< \brief [2:2] Access Enable for Master TAG ID 34 - EN34 (rw) */
    unsigned __sfrbit32 EN35:1;          /**< \brief [3:3] Access Enable for Master TAG ID 35 - EN35 (rw) */
    unsigned __sfrbit32 EN36:1;          /**< \brief [4:4] Access Enable for Master TAG ID 36 - EN36 (rw) */
    unsigned __sfrbit32 EN37:1;          /**< \brief [5:5] Access Enable for Master TAG ID 37 - EN37 (rw) */
    unsigned __sfrbit32 EN38:1;          /**< \brief [6:6] Access Enable for Master TAG ID 38 - EN38 (rw) */
    unsigned __sfrbit32 EN39:1;          /**< \brief [7:7] Access Enable for Master TAG ID 39 - EN39 (rw) */
    unsigned __sfrbit32 EN40:1;          /**< \brief [8:8] Access Enable for Master TAG ID 40 - EN40 (rw) */
    unsigned __sfrbit32 EN41:1;          /**< \brief [9:9] Access Enable for Master TAG ID 41 - EN41 (rw) */
    unsigned __sfrbit32 EN42:1;          /**< \brief [10:10] Access Enable for Master TAG ID 42 - EN42 (rw) */
    unsigned __sfrbit32 EN43:1;          /**< \brief [11:11] Access Enable for Master TAG ID 43 - EN43 (rw) */
    unsigned __sfrbit32 EN44:1;          /**< \brief [12:12] Access Enable for Master TAG ID 44 - EN44 (rw) */
    unsigned __sfrbit32 EN45:1;          /**< \brief [13:13] Access Enable for Master TAG ID 45 - EN45 (rw) */
    unsigned __sfrbit32 EN46:1;          /**< \brief [14:14] Access Enable for Master TAG ID 46 - EN46 (rw) */
    unsigned __sfrbit32 EN47:1;          /**< \brief [15:15] Access Enable for Master TAG ID 47 - EN47 (rw) */
    unsigned __sfrbit32 EN48:1;          /**< \brief [16:16] Access Enable for Master TAG ID 48 - EN48 (rw) */
    unsigned __sfrbit32 EN49:1;          /**< \brief [17:17] Access Enable for Master TAG ID 49 - EN49 (rw) */
    unsigned __sfrbit32 EN50:1;          /**< \brief [18:18] Access Enable for Master TAG ID 50 - EN50 (rw) */
    unsigned __sfrbit32 EN51:1;          /**< \brief [19:19] Access Enable for Master TAG ID 51 - EN51 (rw) */
    unsigned __sfrbit32 EN52:1;          /**< \brief [20:20] Access Enable for Master TAG ID 52 - EN52 (rw) */
    unsigned __sfrbit32 EN53:1;          /**< \brief [21:21] Access Enable for Master TAG ID 53 - EN53 (rw) */
    unsigned __sfrbit32 EN54:1;          /**< \brief [22:22] Access Enable for Master TAG ID 54 - EN54 (rw) */
    unsigned __sfrbit32 EN55:1;          /**< \brief [23:23] Access Enable for Master TAG ID 55 - EN55 (rw) */
    unsigned __sfrbit32 EN56:1;          /**< \brief [24:24] Access Enable for Master TAG ID 56 - EN56 (rw) */
    unsigned __sfrbit32 EN57:1;          /**< \brief [25:25] Access Enable for Master TAG ID 57 - EN57 (rw) */
    unsigned __sfrbit32 EN58:1;          /**< \brief [26:26] Access Enable for Master TAG ID 58 - EN58 (rw) */
    unsigned __sfrbit32 EN59:1;          /**< \brief [27:27] Access Enable for Master TAG ID 59 - EN59 (rw) */
    unsigned __sfrbit32 EN60:1;          /**< \brief [28:28] Access Enable for Master TAG ID 60 - EN60 (rw) */
    unsigned __sfrbit32 EN61:1;          /**< \brief [29:29] Access Enable for Master TAG ID 61 - EN61 (rw) */
    unsigned __sfrbit32 EN62:1;          /**< \brief [30:30] Access Enable for Master TAG ID 62 - EN62 (rw) */
    unsigned __sfrbit32 EN63:1;          /**< \brief [31:31] Access Enable for Master TAG ID 63 - EN63 (rw) */
} Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits;

/** \brief CPUx Safety Protection Region DLMU Write Access Enable Register B${i} */
typedef struct _Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits
{
    unsigned __sfrbit32 EN32:1;          /**< \brief [0:0] Access Enable for Master TAG ID 32 - EN32 (rw) */
    unsigned __sfrbit32 EN33:1;          /**< \brief [1:1] Access Enable for Master TAG ID 33 - EN33 (rw) */
    unsigned __sfrbit32 EN34:1;          /**< \brief [2:2] Access Enable for Master TAG ID 34 - EN34 (rw) */
    unsigned __sfrbit32 EN35:1;          /**< \brief [3:3] Access Enable for Master TAG ID 35 - EN35 (rw) */
    unsigned __sfrbit32 EN36:1;          /**< \brief [4:4] Access Enable for Master TAG ID 36 - EN36 (rw) */
    unsigned __sfrbit32 EN37:1;          /**< \brief [5:5] Access Enable for Master TAG ID 37 - EN37 (rw) */
    unsigned __sfrbit32 EN38:1;          /**< \brief [6:6] Access Enable for Master TAG ID 38 - EN38 (rw) */
    unsigned __sfrbit32 EN39:1;          /**< \brief [7:7] Access Enable for Master TAG ID 39 - EN39 (rw) */
    unsigned __sfrbit32 EN40:1;          /**< \brief [8:8] Access Enable for Master TAG ID 40 - EN40 (rw) */
    unsigned __sfrbit32 EN41:1;          /**< \brief [9:9] Access Enable for Master TAG ID 41 - EN41 (rw) */
    unsigned __sfrbit32 EN42:1;          /**< \brief [10:10] Access Enable for Master TAG ID 42 - EN42 (rw) */
    unsigned __sfrbit32 EN43:1;          /**< \brief [11:11] Access Enable for Master TAG ID 43 - EN43 (rw) */
    unsigned __sfrbit32 EN44:1;          /**< \brief [12:12] Access Enable for Master TAG ID 44 - EN44 (rw) */
    unsigned __sfrbit32 EN45:1;          /**< \brief [13:13] Access Enable for Master TAG ID 45 - EN45 (rw) */
    unsigned __sfrbit32 EN46:1;          /**< \brief [14:14] Access Enable for Master TAG ID 46 - EN46 (rw) */
    unsigned __sfrbit32 EN47:1;          /**< \brief [15:15] Access Enable for Master TAG ID 47 - EN47 (rw) */
    unsigned __sfrbit32 EN48:1;          /**< \brief [16:16] Access Enable for Master TAG ID 48 - EN48 (rw) */
    unsigned __sfrbit32 EN49:1;          /**< \brief [17:17] Access Enable for Master TAG ID 49 - EN49 (rw) */
    unsigned __sfrbit32 EN50:1;          /**< \brief [18:18] Access Enable for Master TAG ID 50 - EN50 (rw) */
    unsigned __sfrbit32 EN51:1;          /**< \brief [19:19] Access Enable for Master TAG ID 51 - EN51 (rw) */
    unsigned __sfrbit32 EN52:1;          /**< \brief [20:20] Access Enable for Master TAG ID 52 - EN52 (rw) */
    unsigned __sfrbit32 EN53:1;          /**< \brief [21:21] Access Enable for Master TAG ID 53 - EN53 (rw) */
    unsigned __sfrbit32 EN54:1;          /**< \brief [22:22] Access Enable for Master TAG ID 54 - EN54 (rw) */
    unsigned __sfrbit32 EN55:1;          /**< \brief [23:23] Access Enable for Master TAG ID 55 - EN55 (rw) */
    unsigned __sfrbit32 EN56:1;          /**< \brief [24:24] Access Enable for Master TAG ID 56 - EN56 (rw) */
    unsigned __sfrbit32 EN57:1;          /**< \brief [25:25] Access Enable for Master TAG ID 57 - EN57 (rw) */
    unsigned __sfrbit32 EN58:1;          /**< \brief [26:26] Access Enable for Master TAG ID 58 - EN58 (rw) */
    unsigned __sfrbit32 EN59:1;          /**< \brief [27:27] Access Enable for Master TAG ID 59 - EN59 (rw) */
    unsigned __sfrbit32 EN60:1;          /**< \brief [28:28] Access Enable for Master TAG ID 60 - EN60 (rw) */
    unsigned __sfrbit32 EN61:1;          /**< \brief [29:29] Access Enable for Master TAG ID 61 - EN61 (rw) */
    unsigned __sfrbit32 EN62:1;          /**< \brief [30:30] Access Enable for Master TAG ID 62 - EN62 (rw) */
    unsigned __sfrbit32 EN63:1;          /**< \brief [31:31] Access Enable for Master TAG ID 63 - EN63 (rw) */
} Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits;

/** \brief CPUx Safety Protection DLMU Region Lower Address Register ${i} */
typedef struct _Ifx_CPU_DLMU_SPROT_RGNLA_Bits
{
    unsigned __sfrbit32 reserved_0:5;    /**< \brief [4:0] \internal Reserved */
    unsigned __sfrbit32 ADDR:27;         /**< \brief [31:5] Region Lower Address - ADDR (rw) */
} Ifx_CPU_DLMU_SPROT_RGNLA_Bits;

/** \brief CPUx Safety protection DLMU Region Upper Address Register ${i} */
typedef struct _Ifx_CPU_DLMU_SPROT_RGNUA_Bits
{
    unsigned __sfrbit32 reserved_0:5;    /**< \brief [4:0] \internal Reserved */
    unsigned __sfrbit32 ADDR:27;         /**< \brief [31:5] Region Upper Address - ADDR (rw) */
} Ifx_CPU_DLMU_SPROT_RGNUA_Bits;

/** \brief CPUx Debug Monitor Start Address */
typedef struct _Ifx_CPU_DMS_Bits
{
    unsigned __sfrbit32 reserved_0:1;    /**< \brief [0:0] \internal Reserved */
    unsigned __sfrbit32 DMSVALUE:31;     /**< \brief [31:1] Debug Monitor Start Address - DMSValue (rw) */
} Ifx_CPU_DMS_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DPRE_Bits
{
    unsigned __sfrbit32 RE_N:18;         /**< \brief [17:0] Read Enable Range Select - RE[n] (rw) */
    unsigned __sfrbit32 reserved_18:14;    /**< \brief [31:18] \internal Reserved */
} Ifx_CPU_DPRE_Bits;

/** \brief CPUx Data Protection Range ${y}, Lower Bound Register */
typedef struct _Ifx_CPU_DPR_L_Bits
{
    unsigned __sfrbit32 reserved_0:3;    /**< \brief [2:0] \internal Reserved */
    unsigned __sfrbit32 LOWBND:29;       /**< \brief [31:3] DPRy Lower Boundary Address - LOWBND (rw) */
} Ifx_CPU_DPR_L_Bits;

/** \brief CPUx Data Protection Range ${y}, Upper Bound Register */
typedef struct _Ifx_CPU_DPR_U_Bits
{
    unsigned __sfrbit32 reserved_0:3;    /**< \brief [2:0] \internal Reserved */
    unsigned __sfrbit32 UPPBND:29;       /**< \brief [31:3] DPRy Upper Boundary Address - UPPBND (rw) */
} Ifx_CPU_DPR_U_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DPWE_Bits
{
    unsigned __sfrbit32 WE_N:18;         /**< \brief [17:0] Write Enable Range Select - WE[n] (rw) */
    unsigned __sfrbit32 reserved_18:14;    /**< \brief [31:18] \internal Reserved */
} Ifx_CPU_DPWE_Bits;

/** \brief CPUx Data Synchronous Trap Register */
typedef struct _Ifx_CPU_DSTR_Bits
{
    unsigned __sfrbit32 SRE:1;           /**< \brief [0:0] Scratch Range Error - SRE (rwh) */
    unsigned __sfrbit32 GAE:1;           /**< \brief [1:1] Global Address Error - GAE (rwh) */
    unsigned __sfrbit32 LBE:1;           /**< \brief [2:2] Load Bus Error - LBE (rwh) */
    unsigned __sfrbit32 DRE:1;           /**< \brief [3:3] Local DLMU Range Error - DRE (rwh) */
    unsigned __sfrbit32 reserved_4:2;    /**< \brief [5:4] \internal Reserved */
    unsigned __sfrbit32 CRE:1;           /**< \brief [6:6] Cache Refill Error - CRE (rwh) */
    unsigned __sfrbit32 reserved_7:7;    /**< \brief [13:7] \internal Reserved */
    unsigned __sfrbit32 DTME:1;          /**< \brief [14:14] DTAG MSIST Error - DTME (rwh) */
    unsigned __sfrbit32 LOE:1;           /**< \brief [15:15] Load Overlay Error - LOE (rwh) */
    unsigned __sfrbit32 SDE:1;           /**< \brief [16:16] Segment Difference Error - SDE (rwh) */
    unsigned __sfrbit32 SCE:1;           /**< \brief [17:17] Segment Crossing Error - SCE (rwh) */
    unsigned __sfrbit32 CAC:1;           /**< \brief [18:18] CSFR Access Error - CAC (rwh) */
    unsigned __sfrbit32 MPE:1;           /**< \brief [19:19] Memory Protection Error - MPE (rwh) */
    unsigned __sfrbit32 CLE:1;           /**< \brief [20:20] Context Location Error - CLE (rwh) */
    unsigned __sfrbit32 reserved_21:3;    /**< \brief [23:21] \internal Reserved */
    unsigned __sfrbit32 ALN:1;           /**< \brief [24:24] Alignment Error - ALN (rwh) */
    unsigned __sfrbit32 reserved_25:7;    /**< \brief [31:25] \internal Reserved */
} Ifx_CPU_DSTR_Bits;

/** \brief CPUx External Event Register */
typedef struct _Ifx_CPU_EXEVT_Bits
{
    unsigned __sfrbit32 EVTA:3;          /**< \brief [2:0] Event Associated - EVTA (rw) */
    unsigned __sfrbit32 BBM:1;           /**< \brief [3:3] Break Before Make (BBM) or Break After Make (BAM) Selection - BBM (rw) */
    unsigned __sfrbit32 BOD:1;           /**< \brief [4:4] Breakout Disable - BOD (rw) */
    unsigned __sfrbit32 SUSP:1;          /**< \brief [5:5] CDC Suspend-Out Signal State - SUSP (rw) */
    unsigned __sfrbit32 CNT:2;           /**< \brief [7:6] Counter - CNT (rw) */
    unsigned __sfrbit32 reserved_8:24;    /**< \brief [31:8] \internal Reserved */
} Ifx_CPU_EXEVT_Bits;

/** \brief CPUx Free CSA List Head Pointer */
typedef struct _Ifx_CPU_FCX_Bits
{
    unsigned __sfrbit32 FCXO:16;         /**< \brief [15:0] FCX Offset Address Field - FCXO (rwh) */
    unsigned __sfrbit32 FCXS:4;          /**< \brief [19:16] FCX Segment Address Field - FCXS (rwh) */
    unsigned __sfrbit32 reserved_20:12;    /**< \brief [31:20] \internal Reserved */
} Ifx_CPU_FCX_Bits;

/** \brief CPUx Flash Configuration Register 0 */
typedef struct _Ifx_CPU_FLASHCON0_Bits
{
    unsigned __sfrbit32 TAG1:6;          /**< \brief [5:0] Flash Prefetch Buffer 1 Configuration (rw) */
    unsigned __sfrbit32 reserved_6:2;    /**< \brief [7:6] \internal Reserved */
    unsigned __sfrbit32 TAG2:6;          /**< \brief [13:8] Flash Prefetch Buffer 2 Configuration (rw) */
    unsigned __sfrbit32 reserved_14:2;    /**< \brief [15:14] \internal Reserved */
    unsigned __sfrbit32 TAG3:6;          /**< \brief [21:16] Flash Prefetch Buffer 3 Configuration (rw) */
    unsigned __sfrbit32 reserved_22:2;    /**< \brief [23:22] \internal Reserved */
    unsigned __sfrbit32 TAG4:6;          /**< \brief [29:24] Flash Prefetch Buffer 4 Configuration (rw) */
    unsigned __sfrbit32 reserved_30:2;    /**< \brief [31:30] \internal Reserved */
} Ifx_CPU_FLASHCON0_Bits;

/** \brief CPUx Flash Configuration Register 1 */
typedef struct _Ifx_CPU_FLASHCON1_Bits
{
    unsigned __sfrbit32 STALL:1;         /**< \brief [0:0] Stall Bus Request (rw) */
    unsigned __sfrbit32 reserved_1:15;    /**< \brief [15:1] \internal Reserved */
    unsigned __sfrbit32 MASKUECC:2;      /**< \brief [17:16] Mask PFLASH Uncorrectable ECC Bit Error (rw) */
    unsigned __sfrbit32 reserved_18:6;    /**< \brief [23:18] \internal Reserved */
    unsigned __sfrbit32 reserved_24:2;    /**< \brief [25:24] \internal Reserved */
    unsigned __sfrbit32 reserved_26:6;    /**< \brief [31:26] \internal Reserved */
} Ifx_CPU_FLASHCON1_Bits;

/** \brief CPUx Flash Configuration Register 2 */
typedef struct _Ifx_CPU_FLASHCON2_Bits
{
    unsigned __sfrbit32 RECDIS:2;        /**< \brief [1:0] Address Buffer Recording Disable (rw) */
    unsigned __sfrbit32 ECCCORDIS:2;     /**< \brief [3:2] ECC Correction Disable - ECCCORDIS (rw) */
    unsigned __sfrbit32 reserved_4:4;    /**< \brief [7:4] \internal Reserved */
    unsigned __sfrbit32 HMARGIN:2;       /**< \brief [9:8] Hard Margin Selection (rw) */
    unsigned __sfrbit32 MSEL:2;          /**< \brief [11:10] Margin Read Selection (rw) */
    unsigned __sfrbit32 reserved_12:4;    /**< \brief [15:12] \internal Reserved */
    unsigned __sfrbit32 ECCSCLR:2;       /**< \brief [17:16] Clear ECC Status Register (w) */
    unsigned __sfrbit32 reserved_18:6;    /**< \brief [23:18] \internal Reserved */
    unsigned __sfrbit32 SBABCLR:2;       /**< \brief [25:24] Clear SBAB Record Registers (w) */
    unsigned __sfrbit32 DBABCLR:2;       /**< \brief [27:26] Clear DBAB Record Registers (w) */
    unsigned __sfrbit32 MBABCLR:2;       /**< \brief [29:28] Clear MBAB Record Registers (w) */
    unsigned __sfrbit32 ZBABCLR:2;       /**< \brief [31:30] Clear ZBAB Record Registers - ZBABCLR (w) */
} Ifx_CPU_FLASHCON2_Bits;

/** \brief CPUx Flash Configuration Register 3 */
typedef struct _Ifx_CPU_FLASHCON3_Bits
{
    unsigned __sfrbit32 ECCERRINJ:1;     /**< \brief [0:0] ECC Error Injection (rw) */
    unsigned __sfrbit32 EDCERRINJ:1;     /**< \brief [1:1] EDC Error Injection (rw) */
    unsigned __sfrbit32 SBABERRINJ:1;    /**< \brief [2:2] Corrected Single Bits Address Buffer (SBAB) Error Injection (rw) */
    unsigned __sfrbit32 DBABERRINJ:1;    /**< \brief [3:3] Corrected Double Bits Address Buffer (DBAB) Error Injection (rw) */
    unsigned __sfrbit32 MBABERRINJ:1;    /**< \brief [4:4] Uncorrected Multi Bit Address Buffer (MBAB) Error Injection (rw) */
    unsigned __sfrbit32 ZBABERRINJ:1;    /**< \brief [5:5] Uncorrected All Zeros Bits Address Buffer (ZBAB) Error Injection (rw) */
    unsigned __sfrbit32 SBERERRINJ:1;    /**< \brief [6:6] Single Bit Error (SBER) Injection (rw) */
    unsigned __sfrbit32 DBERERRINJ:1;    /**< \brief [7:7] Double Bit Error (DBER) Injection (rw) */
    unsigned __sfrbit32 NVMCERRINJ:1;    /**< \brief [8:8] NVM Configuration (NVMCER) Injection (rw) */
    unsigned __sfrbit32 FLCONERRINJ:1;    /**< \brief [9:9] Flashcon Error (FLCONER) Injection (rw) */
    unsigned __sfrbit32 reserved_10:22;    /**< \brief [31:10] \internal Reserved */
} Ifx_CPU_FLASHCON3_Bits;

/** \brief CPUx Flash Configuration Register 4 */
typedef struct _Ifx_CPU_FLASHCON4_Bits
{
    unsigned __sfrbit32 DDIS:1;          /**< \brief [0:0] Disable direct LPB access (rw) */
    unsigned __sfrbit32 reserved_1:31;    /**< \brief [31:1] \internal Reserved */
} Ifx_CPU_FLASHCON4_Bits;

/** \brief CPUx Trap Control Register */
typedef struct _Ifx_CPU_FPU_TRAP_CON_Bits
{
    unsigned __sfrbit32 TST:1;           /**< \brief [0:0] Trap Status - TST (rh) */
    unsigned __sfrbit32 TCL:1;           /**< \brief [1:1] Trap Clear - TCL (w) */
    unsigned __sfrbit32 reserved_2:6;    /**< \brief [7:2] \internal Reserved */
    unsigned __sfrbit32 RM:2;            /**< \brief [9:8] Captured Rounding Mode - RM (rh) */
    unsigned __sfrbit32 reserved_10:8;    /**< \brief [17:10] \internal Reserved */
    unsigned __sfrbit32 FXE:1;           /**< \brief [18:18] FX Trap Enable - FXE (rw) */
    unsigned __sfrbit32 FUE:1;           /**< \brief [19:19] FU Trap Enable - FUE (rw) */
    unsigned __sfrbit32 FZE:1;           /**< \brief [20:20] FZ Trap Enable - FZE (rw) */
    unsigned __sfrbit32 FVE:1;           /**< \brief [21:21] FV Trap Enable - FVE (rw) */
    unsigned __sfrbit32 FIE:1;           /**< \brief [22:22] FI Trap Enable - FIE (rw) */
    unsigned __sfrbit32 reserved_23:3;    /**< \brief [25:23] \internal Reserved */
    unsigned __sfrbit32 FX:1;            /**< \brief [26:26] Captured FX - FX (rh) */
    unsigned __sfrbit32 FU:1;            /**< \brief [27:27] Captured FU - FU (rh) */
    unsigned __sfrbit32 FZ:1;            /**< \brief [28:28] Captured FZ - FZ (rh) */
    unsigned __sfrbit32 FV:1;            /**< \brief [29:29] Captured FV - FV (rh) */
    unsigned __sfrbit32 FI:1;            /**< \brief [30:30] Captured FI - FI (rh) */
    unsigned __sfrbit32 reserved_31:1;    /**< \brief [31:31] \internal Reserved */
} Ifx_CPU_FPU_TRAP_CON_Bits;

/** \brief CPUx Trapping Instruction Opcode Register */
typedef struct _Ifx_CPU_FPU_TRAP_OPC_Bits
{
    unsigned __sfrbit32 OPC:8;           /**< \brief [7:0] Captured Opcode - OPC (rh) */
    unsigned __sfrbit32 FMT:1;           /**< \brief [8:8] Captured Instruction Format - FMT (rh) */
    unsigned __sfrbit32 reserved_9:7;    /**< \brief [15:9] \internal Reserved */
    unsigned __sfrbit32 DREG:4;          /**< \brief [19:16] Captured Destination Register - DREG (rh) */
    unsigned __sfrbit32 reserved_20:12;    /**< \brief [31:20] \internal Reserved */
} Ifx_CPU_FPU_TRAP_OPC_Bits;

/** \brief CPUx Trapping Instruction Program Counter Register */
typedef struct _Ifx_CPU_FPU_TRAP_PC_Bits
{
    unsigned __sfrbit32 PC:32;           /**< \brief [31:0] Captured Program Counter - PC (rh) */
} Ifx_CPU_FPU_TRAP_PC_Bits;

/** \brief CPUx Trapping Instruction Operand Register */
typedef struct _Ifx_CPU_FPU_TRAP_SRC1_Bits
{
    unsigned __sfrbit32 SRC1:32;         /**< \brief [31:0] Captured SRC1 Operand - SRC1 (rh) */
} Ifx_CPU_FPU_TRAP_SRC1_Bits;

/** \brief CPUx Trapping Instruction Operand Register */
typedef struct _Ifx_CPU_FPU_TRAP_SRC2_Bits
{
    unsigned __sfrbit32 SRC2:32;         /**< \brief [31:0] Captured SRC2 Operand - SRC2 (rh) */
} Ifx_CPU_FPU_TRAP_SRC2_Bits;

/** \brief CPUx Trapping Instruction Operand Register */
typedef struct _Ifx_CPU_FPU_TRAP_SRC3_Bits
{
    unsigned __sfrbit32 SRC3:32;         /**< \brief [31:0] Captured SRC3 Operand - SRC3 (rh) */
} Ifx_CPU_FPU_TRAP_SRC3_Bits;

/** \brief CPUx Instruction Count */
typedef struct _Ifx_CPU_ICNT_Bits
{
    unsigned __sfrbit32 COUNTVALUE:31;    /**< \brief [30:0] Count Value - CountValue (rwh) */
    unsigned __sfrbit32 SOVF:1;          /**< \brief [31:31] Sticky Overflow Bit - SOvf (rwh) */
} Ifx_CPU_ICNT_Bits;

/** \brief CPUx Interrupt Control Register */
typedef struct _Ifx_CPU_ICR_Bits
{
    unsigned __sfrbit32 CCPN:8;          /**< \brief [7:0] Current CPU Priority Number - CCPN (rwh) */
    unsigned __sfrbit32 reserved_8:7;    /**< \brief [14:8] \internal Reserved */
    unsigned __sfrbit32 IE:1;            /**< \brief [15:15] Global Interrupt Enable Bit - IE (rwh) */
    unsigned __sfrbit32 PIPN:8;          /**< \brief [23:16] Pending Interrupt Priority Number - PIPN (rh) */
    unsigned __sfrbit32 reserved_24:8;    /**< \brief [31:24] \internal Reserved */
} Ifx_CPU_ICR_Bits;

/** \brief CPUx Interrupt Stack Pointer */
typedef struct _Ifx_CPU_ISP_Bits
{
    unsigned __sfrbit32 ISP:32;          /**< \brief [31:0] Interrupt Stack Pointer - ISP (rw) */
} Ifx_CPU_ISP_Bits;

/** \brief CPUx  Reset Register 0 */
typedef struct _Ifx_CPU_KRST0_Bits
{
    unsigned __sfrbit32 RST:1;           /**< \brief [0:0] Kernel Reset - RST (rwh) */
    unsigned __sfrbit32 RSTSTAT:2;       /**< \brief [2:1] Kernel Reset Status - RSTSTAT (rh) */
    unsigned __sfrbit32 reserved_3:29;    /**< \brief [31:3] \internal Reserved */
} Ifx_CPU_KRST0_Bits;

/** \brief CPUx  Reset Register 1 */
typedef struct _Ifx_CPU_KRST1_Bits
{
    unsigned __sfrbit32 RST:1;           /**< \brief [0:0] Kernel Reset - RST (rwh) */
    unsigned __sfrbit32 reserved_1:31;    /**< \brief [31:1] \internal Reserved */
} Ifx_CPU_KRST1_Bits;

/** \brief CPUx Reset Clear Register */
typedef struct _Ifx_CPU_KRSTCLR_Bits
{
    unsigned __sfrbit32 CLR:1;           /**< \brief [0:0] Kernel Reset Status Clear - CLR (w) */
    unsigned __sfrbit32 reserved_1:31;    /**< \brief [31:1] \internal Reserved */
} Ifx_CPU_KRSTCLR_Bits;

/** \brief CPUx Free CSA List Limit Pointer */
typedef struct _Ifx_CPU_LCX_Bits
{
    unsigned __sfrbit32 LCXO:16;         /**< \brief [15:0] LCX Offset Field - LCXO (rw) */
    unsigned __sfrbit32 LCXS:4;          /**< \brief [19:16] LCX Segment Address - LCXS (rw) */
    unsigned __sfrbit32 reserved_20:12;    /**< \brief [31:20] \internal Reserved */
} Ifx_CPU_LCX_Bits;

/** \brief CPUx Safety Protection Region LPB Read Access Enable Register A */
typedef struct _Ifx_CPU_LPB_SPROT_ACCENA_R_Bits
{
    unsigned __sfrbit32 EN0:1;           /**< \brief [0:0] Access Enable for Master TAG ID 0 - EN0 (rw) */
    unsigned __sfrbit32 EN1:1;           /**< \brief [1:1] Access Enable for Master TAG ID 1 - EN1 (rw) */
    unsigned __sfrbit32 EN2:1;           /**< \brief [2:2] Access Enable for Master TAG ID 2 - EN2 (rw) */
    unsigned __sfrbit32 EN3:1;           /**< \brief [3:3] Access Enable for Master TAG ID 3 - EN3 (rw) */
    unsigned __sfrbit32 EN4:1;           /**< \brief [4:4] Access Enable for Master TAG ID 4 - EN4 (rw) */
    unsigned __sfrbit32 EN5:1;           /**< \brief [5:5] Access Enable for Master TAG ID 5 - EN5 (rw) */
    unsigned __sfrbit32 EN6:1;           /**< \brief [6:6] Access Enable for Master TAG ID 6 - EN6 (rw) */
    unsigned __sfrbit32 EN7:1;           /**< \brief [7:7] Access Enable for Master TAG ID 7 - EN7 (rw) */
    unsigned __sfrbit32 EN8:1;           /**< \brief [8:8] Access Enable for Master TAG ID 8 - EN8 (rw) */
    unsigned __sfrbit32 EN9:1;           /**< \brief [9:9] Access Enable for Master TAG ID 9 - EN9 (rw) */
    unsigned __sfrbit32 EN10:1;          /**< \brief [10:10] Access Enable for Master TAG ID 10 - EN10 (rw) */
    unsigned __sfrbit32 EN11:1;          /**< \brief [11:11] Access Enable for Master TAG ID 11 - EN11 (rw) */
    unsigned __sfrbit32 EN12:1;          /**< \brief [12:12] Access Enable for Master TAG ID 12 - EN12 (rw) */
    unsigned __sfrbit32 EN13:1;          /**< \brief [13:13] Access Enable for Master TAG ID 13 - EN13 (rw) */
    unsigned __sfrbit32 EN14:1;          /**< \brief [14:14] Access Enable for Master TAG ID 14 - EN14 (rw) */
    unsigned __sfrbit32 EN15:1;          /**< \brief [15:15] Access Enable for Master TAG ID 15 - EN15 (rw) */
    unsigned __sfrbit32 EN16:1;          /**< \brief [16:16] Access Enable for Master TAG ID 16 - EN16 (rw) */
    unsigned __sfrbit32 EN17:1;          /**< \brief [17:17] Access Enable for Master TAG ID 17 - EN17 (rw) */
    unsigned __sfrbit32 EN18:1;          /**< \brief [18:18] Access Enable for Master TAG ID 18 - EN18 (rw) */
    unsigned __sfrbit32 EN19:1;          /**< \brief [19:19] Access Enable for Master TAG ID 19 - EN19 (rw) */
    unsigned __sfrbit32 EN20:1;          /**< \brief [20:20] Access Enable for Master TAG ID 20 - EN20 (rw) */
    unsigned __sfrbit32 EN21:1;          /**< \brief [21:21] Access Enable for Master TAG ID 21 - EN21 (rw) */
    unsigned __sfrbit32 EN22:1;          /**< \brief [22:22] Access Enable for Master TAG ID 22 - EN22 (rw) */
    unsigned __sfrbit32 EN23:1;          /**< \brief [23:23] Access Enable for Master TAG ID 23 - EN23 (rw) */
    unsigned __sfrbit32 EN24:1;          /**< \brief [24:24] Access Enable for Master TAG ID 24 - EN24 (rw) */
    unsigned __sfrbit32 EN25:1;          /**< \brief [25:25] Access Enable for Master TAG ID 25 - EN25 (rw) */
    unsigned __sfrbit32 EN26:1;          /**< \brief [26:26] Access Enable for Master TAG ID 26 - EN26 (rw) */
    unsigned __sfrbit32 EN27:1;          /**< \brief [27:27] Access Enable for Master TAG ID 27 - EN27 (rw) */
    unsigned __sfrbit32 EN28:1;          /**< \brief [28:28] Access Enable for Master TAG ID 28 - EN28 (rw) */
    unsigned __sfrbit32 EN29:1;          /**< \brief [29:29] Access Enable for Master TAG ID 29 - EN29 (rw) */
    unsigned __sfrbit32 EN30:1;          /**< \brief [30:30] Access Enable for Master TAG ID 30 - EN30 (rw) */
    unsigned __sfrbit32 EN31:1;          /**< \brief [31:31] Access Enable for Master TAG ID 31 - EN31 (rw) */
} Ifx_CPU_LPB_SPROT_ACCENA_R_Bits;

/** \brief CPUx Safety Protection Region LPB Read Access Enable Register B */
typedef struct _Ifx_CPU_LPB_SPROT_ACCENB_R_Bits
{
    unsigned __sfrbit32 EN32:1;          /**< \brief [0:0] Access Enable for Master TAG ID 32 - EN32 (rw) */
    unsigned __sfrbit32 EN33:1;          /**< \brief [1:1] Access Enable for Master TAG ID 33 - EN33 (rw) */
    unsigned __sfrbit32 EN34:1;          /**< \brief [2:2] Access Enable for Master TAG ID 34 - EN34 (rw) */
    unsigned __sfrbit32 EN35:1;          /**< \brief [3:3] Access Enable for Master TAG ID 35 - EN35 (rw) */
    unsigned __sfrbit32 EN36:1;          /**< \brief [4:4] Access Enable for Master TAG ID 36 - EN36 (rw) */
    unsigned __sfrbit32 EN37:1;          /**< \brief [5:5] Access Enable for Master TAG ID 37 - EN37 (rw) */
    unsigned __sfrbit32 EN38:1;          /**< \brief [6:6] Access Enable for Master TAG ID 38 - EN38 (rw) */
    unsigned __sfrbit32 EN39:1;          /**< \brief [7:7] Access Enable for Master TAG ID 39 - EN39 (rw) */
    unsigned __sfrbit32 EN40:1;          /**< \brief [8:8] Access Enable for Master TAG ID 40 - EN40 (rw) */
    unsigned __sfrbit32 EN41:1;          /**< \brief [9:9] Access Enable for Master TAG ID 41 - EN41 (rw) */
    unsigned __sfrbit32 EN42:1;          /**< \brief [10:10] Access Enable for Master TAG ID 42 - EN42 (rw) */
    unsigned __sfrbit32 EN43:1;          /**< \brief [11:11] Access Enable for Master TAG ID 43 - EN43 (rw) */
    unsigned __sfrbit32 EN44:1;          /**< \brief [12:12] Access Enable for Master TAG ID 44 - EN44 (rw) */
    unsigned __sfrbit32 EN45:1;          /**< \brief [13:13] Access Enable for Master TAG ID 45 - EN45 (rw) */
    unsigned __sfrbit32 EN46:1;          /**< \brief [14:14] Access Enable for Master TAG ID 46 - EN46 (rw) */
    unsigned __sfrbit32 EN47:1;          /**< \brief [15:15] Access Enable for Master TAG ID 47 - EN47 (rw) */
    unsigned __sfrbit32 EN48:1;          /**< \brief [16:16] Access Enable for Master TAG ID 48 - EN48 (rw) */
    unsigned __sfrbit32 EN49:1;          /**< \brief [17:17] Access Enable for Master TAG ID 49 - EN49 (rw) */
    unsigned __sfrbit32 EN50:1;          /**< \brief [18:18] Access Enable for Master TAG ID 50 - EN50 (rw) */
    unsigned __sfrbit32 EN51:1;          /**< \brief [19:19] Access Enable for Master TAG ID 51 - EN51 (rw) */
    unsigned __sfrbit32 EN52:1;          /**< \brief [20:20] Access Enable for Master TAG ID 52 - EN52 (rw) */
    unsigned __sfrbit32 EN53:1;          /**< \brief [21:21] Access Enable for Master TAG ID 53 - EN53 (rw) */
    unsigned __sfrbit32 EN54:1;          /**< \brief [22:22] Access Enable for Master TAG ID 54 - EN54 (rw) */
    unsigned __sfrbit32 EN55:1;          /**< \brief [23:23] Access Enable for Master TAG ID 55 - EN55 (rw) */
    unsigned __sfrbit32 EN56:1;          /**< \brief [24:24] Access Enable for Master TAG ID 56 - EN56 (rw) */
    unsigned __sfrbit32 EN57:1;          /**< \brief [25:25] Access Enable for Master TAG ID 57 - EN57 (rw) */
    unsigned __sfrbit32 EN58:1;          /**< \brief [26:26] Access Enable for Master TAG ID 58 - EN58 (rw) */
    unsigned __sfrbit32 EN59:1;          /**< \brief [27:27] Access Enable for Master TAG ID 59 - EN59 (rw) */
    unsigned __sfrbit32 EN60:1;          /**< \brief [28:28] Access Enable for Master TAG ID 60 - EN60 (rw) */
    unsigned __sfrbit32 EN61:1;          /**< \brief [29:29] Access Enable for Master TAG ID 61 - EN61 (rw) */
    unsigned __sfrbit32 EN62:1;          /**< \brief [30:30] Access Enable for Master TAG ID 62 - EN62 (rw) */
    unsigned __sfrbit32 EN63:1;          /**< \brief [31:31] Access Enable for Master TAG ID 63 - EN63 (rw) */
} Ifx_CPU_LPB_SPROT_ACCENB_R_Bits;

/** \brief CPUx Multi-Count Register 1 */
typedef struct _Ifx_CPU_M1CNT_Bits
{
    unsigned __sfrbit32 COUNTVALUE:31;    /**< \brief [30:0] Count Value - CountValue (rwh) */
    unsigned __sfrbit32 SOVF:1;          /**< \brief [31:31] Sticky Overflow Bit - SOvf (rwh) */
} Ifx_CPU_M1CNT_Bits;

/** \brief CPUx Multi-Count Register 2 */
typedef struct _Ifx_CPU_M2CNT_Bits
{
    unsigned __sfrbit32 COUNTVALUE:31;    /**< \brief [30:0] Count Value - CountValue (rwh) */
    unsigned __sfrbit32 SOVF:1;          /**< \brief [31:31] Sticky Overflow Bit - SOvf (rwh) */
} Ifx_CPU_M2CNT_Bits;

/** \brief CPUx Multi-Count Register 3 */
typedef struct _Ifx_CPU_M3CNT_Bits
{
    unsigned __sfrbit32 COUNTVALUE:31;    /**< \brief [30:0] Count Value - CountValue (rwh) */
    unsigned __sfrbit32 SOVF:1;          /**< \brief [31:31] Sticky Overflow Bit - SOvf (rwh) */
} Ifx_CPU_M3CNT_Bits;

/** \brief CPUx  Overlay Range Select Register */
typedef struct _Ifx_CPU_OSEL_Bits
{
    unsigned __sfrbit32 SHOVEN_X:32;     /**< \brief [31:0] Shadow Overlay Enable - SHOVEN[x] (rw) */
} Ifx_CPU_OSEL_Bits;

/** \brief CPUx Program Counter */
typedef struct _Ifx_CPU_PC_Bits
{
    unsigned __sfrbit32 reserved_0:1;    /**< \brief [0:0] \internal Reserved */
    unsigned __sfrbit32 PC:31;           /**< \brief [31:1] Program Counter - PC (rwh) */
} Ifx_CPU_PC_Bits;

/** \brief CPUx Program Control 0 */
typedef struct _Ifx_CPU_PCON0_Bits
{
    unsigned __sfrbit32 reserved_0:1;    /**< \brief [0:0] \internal Reserved */
    unsigned __sfrbit32 PCBYP:1;         /**< \brief [1:1] Program Cache Bypass - PCBYP (rw) */
    unsigned __sfrbit32 reserved_2:30;    /**< \brief [31:2] \internal Reserved */
} Ifx_CPU_PCON0_Bits;

/** \brief CPUx Program Control 1 */
typedef struct _Ifx_CPU_PCON1_Bits
{
    unsigned __sfrbit32 PCINV:1;         /**< \brief [0:0] Program Cache Invalidate - PCINV (rw) */
    unsigned __sfrbit32 PBINV:1;         /**< \brief [1:1] Program Buffer Invalidate - PBINV (rw) */
    unsigned __sfrbit32 reserved_2:30;    /**< \brief [31:2] \internal Reserved */
} Ifx_CPU_PCON1_Bits;

/** \brief CPUx Program Control 2 */
typedef struct _Ifx_CPU_PCON2_Bits
{
    unsigned __sfrbit32 PCACHE_SZE:16;    /**< \brief [15:0] Program Cache Size (ICACHE) in KBytes - PCACHE_SZE (r) */
    unsigned __sfrbit32 PSCRATCH_SZE:16;    /**< \brief [31:16] Program Scratch Size in KBytes - PSCRATCH_SZE (r) */
} Ifx_CPU_PCON2_Bits;

/** \brief CPUx Previous Context Information Register */
typedef struct _Ifx_CPU_PCXI_Bits
{
    unsigned __sfrbit32 PCXO:16;         /**< \brief [15:0] Previous Context Pointer Offset Field - PCXO (rwh) */
    unsigned __sfrbit32 PCXS:4;          /**< \brief [19:16] Previous Context Pointer Segment Address - PCXS (rwh) */
    unsigned __sfrbit32 UL:1;            /**< \brief [20:20] Upper or Lower Context Tag - UL (rwh) */
    unsigned __sfrbit32 PIE:1;           /**< \brief [21:21] Previous Interrupt Enable - PIE (rwh) */
    unsigned __sfrbit32 PCPN:8;          /**< \brief [29:22] Previous CPU Priority Number - PCPN (rwh) */
    unsigned __sfrbit32 reserved_30:2;    /**< \brief [31:30] \internal Reserved */
} Ifx_CPU_PCXI_Bits;

/** \brief CPUx Program Integrity Error Address Register */
typedef struct _Ifx_CPU_PIEAR_Bits
{
    unsigned __sfrbit32 TA:32;           /**< \brief [31:0] Transaction Address - TA (rh) */
} Ifx_CPU_PIEAR_Bits;

/** \brief CPUx Program Integrity Error Trap Register */
typedef struct _Ifx_CPU_PIETR_Bits
{
    unsigned __sfrbit32 IED:1;           /**< \brief [0:0] Integrity Error Detected - IED (rwh) */
    unsigned __sfrbit32 IE_T:1;          /**< \brief [1:1] Integrity Error - TAG Memory - IE_T (rh) */
    unsigned __sfrbit32 IE_C:1;          /**< \brief [2:2] Integrity Error - Cache Memory - IE_C (rh) */
    unsigned __sfrbit32 IE_S:1;          /**< \brief [3:3] Integrity Error - Scratchpad Memory - IE_S (rh) */
    unsigned __sfrbit32 IE_BI:1;         /**< \brief [4:4] Integrity Error - Bus Interface - IE_BI (rh) */
    unsigned __sfrbit32 E_INFO:6;        /**< \brief [10:5] Error Information - E_INFO (rh) */
    unsigned __sfrbit32 IE_UNC:1;        /**< \brief [11:11] Integrity Error - Uncorrectable Error Detected - IE_UNC (rh) */
    unsigned __sfrbit32 IE_SP:1;         /**< \brief [12:12] Safety Protection Error Detected - IE_SP (rh) */
    unsigned __sfrbit32 IE_BS:1;         /**< \brief [13:13] Bus Slave Access Indicator - IE_BS (rh) */
    unsigned __sfrbit32 IE_ADDR:1;       /**< \brief [14:14] Address Phase error detected at SRI slave interface - IE_ADDR (rh) */
    unsigned __sfrbit32 IE_LPB:1;        /**< \brief [15:15] Integrity Error - Local Pflash bank - IE_LPB (rh) */
    unsigned __sfrbit32 IE_MTMV:1;       /**< \brief [16:16] Memory Test Mode Violation detected - IE_MTMV (rh) */
    unsigned __sfrbit32 reserved_17:15;    /**< \brief [31:17] \internal Reserved */
} Ifx_CPU_PIETR_Bits;

/** \brief CPUx Data Access CacheabilityRegister */
typedef struct _Ifx_CPU_PMA0_Bits
{
    unsigned __sfrbit32 DAC:16;          /**< \brief [15:0] Data Access Cacheability Segments FHto 0H - DAC (rw) */
    unsigned __sfrbit32 reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_CPU_PMA0_Bits;

/** \brief CPUx Code Access CacheabilityRegister */
typedef struct _Ifx_CPU_PMA1_Bits
{
    unsigned __sfrbit32 CAC:16;          /**< \brief [15:0] Code Access Cacheability Segments FH-0H - CAC (rw) */
    unsigned __sfrbit32 reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_CPU_PMA1_Bits;

/** \brief CPUx  Peripheral Space Identifier register */
typedef struct _Ifx_CPU_PMA2_Bits
{
    unsigned __sfrbit32 PSI:16;          /**< \brief [15:0] Peripheral Space Identifier Segments FH-0H - PSI (r) */
    unsigned __sfrbit32 reserved_16:16;    /**< \brief [31:16] \internal Reserved */
} Ifx_CPU_PMA2_Bits;

/** \brief CPUx Program Synchronous Trap Register */
typedef struct _Ifx_CPU_PSTR_Bits
{
    unsigned __sfrbit32 FRE:1;           /**< \brief [0:0] Fetch Range Error - FRE (rwh) */
    unsigned __sfrbit32 reserved_1:1;    /**< \brief [1:1] \internal Reserved */
    unsigned __sfrbit32 FBE:1;           /**< \brief [2:2] Fetch Bus Error - FBE (rwh) */
    unsigned __sfrbit32 reserved_3:9;    /**< \brief [11:3] \internal Reserved */
    unsigned __sfrbit32 FPE:1;           /**< \brief [12:12] Fetch Peripheral Error - FPE (rwh) */
    unsigned __sfrbit32 reserved_13:1;    /**< \brief [13:13] \internal Reserved */
    unsigned __sfrbit32 FME:1;           /**< \brief [14:14] Fetch MSIST Error - FME (rwh) */
    unsigned __sfrbit32 reserved_15:17;    /**< \brief [31:15] \internal Reserved */
} Ifx_CPU_PSTR_Bits;

/** \brief CPUx Program Status Word */
typedef struct _Ifx_CPU_PSW_Bits
{
    unsigned __sfrbit32 CDC:7;           /**< \brief [6:0] Call Depth Counter - CDC (rwh) */
    unsigned __sfrbit32 CDE:1;           /**< \brief [7:7] Call Depth Count Enable - CDE (rwh) */
    unsigned __sfrbit32 GW:1;            /**< \brief [8:8] Global Address Register Write Permission - GW (rwh) */
    unsigned __sfrbit32 IS:1;            /**< \brief [9:9] Interrupt Stack Control - IS (rwh) */
    unsigned __sfrbit32 IO:2;            /**< \brief [11:10] Access Privilege Level Control (I/O Privilege) - IO (rwh) */
    unsigned __sfrbit32 PRS:2;           /**< \brief [13:12] Protection Register Set - PRS (rwh) */
    unsigned __sfrbit32 S:1;             /**< \brief [14:14] Safe Task Identifier - S (rwh) */
    unsigned __sfrbit32 PRS2:1;          /**< \brief [15:15] Protection Register Set MSB - PRS2 (rwh) */
    unsigned __sfrbit32 reserved_16:8;    /**< \brief [23:16] \internal Reserved */
    unsigned __sfrbit32 USB:8;           /**< \brief [31:24] User Status Bits - USB (rw) */
} Ifx_CPU_PSW_Bits;

/** \brief CPUx Safety Protection SPR Region Write Access Enable Register A${i} */
typedef struct _Ifx_CPU_RGN_ACCENA_Bits
{
    unsigned __sfrbit32 EN0:1;           /**< \brief [0:0] Access Enable for Master TAG ID 0 - EN0 (rw) */
    unsigned __sfrbit32 EN1:1;           /**< \brief [1:1] Access Enable for Master TAG ID 1 - EN1 (rw) */
    unsigned __sfrbit32 EN2:1;           /**< \brief [2:2] Access Enable for Master TAG ID 2 - EN2 (rw) */
    unsigned __sfrbit32 EN3:1;           /**< \brief [3:3] Access Enable for Master TAG ID 3 - EN3 (rw) */
    unsigned __sfrbit32 EN4:1;           /**< \brief [4:4] Access Enable for Master TAG ID 4 - EN4 (rw) */
    unsigned __sfrbit32 EN5:1;           /**< \brief [5:5] Access Enable for Master TAG ID 5 - EN5 (rw) */
    unsigned __sfrbit32 EN6:1;           /**< \brief [6:6] Access Enable for Master TAG ID 6 - EN6 (rw) */
    unsigned __sfrbit32 EN7:1;           /**< \brief [7:7] Access Enable for Master TAG ID 7 - EN7 (rw) */
    unsigned __sfrbit32 EN8:1;           /**< \brief [8:8] Access Enable for Master TAG ID 8 - EN8 (rw) */
    unsigned __sfrbit32 EN9:1;           /**< \brief [9:9] Access Enable for Master TAG ID 9 - EN9 (rw) */
    unsigned __sfrbit32 EN10:1;          /**< \brief [10:10] Access Enable for Master TAG ID 10 - EN10 (rw) */
    unsigned __sfrbit32 EN11:1;          /**< \brief [11:11] Access Enable for Master TAG ID 11 - EN11 (rw) */
    unsigned __sfrbit32 EN12:1;          /**< \brief [12:12] Access Enable for Master TAG ID 12 - EN12 (rw) */
    unsigned __sfrbit32 EN13:1;          /**< \brief [13:13] Access Enable for Master TAG ID 13 - EN13 (rw) */
    unsigned __sfrbit32 EN14:1;          /**< \brief [14:14] Access Enable for Master TAG ID 14 - EN14 (rw) */
    unsigned __sfrbit32 EN15:1;          /**< \brief [15:15] Access Enable for Master TAG ID 15 - EN15 (rw) */
    unsigned __sfrbit32 EN16:1;          /**< \brief [16:16] Access Enable for Master TAG ID 16 - EN16 (rw) */
    unsigned __sfrbit32 EN17:1;          /**< \brief [17:17] Access Enable for Master TAG ID 17 - EN17 (rw) */
    unsigned __sfrbit32 EN18:1;          /**< \brief [18:18] Access Enable for Master TAG ID 18 - EN18 (rw) */
    unsigned __sfrbit32 EN19:1;          /**< \brief [19:19] Access Enable for Master TAG ID 19 - EN19 (rw) */
    unsigned __sfrbit32 EN20:1;          /**< \brief [20:20] Access Enable for Master TAG ID 20 - EN20 (rw) */
    unsigned __sfrbit32 EN21:1;          /**< \brief [21:21] Access Enable for Master TAG ID 21 - EN21 (rw) */
    unsigned __sfrbit32 EN22:1;          /**< \brief [22:22] Access Enable for Master TAG ID 22 - EN22 (rw) */
    unsigned __sfrbit32 EN23:1;          /**< \brief [23:23] Access Enable for Master TAG ID 23 - EN23 (rw) */
    unsigned __sfrbit32 EN24:1;          /**< \brief [24:24] Access Enable for Master TAG ID 24 - EN24 (rw) */
    unsigned __sfrbit32 EN25:1;          /**< \brief [25:25] Access Enable for Master TAG ID 25 - EN25 (rw) */
    unsigned __sfrbit32 EN26:1;          /**< \brief [26:26] Access Enable for Master TAG ID 26 - EN26 (rw) */
    unsigned __sfrbit32 EN27:1;          /**< \brief [27:27] Access Enable for Master TAG ID 27 - EN27 (rw) */
    unsigned __sfrbit32 EN28:1;          /**< \brief [28:28] Access Enable for Master TAG ID 28 - EN28 (rw) */
    unsigned __sfrbit32 EN29:1;          /**< \brief [29:29] Access Enable for Master TAG ID 29 - EN29 (rw) */
    unsigned __sfrbit32 EN30:1;          /**< \brief [30:30] Access Enable for Master TAG ID 30 - EN30 (rw) */
    unsigned __sfrbit32 EN31:1;          /**< \brief [31:31] Access Enable for Master TAG ID 31 - EN31 (rw) */
} Ifx_CPU_RGN_ACCENA_Bits;

/** \brief CPUx Safety Protection SPR Region Write Access Enable Register B${i} */
typedef struct _Ifx_CPU_RGN_ACCENB_Bits
{
    unsigned __sfrbit32 EN32:1;          /**< \brief [0:0] Access Enable for Master TAG ID 32 - EN32 (rw) */
    unsigned __sfrbit32 EN33:1;          /**< \brief [1:1] Access Enable for Master TAG ID 33 - EN33 (rw) */
    unsigned __sfrbit32 EN34:1;          /**< \brief [2:2] Access Enable for Master TAG ID 34 - EN34 (rw) */
    unsigned __sfrbit32 EN35:1;          /**< \brief [3:3] Access Enable for Master TAG ID 35 - EN35 (rw) */
    unsigned __sfrbit32 EN36:1;          /**< \brief [4:4] Access Enable for Master TAG ID 36 - EN36 (rw) */
    unsigned __sfrbit32 EN37:1;          /**< \brief [5:5] Access Enable for Master TAG ID 37 - EN37 (rw) */
    unsigned __sfrbit32 EN38:1;          /**< \brief [6:6] Access Enable for Master TAG ID 38 - EN38 (rw) */
    unsigned __sfrbit32 EN39:1;          /**< \brief [7:7] Access Enable for Master TAG ID 39 - EN39 (rw) */
    unsigned __sfrbit32 EN40:1;          /**< \brief [8:8] Access Enable for Master TAG ID 40 - EN40 (rw) */
    unsigned __sfrbit32 EN41:1;          /**< \brief [9:9] Access Enable for Master TAG ID 41 - EN41 (rw) */
    unsigned __sfrbit32 EN42:1;          /**< \brief [10:10] Access Enable for Master TAG ID 42 - EN42 (rw) */
    unsigned __sfrbit32 EN43:1;          /**< \brief [11:11] Access Enable for Master TAG ID 43 - EN43 (rw) */
    unsigned __sfrbit32 EN44:1;          /**< \brief [12:12] Access Enable for Master TAG ID 44 - EN44 (rw) */
    unsigned __sfrbit32 EN45:1;          /**< \brief [13:13] Access Enable for Master TAG ID 45 - EN45 (rw) */
    unsigned __sfrbit32 EN46:1;          /**< \brief [14:14] Access Enable for Master TAG ID 46 - EN46 (rw) */
    unsigned __sfrbit32 EN47:1;          /**< \brief [15:15] Access Enable for Master TAG ID 47 - EN47 (rw) */
    unsigned __sfrbit32 EN48:1;          /**< \brief [16:16] Access Enable for Master TAG ID 48 - EN48 (rw) */
    unsigned __sfrbit32 EN49:1;          /**< \brief [17:17] Access Enable for Master TAG ID 49 - EN49 (rw) */
    unsigned __sfrbit32 EN50:1;          /**< \brief [18:18] Access Enable for Master TAG ID 50 - EN50 (rw) */
    unsigned __sfrbit32 EN51:1;          /**< \brief [19:19] Access Enable for Master TAG ID 51 - EN51 (rw) */
    unsigned __sfrbit32 EN52:1;          /**< \brief [20:20] Access Enable for Master TAG ID 52 - EN52 (rw) */
    unsigned __sfrbit32 EN53:1;          /**< \brief [21:21] Access Enable for Master TAG ID 53 - EN53 (rw) */
    unsigned __sfrbit32 EN54:1;          /**< \brief [22:22] Access Enable for Master TAG ID 54 - EN54 (rw) */
    unsigned __sfrbit32 EN55:1;          /**< \brief [23:23] Access Enable for Master TAG ID 55 - EN55 (rw) */
    unsigned __sfrbit32 EN56:1;          /**< \brief [24:24] Access Enable for Master TAG ID 56 - EN56 (rw) */
    unsigned __sfrbit32 EN57:1;          /**< \brief [25:25] Access Enable for Master TAG ID 57 - EN57 (rw) */
    unsigned __sfrbit32 EN58:1;          /**< \brief [26:26] Access Enable for Master TAG ID 58 - EN58 (rw) */
    unsigned __sfrbit32 EN59:1;          /**< \brief [27:27] Access Enable for Master TAG ID 59 - EN59 (rw) */
    unsigned __sfrbit32 EN60:1;          /**< \brief [28:28] Access Enable for Master TAG ID 60 - EN60 (rw) */
    unsigned __sfrbit32 EN61:1;          /**< \brief [29:29] Access Enable for Master TAG ID 61 - EN61 (rw) */
    unsigned __sfrbit32 EN62:1;          /**< \brief [30:30] Access Enable for Master TAG ID 62 - EN62 (rw) */
    unsigned __sfrbit32 EN63:1;          /**< \brief [31:31] Access Enable for Master TAG ID 63 - EN63 (rw) */
} Ifx_CPU_RGN_ACCENB_Bits;

/** \brief CPUx Safety Protection SPR Region Lower Address Register ${i} */
typedef struct _Ifx_CPU_RGN_LA_Bits
{
    unsigned __sfrbit32 reserved_0:5;    /**< \brief [4:0] \internal Reserved */
    unsigned __sfrbit32 ADDR:27;         /**< \brief [31:5] Region Lower Address - ADDR (rw) */
} Ifx_CPU_RGN_LA_Bits;

/** \brief CPUx Safety Protection SPR Region Upper Address Register ${i} */
typedef struct _Ifx_CPU_RGN_UA_Bits
{
    unsigned __sfrbit32 reserved_0:5;    /**< \brief [4:0] \internal Reserved */
    unsigned __sfrbit32 ADDR:27;         /**< \brief [31:5] Region Upper Address - ADDR (rw) */
} Ifx_CPU_RGN_UA_Bits;

/** \brief CPUx SRI Error Generation Register */
typedef struct _Ifx_CPU_SEGEN_Bits
{
    unsigned __sfrbit32 ADFLIP:8;        /**< \brief [7:0] Address ECC Bit Flip - ADFLIP (rw) */
    unsigned __sfrbit32 ADTYPE:2;        /**< \brief [9:8] Type of error - ADTYPE (rw) */
    unsigned __sfrbit32 reserved_10:21;    /**< \brief [30:10] \internal Reserved */
    unsigned __sfrbit32 AE:1;            /**< \brief [31:31] Activate Error Enable - AE (rwh) */
} Ifx_CPU_SEGEN_Bits;

/** \brief CPUx Safety Protection Register Access Enable Register A */
typedef struct _Ifx_CPU_SFR_SPROT_ACCENA_W_Bits
{
    unsigned __sfrbit32 EN0:1;           /**< \brief [0:0] Access Enable for Master TAG ID 0 - EN0 (rw) */
    unsigned __sfrbit32 EN1:1;           /**< \brief [1:1] Access Enable for Master TAG ID 1 - EN1 (rw) */
    unsigned __sfrbit32 EN2:1;           /**< \brief [2:2] Access Enable for Master TAG ID 2 - EN2 (rw) */
    unsigned __sfrbit32 EN3:1;           /**< \brief [3:3] Access Enable for Master TAG ID 3 - EN3 (rw) */
    unsigned __sfrbit32 EN4:1;           /**< \brief [4:4] Access Enable for Master TAG ID 4 - EN4 (rw) */
    unsigned __sfrbit32 EN5:1;           /**< \brief [5:5] Access Enable for Master TAG ID 5 - EN5 (rw) */
    unsigned __sfrbit32 EN6:1;           /**< \brief [6:6] Access Enable for Master TAG ID 6 - EN6 (rw) */
    unsigned __sfrbit32 EN7:1;           /**< \brief [7:7] Access Enable for Master TAG ID 7 - EN7 (rw) */
    unsigned __sfrbit32 EN8:1;           /**< \brief [8:8] Access Enable for Master TAG ID 8 - EN8 (rw) */
    unsigned __sfrbit32 EN9:1;           /**< \brief [9:9] Access Enable for Master TAG ID 9 - EN9 (rw) */
    unsigned __sfrbit32 EN10:1;          /**< \brief [10:10] Access Enable for Master TAG ID 10 - EN10 (rw) */
    unsigned __sfrbit32 EN11:1;          /**< \brief [11:11] Access Enable for Master TAG ID 11 - EN11 (rw) */
    unsigned __sfrbit32 EN12:1;          /**< \brief [12:12] Access Enable for Master TAG ID 12 - EN12 (rw) */
    unsigned __sfrbit32 EN13:1;          /**< \brief [13:13] Access Enable for Master TAG ID 13 - EN13 (rw) */
    unsigned __sfrbit32 EN14:1;          /**< \brief [14:14] Access Enable for Master TAG ID 14 - EN14 (rw) */
    unsigned __sfrbit32 EN15:1;          /**< \brief [15:15] Access Enable for Master TAG ID 15 - EN15 (rw) */
    unsigned __sfrbit32 EN16:1;          /**< \brief [16:16] Access Enable for Master TAG ID 16 - EN16 (rw) */
    unsigned __sfrbit32 EN17:1;          /**< \brief [17:17] Access Enable for Master TAG ID 17 - EN17 (rw) */
    unsigned __sfrbit32 EN18:1;          /**< \brief [18:18] Access Enable for Master TAG ID 18 - EN18 (rw) */
    unsigned __sfrbit32 EN19:1;          /**< \brief [19:19] Access Enable for Master TAG ID 19 - EN19 (rw) */
    unsigned __sfrbit32 EN20:1;          /**< \brief [20:20] Access Enable for Master TAG ID 20 - EN20 (rw) */
    unsigned __sfrbit32 EN21:1;          /**< \brief [21:21] Access Enable for Master TAG ID 21 - EN21 (rw) */
    unsigned __sfrbit32 EN22:1;          /**< \brief [22:22] Access Enable for Master TAG ID 22 - EN22 (rw) */
    unsigned __sfrbit32 EN23:1;          /**< \brief [23:23] Access Enable for Master TAG ID 23 - EN23 (rw) */
    unsigned __sfrbit32 EN24:1;          /**< \brief [24:24] Access Enable for Master TAG ID 24 - EN24 (rw) */
    unsigned __sfrbit32 EN25:1;          /**< \brief [25:25] Access Enable for Master TAG ID 25 - EN25 (rw) */
    unsigned __sfrbit32 EN26:1;          /**< \brief [26:26] Access Enable for Master TAG ID 26 - EN26 (rw) */
    unsigned __sfrbit32 EN27:1;          /**< \brief [27:27] Access Enable for Master TAG ID 27 - EN27 (rw) */
    unsigned __sfrbit32 EN28:1;          /**< \brief [28:28] Access Enable for Master TAG ID 28 - EN28 (rw) */
    unsigned __sfrbit32 EN29:1;          /**< \brief [29:29] Access Enable for Master TAG ID 29 - EN29 (rw) */
    unsigned __sfrbit32 EN30:1;          /**< \brief [30:30] Access Enable for Master TAG ID 30 - EN30 (rw) */
    unsigned __sfrbit32 EN31:1;          /**< \brief [31:31] Access Enable for Master TAG ID 31 - EN31 (rw) */
} Ifx_CPU_SFR_SPROT_ACCENA_W_Bits;

/** \brief CPUx Safety Protection Region Access Enable Register B */
typedef struct _Ifx_CPU_SFR_SPROT_ACCENB_W_Bits
{
    unsigned __sfrbit32 EN32:1;          /**< \brief [0:0] Access Enable for Master TAG ID 32 - EN32 (rw) */
    unsigned __sfrbit32 EN33:1;          /**< \brief [1:1] Access Enable for Master TAG ID 33 - EN33 (rw) */
    unsigned __sfrbit32 EN34:1;          /**< \brief [2:2] Access Enable for Master TAG ID 34 - EN34 (rw) */
    unsigned __sfrbit32 EN35:1;          /**< \brief [3:3] Access Enable for Master TAG ID 35 - EN35 (rw) */
    unsigned __sfrbit32 EN36:1;          /**< \brief [4:4] Access Enable for Master TAG ID 36 - EN36 (rw) */
    unsigned __sfrbit32 EN37:1;          /**< \brief [5:5] Access Enable for Master TAG ID 37 - EN37 (rw) */
    unsigned __sfrbit32 EN38:1;          /**< \brief [6:6] Access Enable for Master TAG ID 38 - EN38 (rw) */
    unsigned __sfrbit32 EN39:1;          /**< \brief [7:7] Access Enable for Master TAG ID 39 - EN39 (rw) */
    unsigned __sfrbit32 EN40:1;          /**< \brief [8:8] Access Enable for Master TAG ID 40 - EN40 (rw) */
    unsigned __sfrbit32 EN41:1;          /**< \brief [9:9] Access Enable for Master TAG ID 41 - EN41 (rw) */
    unsigned __sfrbit32 EN42:1;          /**< \brief [10:10] Access Enable for Master TAG ID 42 - EN42 (rw) */
    unsigned __sfrbit32 EN43:1;          /**< \brief [11:11] Access Enable for Master TAG ID 43 - EN43 (rw) */
    unsigned __sfrbit32 EN44:1;          /**< \brief [12:12] Access Enable for Master TAG ID 44 - EN44 (rw) */
    unsigned __sfrbit32 EN45:1;          /**< \brief [13:13] Access Enable for Master TAG ID 45 - EN45 (rw) */
    unsigned __sfrbit32 EN46:1;          /**< \brief [14:14] Access Enable for Master TAG ID 46 - EN46 (rw) */
    unsigned __sfrbit32 EN47:1;          /**< \brief [15:15] Access Enable for Master TAG ID 47 - EN47 (rw) */
    unsigned __sfrbit32 EN48:1;          /**< \brief [16:16] Access Enable for Master TAG ID 48 - EN48 (rw) */
    unsigned __sfrbit32 EN49:1;          /**< \brief [17:17] Access Enable for Master TAG ID 49 - EN49 (rw) */
    unsigned __sfrbit32 EN50:1;          /**< \brief [18:18] Access Enable for Master TAG ID 50 - EN50 (rw) */
    unsigned __sfrbit32 EN51:1;          /**< \brief [19:19] Access Enable for Master TAG ID 51 - EN51 (rw) */
    unsigned __sfrbit32 EN52:1;          /**< \brief [20:20] Access Enable for Master TAG ID 52 - EN52 (rw) */
    unsigned __sfrbit32 EN53:1;          /**< \brief [21:21] Access Enable for Master TAG ID 53 - EN53 (rw) */
    unsigned __sfrbit32 EN54:1;          /**< \brief [22:22] Access Enable for Master TAG ID 54 - EN54 (rw) */
    unsigned __sfrbit32 EN55:1;          /**< \brief [23:23] Access Enable for Master TAG ID 55 - EN55 (rw) */
    unsigned __sfrbit32 EN56:1;          /**< \brief [24:24] Access Enable for Master TAG ID 56 - EN56 (rw) */
    unsigned __sfrbit32 EN57:1;          /**< \brief [25:25] Access Enable for Master TAG ID 57 - EN57 (rw) */
    unsigned __sfrbit32 EN58:1;          /**< \brief [26:26] Access Enable for Master TAG ID 58 - EN58 (rw) */
    unsigned __sfrbit32 EN59:1;          /**< \brief [27:27] Access Enable for Master TAG ID 59 - EN59 (rw) */
    unsigned __sfrbit32 EN60:1;          /**< \brief [28:28] Access Enable for Master TAG ID 60 - EN60 (rw) */
    unsigned __sfrbit32 EN61:1;          /**< \brief [29:29] Access Enable for Master TAG ID 61 - EN61 (rw) */
    unsigned __sfrbit32 EN62:1;          /**< \brief [30:30] Access Enable for Master TAG ID 62 - EN62 (rw) */
    unsigned __sfrbit32 EN63:1;          /**< \brief [31:31] Access Enable for Master TAG ID 63 - EN63 (rw) */
} Ifx_CPU_SFR_SPROT_ACCENB_W_Bits;

/** \brief CPUx SIST Mode Access Control Register */
typedef struct _Ifx_CPU_SMACON_Bits
{
    unsigned __sfrbit32 reserved_0:24;    /**< \brief [23:0] \internal Reserved */
    unsigned __sfrbit32 IODT:1;          /**< \brief [24:24] In-Order Data Transactions - IODT (rw) */
    unsigned __sfrbit32 reserved_25:7;    /**< \brief [31:25] \internal Reserved */
} Ifx_CPU_SMACON_Bits;

/** \brief CPUx Safety Protection SPR Region Read Access Enable Register A${i} */
typedef struct _Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits
{
    unsigned __sfrbit32 EN0:1;           /**< \brief [0:0] Access Enable for Master TAG ID 0 - EN0 (rw) */
    unsigned __sfrbit32 EN1:1;           /**< \brief [1:1] Access Enable for Master TAG ID 1 - EN1 (rw) */
    unsigned __sfrbit32 EN2:1;           /**< \brief [2:2] Access Enable for Master TAG ID 2 - EN2 (rw) */
    unsigned __sfrbit32 EN3:1;           /**< \brief [3:3] Access Enable for Master TAG ID 3 - EN3 (rw) */
    unsigned __sfrbit32 EN4:1;           /**< \brief [4:4] Access Enable for Master TAG ID 4 - EN4 (rw) */
    unsigned __sfrbit32 EN5:1;           /**< \brief [5:5] Access Enable for Master TAG ID 5 - EN5 (rw) */
    unsigned __sfrbit32 EN6:1;           /**< \brief [6:6] Access Enable for Master TAG ID 6 - EN6 (rw) */
    unsigned __sfrbit32 EN7:1;           /**< \brief [7:7] Access Enable for Master TAG ID 7 - EN7 (rw) */
    unsigned __sfrbit32 EN8:1;           /**< \brief [8:8] Access Enable for Master TAG ID 8 - EN8 (rw) */
    unsigned __sfrbit32 EN9:1;           /**< \brief [9:9] Access Enable for Master TAG ID 9 - EN9 (rw) */
    unsigned __sfrbit32 EN10:1;          /**< \brief [10:10] Access Enable for Master TAG ID 10 - EN10 (rw) */
    unsigned __sfrbit32 EN11:1;          /**< \brief [11:11] Access Enable for Master TAG ID 11 - EN11 (rw) */
    unsigned __sfrbit32 EN12:1;          /**< \brief [12:12] Access Enable for Master TAG ID 12 - EN12 (rw) */
    unsigned __sfrbit32 EN13:1;          /**< \brief [13:13] Access Enable for Master TAG ID 13 - EN13 (rw) */
    unsigned __sfrbit32 EN14:1;          /**< \brief [14:14] Access Enable for Master TAG ID 14 - EN14 (rw) */
    unsigned __sfrbit32 EN15:1;          /**< \brief [15:15] Access Enable for Master TAG ID 15 - EN15 (rw) */
    unsigned __sfrbit32 EN16:1;          /**< \brief [16:16] Access Enable for Master TAG ID 16 - EN16 (rw) */
    unsigned __sfrbit32 EN17:1;          /**< \brief [17:17] Access Enable for Master TAG ID 17 - EN17 (rw) */
    unsigned __sfrbit32 EN18:1;          /**< \brief [18:18] Access Enable for Master TAG ID 18 - EN18 (rw) */
    unsigned __sfrbit32 EN19:1;          /**< \brief [19:19] Access Enable for Master TAG ID 19 - EN19 (rw) */
    unsigned __sfrbit32 EN20:1;          /**< \brief [20:20] Access Enable for Master TAG ID 20 - EN20 (rw) */
    unsigned __sfrbit32 EN21:1;          /**< \brief [21:21] Access Enable for Master TAG ID 21 - EN21 (rw) */
    unsigned __sfrbit32 EN22:1;          /**< \brief [22:22] Access Enable for Master TAG ID 22 - EN22 (rw) */
    unsigned __sfrbit32 EN23:1;          /**< \brief [23:23] Access Enable for Master TAG ID 23 - EN23 (rw) */
    unsigned __sfrbit32 EN24:1;          /**< \brief [24:24] Access Enable for Master TAG ID 24 - EN24 (rw) */
    unsigned __sfrbit32 EN25:1;          /**< \brief [25:25] Access Enable for Master TAG ID 25 - EN25 (rw) */
    unsigned __sfrbit32 EN26:1;          /**< \brief [26:26] Access Enable for Master TAG ID 26 - EN26 (rw) */
    unsigned __sfrbit32 EN27:1;          /**< \brief [27:27] Access Enable for Master TAG ID 27 - EN27 (rw) */
    unsigned __sfrbit32 EN28:1;          /**< \brief [28:28] Access Enable for Master TAG ID 28 - EN28 (rw) */
    unsigned __sfrbit32 EN29:1;          /**< \brief [29:29] Access Enable for Master TAG ID 29 - EN29 (rw) */
    unsigned __sfrbit32 EN30:1;          /**< \brief [30:30] Access Enable for Master TAG ID 30 - EN30 (rw) */
    unsigned __sfrbit32 EN31:1;          /**< \brief [31:31] Access Enable for Master TAG ID 31 - EN31 (rw) */
} Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits;

/** \brief CPUx Safety Protection SPR Region Read Access Enable Register B${i} */
typedef struct _Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits
{
    unsigned __sfrbit32 EN32:1;          /**< \brief [0:0] Access Enable for Master TAG ID 32 - EN32 (rw) */
    unsigned __sfrbit32 EN33:1;          /**< \brief [1:1] Access Enable for Master TAG ID 33 - EN33 (rw) */
    unsigned __sfrbit32 EN34:1;          /**< \brief [2:2] Access Enable for Master TAG ID 34 - EN34 (rw) */
    unsigned __sfrbit32 EN35:1;          /**< \brief [3:3] Access Enable for Master TAG ID 35 - EN35 (rw) */
    unsigned __sfrbit32 EN36:1;          /**< \brief [4:4] Access Enable for Master TAG ID 36 - EN36 (rw) */
    unsigned __sfrbit32 EN37:1;          /**< \brief [5:5] Access Enable for Master TAG ID 37 - EN37 (rw) */
    unsigned __sfrbit32 EN38:1;          /**< \brief [6:6] Access Enable for Master TAG ID 38 - EN38 (rw) */
    unsigned __sfrbit32 EN39:1;          /**< \brief [7:7] Access Enable for Master TAG ID 39 - EN39 (rw) */
    unsigned __sfrbit32 EN40:1;          /**< \brief [8:8] Access Enable for Master TAG ID 40 - EN40 (rw) */
    unsigned __sfrbit32 EN41:1;          /**< \brief [9:9] Access Enable for Master TAG ID 41 - EN41 (rw) */
    unsigned __sfrbit32 EN42:1;          /**< \brief [10:10] Access Enable for Master TAG ID 42 - EN42 (rw) */
    unsigned __sfrbit32 EN43:1;          /**< \brief [11:11] Access Enable for Master TAG ID 43 - EN43 (rw) */
    unsigned __sfrbit32 EN44:1;          /**< \brief [12:12] Access Enable for Master TAG ID 44 - EN44 (rw) */
    unsigned __sfrbit32 EN45:1;          /**< \brief [13:13] Access Enable for Master TAG ID 45 - EN45 (rw) */
    unsigned __sfrbit32 EN46:1;          /**< \brief [14:14] Access Enable for Master TAG ID 46 - EN46 (rw) */
    unsigned __sfrbit32 EN47:1;          /**< \brief [15:15] Access Enable for Master TAG ID 47 - EN47 (rw) */
    unsigned __sfrbit32 EN48:1;          /**< \brief [16:16] Access Enable for Master TAG ID 48 - EN48 (rw) */
    unsigned __sfrbit32 EN49:1;          /**< \brief [17:17] Access Enable for Master TAG ID 49 - EN49 (rw) */
    unsigned __sfrbit32 EN50:1;          /**< \brief [18:18] Access Enable for Master TAG ID 50 - EN50 (rw) */
    unsigned __sfrbit32 EN51:1;          /**< \brief [19:19] Access Enable for Master TAG ID 51 - EN51 (rw) */
    unsigned __sfrbit32 EN52:1;          /**< \brief [20:20] Access Enable for Master TAG ID 52 - EN52 (rw) */
    unsigned __sfrbit32 EN53:1;          /**< \brief [21:21] Access Enable for Master TAG ID 53 - EN53 (rw) */
    unsigned __sfrbit32 EN54:1;          /**< \brief [22:22] Access Enable for Master TAG ID 54 - EN54 (rw) */
    unsigned __sfrbit32 EN55:1;          /**< \brief [23:23] Access Enable for Master TAG ID 55 - EN55 (rw) */
    unsigned __sfrbit32 EN56:1;          /**< \brief [24:24] Access Enable for Master TAG ID 56 - EN56 (rw) */
    unsigned __sfrbit32 EN57:1;          /**< \brief [25:25] Access Enable for Master TAG ID 57 - EN57 (rw) */
    unsigned __sfrbit32 EN58:1;          /**< \brief [26:26] Access Enable for Master TAG ID 58 - EN58 (rw) */
    unsigned __sfrbit32 EN59:1;          /**< \brief [27:27] Access Enable for Master TAG ID 59 - EN59 (rw) */
    unsigned __sfrbit32 EN60:1;          /**< \brief [28:28] Access Enable for Master TAG ID 60 - EN60 (rw) */
    unsigned __sfrbit32 EN61:1;          /**< \brief [29:29] Access Enable for Master TAG ID 61 - EN61 (rw) */
    unsigned __sfrbit32 EN62:1;          /**< \brief [30:30] Access Enable for Master TAG ID 62 - EN62 (rw) */
    unsigned __sfrbit32 EN63:1;          /**< \brief [31:31] Access Enable for Master TAG ID 63 - EN63 (rw) */
} Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits;

/** \brief CPUx Software Debug Event */
typedef struct _Ifx_CPU_SWEVT_Bits
{
    unsigned __sfrbit32 EVTA:3;          /**< \brief [2:0] Event Associated - EVTA (rw) */
    unsigned __sfrbit32 BBM:1;           /**< \brief [3:3] Break Before Make (BBM) or Break After Make (BAM) Selection - BBM (rw) */
    unsigned __sfrbit32 BOD:1;           /**< \brief [4:4] Breakout Disable - BOD (rw) */
    unsigned __sfrbit32 SUSP:1;          /**< \brief [5:5] CDC Suspend-Out Signal State - SUSP (rw) */
    unsigned __sfrbit32 CNT:2;           /**< \brief [7:6] Counter - CNT (rw) */
    unsigned __sfrbit32 reserved_8:24;    /**< \brief [31:8] \internal Reserved */
} Ifx_CPU_SWEVT_Bits;

/** \brief CPUx System Configuration Register */
typedef struct _Ifx_CPU_SYSCON_Bits
{
    unsigned __sfrbit32 FCDSF:1;         /**< \brief [0:0] Free Context List Depleted Sticky Flag - FCDSF (rwh) */
    unsigned __sfrbit32 PROTEN:1;        /**< \brief [1:1] Memory Protection Enable - PROTEN (rw) */
    unsigned __sfrbit32 TPROTEN:1;       /**< \brief [2:2] Temporal Protection Enable - TPROTEN (rw) */
    unsigned __sfrbit32 IS:1;            /**< \brief [3:3] Initial State Interrupt - IS (rw) */
    unsigned __sfrbit32 TS:1;            /**< \brief [4:4] Initial State Trap - TS (rw) */
    unsigned __sfrbit32 reserved_5:3;    /**< \brief [7:5] \internal Reserved */
    unsigned __sfrbit32 ESDIS:1;         /**< \brief [8:8] Emulator Space Disable (rw) */
    unsigned __sfrbit32 reserved_9:7;    /**< \brief [15:9] \internal Reserved */
    unsigned __sfrbit32 U1_IED:1;        /**< \brief [16:16] User-1 Instruction execution disable - U1_IED (rw) */
    unsigned __sfrbit32 U1_IOS:1;        /**< \brief [17:17] User-1 Peripheral access as supervisor - U1_IOS (rw) */
    unsigned __sfrbit32 reserved_18:6;    /**< \brief [23:18] \internal Reserved */
    unsigned __sfrbit32 BHALT:1;         /**< \brief [24:24] Boot Halt - BHALT (rw) */
    unsigned __sfrbit32 reserved_25:7;    /**< \brief [31:25] \internal Reserved */
} Ifx_CPU_SYSCON_Bits;

/** \brief CPUx Task Address Space Identifier Register */
typedef struct _Ifx_CPU_TASK_ASI_Bits
{
    unsigned __sfrbit32 ASI:5;           /**< \brief [4:0] Address Space Identifier - ASI (rw) */
    unsigned __sfrbit32 reserved_5:27;    /**< \brief [31:5] \internal Reserved */
} Ifx_CPU_TASK_ASI_Bits;

/** \brief CPUx Temporal Protection System Control Register */
typedef struct _Ifx_CPU_TPS_CON_Bits
{
    unsigned __sfrbit32 TEXP0:1;         /**< \brief [0:0] Timer0 Expired Flag - TEXP0 (rh) */
    unsigned __sfrbit32 TEXP1:1;         /**< \brief [1:1] Timer1 Expired Flag - TEXP1 (rh) */
    unsigned __sfrbit32 TEXP2:1;         /**< \brief [2:2] Timer1 Expired Flag - TEXP2 (rh) */
    unsigned __sfrbit32 reserved_3:13;    /**< \brief [15:3] \internal Reserved */
    unsigned __sfrbit32 TTRAP:1;         /**< \brief [16:16] Temporal Protection Trap - TTRAP (rh) */
    unsigned __sfrbit32 reserved_17:15;    /**< \brief [31:17] \internal Reserved */
} Ifx_CPU_TPS_CON_Bits;

/** \brief CPUx Exception Timer Class Enable Register */
typedef struct _Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits
{
    unsigned __sfrbit32 EXTIM_CLASS_EN:8;    /**< \brief [7:0] Exception Timer Class Enables - EXTIM_CLASS_EN (rw) */
    unsigned __sfrbit32 reserved_8:24;    /**< \brief [31:8] \internal Reserved */
} Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits;

/** \brief CPUx Exception Entry Timer Current Value */
typedef struct _Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits
{
    unsigned __sfrbit32 ENTRY_CVAL:12;    /**< \brief [11:0] Exception Entry Timer Current Value - ENTRY_CVAL (rh) */
    unsigned __sfrbit32 reserved_12:20;    /**< \brief [31:12] \internal Reserved */
} Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits;

/** \brief CPUx Exception Entry Timer Load Value */
typedef struct _Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits
{
    unsigned __sfrbit32 reserved_0:4;    /**< \brief [3:0] \internal Reserved */
    unsigned __sfrbit32 ENTRY_LVAL:8;    /**< \brief [11:4] Exception Entry Timer Load value - ENTRY_LVAL (rw) */
    unsigned __sfrbit32 reserved_12:20;    /**< \brief [31:12] \internal Reserved */
} Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits;

/** \brief CPUx Exception Exit Timer Current Value */
typedef struct _Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits
{
    unsigned __sfrbit32 EXIT_CVAL:24;    /**< \brief [23:0] Exception Exit Timer Current Value - EXIT_CVAL (rh) */
    unsigned __sfrbit32 reserved_24:8;    /**< \brief [31:24] \internal Reserved */
} Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits;

/** \brief CPUx Exception Exit  Timer Load Value */
typedef struct _Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits
{
    unsigned __sfrbit32 reserved_0:4;    /**< \brief [3:0] \internal Reserved */
    unsigned __sfrbit32 EXIT_LVAL:20;    /**< \brief [23:4] Exception Exit Timer Load value - EXIT_LVAL (rw) */
    unsigned __sfrbit32 reserved_24:8;    /**< \brief [31:24] \internal Reserved */
} Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits;

/** \brief CPUx Exception Timer FCX Register */
typedef struct _Ifx_CPU_TPS_EXTIM_FCX_Bits
{
    unsigned __sfrbit32 EXIT_FCX:20;     /**< \brief [19:0] Exception Exit Timer FCX - EXIT_FCX (rh) */
    unsigned __sfrbit32 reserved_20:12;    /**< \brief [31:20] \internal Reserved */
} Ifx_CPU_TPS_EXTIM_FCX_Bits;

/** \brief CPUx Exception Timer Status Register */
typedef struct _Ifx_CPU_TPS_EXTIM_STAT_Bits
{
    unsigned __sfrbit32 EXIT_TIN:8;      /**< \brief [7:0] Exception Exit Timer TIN - EXIT_TIN (rwh) */
    unsigned __sfrbit32 EXIT_CLASS:3;    /**< \brief [10:8] Exception Exit Timer Class - EXIT_CLASS (rwh) */
    unsigned __sfrbit32 reserved_11:4;    /**< \brief [14:11] \internal Reserved */
    unsigned __sfrbit32 EXIT_AT:1;       /**< \brief [15:15] Exception Exit Timer Alarm Triggered - EXIT_AT (rh) */
    unsigned __sfrbit32 ENTRY_TIN:8;     /**< \brief [23:16] Exception Entry Timer TIN - ENTRY_TIN (rwh) */
    unsigned __sfrbit32 ENTRY_CLASS:3;    /**< \brief [26:24] Exception Entry Timer Class - ENTRY_CLASS (rwh) */
    unsigned __sfrbit32 reserved_27:4;    /**< \brief [30:27] \internal Reserved */
    unsigned __sfrbit32 ENTRY_AT:1;      /**< \brief [31:31] Exception Entry Timer Alarm Triggered - ENTRY_AT (rh) */
} Ifx_CPU_TPS_EXTIM_STAT_Bits;

/** \brief CPUx Temporal Protection System Timer Register ${y} */
typedef struct _Ifx_CPU_TPS_TIMER_Bits
{
    unsigned __sfrbit32 TIMER:32;        /**< \brief [31:0] Temporal Protection Timer - Timer (rwh) */
} Ifx_CPU_TPS_TIMER_Bits;

/** \brief CPUx TriggerAddressx */
typedef struct _Ifx_CPU_TRIG_ACC_Bits
{
    unsigned __sfrbit32 T0:1;            /**< \brief [0:0] Trigger-0 - T0 (rh) */
    unsigned __sfrbit32 T1:1;            /**< \brief [1:1] Trigger-1 - T1 (rh) */
    unsigned __sfrbit32 T2:1;            /**< \brief [2:2] Trigger-2 - T2 (rh) */
    unsigned __sfrbit32 T3:1;            /**< \brief [3:3] Trigger-3 - T3 (rh) */
    unsigned __sfrbit32 T4:1;            /**< \brief [4:4] Trigger-4 - T4 (rh) */
    unsigned __sfrbit32 T5:1;            /**< \brief [5:5] Trigger-5 - T5 (rh) */
    unsigned __sfrbit32 T6:1;            /**< \brief [6:6] Trigger-6 - T6 (rh) */
    unsigned __sfrbit32 T7:1;            /**< \brief [7:7] Trigger-7 - T7 (rh) */
    unsigned __sfrbit32 reserved_8:24;    /**< \brief [31:8] \internal Reserved */
} Ifx_CPU_TRIG_ACC_Bits;

/** \brief CPUx Trigger Address ${i} */
typedef struct _Ifx_CPU_TR_ADR_Bits
{
    unsigned __sfrbit32 ADDR:32;         /**< \brief [31:0] Comparison Address - ADDR (rw) */
} Ifx_CPU_TR_ADR_Bits;

/** \brief CPUx Trigger Event ${i} */
typedef struct _Ifx_CPU_TR_EVT_Bits
{
    unsigned __sfrbit32 EVTA:3;          /**< \brief [2:0] Event Associated - EVTA (rw) */
    unsigned __sfrbit32 BBM:1;           /**< \brief [3:3] Break Before Make (BBM) or Break After Make (BAM) Selection - BBM (rw) */
    unsigned __sfrbit32 BOD:1;           /**< \brief [4:4] Breakout Disable - BOD (rw) */
    unsigned __sfrbit32 SUSP:1;          /**< \brief [5:5] CDC Suspend-Out Signal State - SUSP (rw) */
    unsigned __sfrbit32 CNT:2;           /**< \brief [7:6] Counter - CNT (rw) */
    unsigned __sfrbit32 reserved_8:4;    /**< \brief [11:8] \internal Reserved */
    unsigned __sfrbit32 TYP:1;           /**< \brief [12:12] Input Selection - TYP (rw) */
    unsigned __sfrbit32 RNG:1;           /**< \brief [13:13] Compare Type - RNG (rw) */
    unsigned __sfrbit32 reserved_14:1;    /**< \brief [14:14] \internal Reserved */
    unsigned __sfrbit32 ASI_EN:1;        /**< \brief [15:15] Enable ASI Comparison - ASI_EN (rw) */
    unsigned __sfrbit32 ASI:5;           /**< \brief [20:16] Address Space Identifier - ASI (rw) */
    unsigned __sfrbit32 reserved_21:6;    /**< \brief [26:21] \internal Reserved */
    unsigned __sfrbit32 AST:1;           /**< \brief [27:27] Address Store - AST (rw) */
    unsigned __sfrbit32 ALD:1;           /**< \brief [28:28] Address Load - ALD (rw) */
    unsigned __sfrbit32 reserved_29:3;    /**< \brief [31:29] \internal Reserved */
} Ifx_CPU_TR_EVT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_cpu_Registers_union
 * \{   */
/** \brief CPUx Address General Purpose Register ${y}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_A_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_A;

/** \brief CPUx Base Interrupt Vector Table Pointer   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_BIV_Bits B;               /**< \brief Bitfield access */
} Ifx_CPU_BIV;

/** \brief CPUx Overlay Mask Register ${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_BLK_OMASK_Bits B;         /**< \brief Bitfield access */
} Ifx_CPU_BLK_OMASK;

/** \brief CPUx Overlay Target Address Register ${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_BLK_OTAR_Bits B;          /**< \brief Bitfield access */
} Ifx_CPU_BLK_OTAR;

/** \brief CPUx Redirected Address Base Register ${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_BLK_RABR_Bits B;          /**< \brief Bitfield access */
} Ifx_CPU_BLK_RABR;

/** \brief CPUx Base Trap Vector Table Pointer   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_BTV_Bits B;               /**< \brief Bitfield access */
} Ifx_CPU_BTV;

/** \brief CPUx CPU Clock Cycle Count   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CCNT_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_CCNT;

/** \brief CPUx Counter Control   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CCTRL_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_CCTRL;

/** \brief CPUx Compatibility Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_COMPAT_Bits B;            /**< \brief Bitfield access */
} Ifx_CPU_COMPAT;

/** \brief CPUx Core Identification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CORE_ID_Bits B;           /**< \brief Bitfield access */
} Ifx_CPU_CORE_ID;

/** \brief CPUx Code Protection Range ${y} Lower Bound Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CPR_L_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_CPR_L;

/** \brief CPUx Code Protection Range ${y} Upper Bound Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CPR_U_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_CPR_U;

/** \brief CPUx Identification Register TC1.6.2P   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CPU_ID_Bits B;            /**< \brief Bitfield access */
} Ifx_CPU_CPU_ID;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CPXE_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_CPXE;

/** \brief CPUx Core Register Access Event   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CREVT_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_CREVT;

/** \brief CPUx Customer ID register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CUS_ID_Bits B;            /**< \brief Bitfield access */
} Ifx_CPU_CUS_ID;

/** \brief CPUx Data General Purpose Register ${y}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_D_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_D;

/** \brief CPUx Data Asynchronous Trap Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DATR_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_DATR;

/** \brief CPUx Debug Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DBGSR_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_DBGSR;

/** \brief CPUx Debug Trap Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DBGTCR_Bits B;            /**< \brief Bitfield access */
} Ifx_CPU_DBGTCR;

/** \brief CPUx Data Memory Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DCON0_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_DCON0;

/** \brief CPUx Data Control Register 2   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DCON2_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_DCON2;

/** \brief CPUx Debug Context Save Area Pointer   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DCX_Bits B;               /**< \brief Bitfield access */
} Ifx_CPU_DCX;

/** \brief CPUx Data Error Address Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DEADD_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_DEADD;

/** \brief CPUx Data Integrity Error Address Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DIEAR_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_DIEAR;

/** \brief CPUx Data Integrity Error Trap Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DIETR_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_DIETR;

/** \brief CPUx Safety Protection Region DLMU Read Access Enable Register A${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_DLMU_SPROT_RGNACCENA_R;

/** \brief CPUx Safety Protection Region DLMU Write Access Enable Register A${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_DLMU_SPROT_RGNACCENA_W;

/** \brief CPUx Safety Protection Region DLMU Read Access Enable Register B${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_DLMU_SPROT_RGNACCENB_R;

/** \brief CPUx Safety Protection Region DLMU Write Access Enable Register B${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_DLMU_SPROT_RGNACCENB_W;

/** \brief CPUx Safety Protection DLMU Region Lower Address Register ${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DLMU_SPROT_RGNLA_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_DLMU_SPROT_RGNLA;

/** \brief CPUx Safety protection DLMU Region Upper Address Register ${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DLMU_SPROT_RGNUA_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_DLMU_SPROT_RGNUA;

/** \brief CPUx Debug Monitor Start Address   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DMS_Bits B;               /**< \brief Bitfield access */
} Ifx_CPU_DMS;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DPRE_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_DPRE;

/** \brief CPUx Data Protection Range ${y}, Lower Bound Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DPR_L_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_DPR_L;

/** \brief CPUx Data Protection Range ${y}, Upper Bound Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DPR_U_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_DPR_U;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DPWE_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_DPWE;

/** \brief CPUx Data Synchronous Trap Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DSTR_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_DSTR;

/** \brief CPUx External Event Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_EXEVT_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_EXEVT;

/** \brief CPUx Free CSA List Head Pointer   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_FCX_Bits B;               /**< \brief Bitfield access */
} Ifx_CPU_FCX;

/** \brief CPUx Flash Configuration Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_FLASHCON0_Bits B;         /**< \brief Bitfield access */
} Ifx_CPU_FLASHCON0;

/** \brief CPUx Flash Configuration Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_FLASHCON1_Bits B;         /**< \brief Bitfield access */
} Ifx_CPU_FLASHCON1;

/** \brief CPUx Flash Configuration Register 2   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_FLASHCON2_Bits B;         /**< \brief Bitfield access */
} Ifx_CPU_FLASHCON2;

/** \brief CPUx Flash Configuration Register 3   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_FLASHCON3_Bits B;         /**< \brief Bitfield access */
} Ifx_CPU_FLASHCON3;

/** \brief CPUx Flash Configuration Register 4   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_FLASHCON4_Bits B;         /**< \brief Bitfield access */
} Ifx_CPU_FLASHCON4;

/** \brief CPUx Trap Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_FPU_TRAP_CON_Bits B;      /**< \brief Bitfield access */
} Ifx_CPU_FPU_TRAP_CON;

/** \brief CPUx Trapping Instruction Opcode Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_FPU_TRAP_OPC_Bits B;      /**< \brief Bitfield access */
} Ifx_CPU_FPU_TRAP_OPC;

/** \brief CPUx Trapping Instruction Program Counter Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_FPU_TRAP_PC_Bits B;       /**< \brief Bitfield access */
} Ifx_CPU_FPU_TRAP_PC;

/** \brief CPUx Trapping Instruction Operand Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_FPU_TRAP_SRC1_Bits B;     /**< \brief Bitfield access */
} Ifx_CPU_FPU_TRAP_SRC1;

/** \brief CPUx Trapping Instruction Operand Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_FPU_TRAP_SRC2_Bits B;     /**< \brief Bitfield access */
} Ifx_CPU_FPU_TRAP_SRC2;

/** \brief CPUx Trapping Instruction Operand Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_FPU_TRAP_SRC3_Bits B;     /**< \brief Bitfield access */
} Ifx_CPU_FPU_TRAP_SRC3;

/** \brief CPUx Instruction Count   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ICNT_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_ICNT;

/** \brief CPUx Interrupt Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ICR_Bits B;               /**< \brief Bitfield access */
} Ifx_CPU_ICR;

/** \brief CPUx Interrupt Stack Pointer   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ISP_Bits B;               /**< \brief Bitfield access */
} Ifx_CPU_ISP;

/** \brief CPUx  Reset Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_KRST0_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_KRST0;

/** \brief CPUx  Reset Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_KRST1_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_KRST1;

/** \brief CPUx Reset Clear Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_KRSTCLR_Bits B;           /**< \brief Bitfield access */
} Ifx_CPU_KRSTCLR;

/** \brief CPUx Free CSA List Limit Pointer   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_LCX_Bits B;               /**< \brief Bitfield access */
} Ifx_CPU_LCX;

/** \brief CPUx Safety Protection Region LPB Read Access Enable Register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_LPB_SPROT_ACCENA_R_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_LPB_SPROT_ACCENA_R;

/** \brief CPUx Safety Protection Region LPB Read Access Enable Register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_LPB_SPROT_ACCENB_R_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_LPB_SPROT_ACCENB_R;

/** \brief CPUx Multi-Count Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_M1CNT_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_M1CNT;

/** \brief CPUx Multi-Count Register 2   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_M2CNT_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_M2CNT;

/** \brief CPUx Multi-Count Register 3   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_M3CNT_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_M3CNT;

/** \brief CPUx  Overlay Range Select Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_OSEL_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_OSEL;

/** \brief CPUx Program Counter   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PC_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_PC;

/** \brief CPUx Program Control 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PCON0_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_PCON0;

/** \brief CPUx Program Control 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PCON1_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_PCON1;

/** \brief CPUx Program Control 2   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PCON2_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_PCON2;

/** \brief CPUx Previous Context Information Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PCXI_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_PCXI;

/** \brief CPUx Program Integrity Error Address Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PIEAR_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_PIEAR;

/** \brief CPUx Program Integrity Error Trap Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PIETR_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_PIETR;

/** \brief CPUx Data Access CacheabilityRegister   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PMA0_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_PMA0;

/** \brief CPUx Code Access CacheabilityRegister   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PMA1_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_PMA1;

/** \brief CPUx  Peripheral Space Identifier register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PMA2_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_PMA2;

/** \brief CPUx Program Synchronous Trap Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PSTR_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_PSTR;

/** \brief CPUx Program Status Word   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PSW_Bits B;               /**< \brief Bitfield access */
} Ifx_CPU_PSW;

/** \brief CPUx Safety Protection SPR Region Write Access Enable Register A${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_RGN_ACCENA_Bits B;        /**< \brief Bitfield access */
} Ifx_CPU_RGN_ACCENA;

/** \brief CPUx Safety Protection SPR Region Write Access Enable Register B${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_RGN_ACCENB_Bits B;        /**< \brief Bitfield access */
} Ifx_CPU_RGN_ACCENB;

/** \brief CPUx Safety Protection SPR Region Lower Address Register ${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_RGN_LA_Bits B;            /**< \brief Bitfield access */
} Ifx_CPU_RGN_LA;

/** \brief CPUx Safety Protection SPR Region Upper Address Register ${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_RGN_UA_Bits B;            /**< \brief Bitfield access */
} Ifx_CPU_RGN_UA;

/** \brief CPUx SRI Error Generation Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SEGEN_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_SEGEN;

/** \brief CPUx Safety Protection Register Access Enable Register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SFR_SPROT_ACCENA_W_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_SFR_SPROT_ACCENA_W;

/** \brief CPUx Safety Protection Region Access Enable Register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SFR_SPROT_ACCENB_W_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_SFR_SPROT_ACCENB_W;

/** \brief CPUx SIST Mode Access Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SMACON_Bits B;            /**< \brief Bitfield access */
} Ifx_CPU_SMACON;

/** \brief CPUx Safety Protection SPR Region Read Access Enable Register A${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_SPR_SPROT_RGNACCENA_R;

/** \brief CPUx Safety Protection SPR Region Read Access Enable Register B${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_SPR_SPROT_RGNACCENB_R;

/** \brief CPUx Software Debug Event   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SWEVT_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_SWEVT;

/** \brief CPUx System Configuration Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SYSCON_Bits B;            /**< \brief Bitfield access */
} Ifx_CPU_SYSCON;

/** \brief CPUx Task Address Space Identifier Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TASK_ASI_Bits B;          /**< \brief Bitfield access */
} Ifx_CPU_TASK_ASI;

/** \brief CPUx Temporal Protection System Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TPS_CON_Bits B;           /**< \brief Bitfield access */
} Ifx_CPU_TPS_CON;

/** \brief CPUx Exception Timer Class Enable Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_TPS_EXTIM_CLASS_EN;

/** \brief CPUx Exception Entry Timer Current Value   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_TPS_EXTIM_ENTRY_CVAL;

/** \brief CPUx Exception Entry Timer Load Value   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_TPS_EXTIM_ENTRY_LVAL;

/** \brief CPUx Exception Exit Timer Current Value   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_TPS_EXTIM_EXIT_CVAL;

/** \brief CPUx Exception Exit  Timer Load Value   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_TPS_EXTIM_EXIT_LVAL;

/** \brief CPUx Exception Timer FCX Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TPS_EXTIM_FCX_Bits B;     /**< \brief Bitfield access */
} Ifx_CPU_TPS_EXTIM_FCX;

/** \brief CPUx Exception Timer Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TPS_EXTIM_STAT_Bits B;    /**< \brief Bitfield access */
} Ifx_CPU_TPS_EXTIM_STAT;

/** \brief CPUx Temporal Protection System Timer Register ${y}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TPS_TIMER_Bits B;         /**< \brief Bitfield access */
} Ifx_CPU_TPS_TIMER;

/** \brief CPUx TriggerAddressx   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TRIG_ACC_Bits B;          /**< \brief Bitfield access */
} Ifx_CPU_TRIG_ACC;

/** \brief CPUx Trigger Address ${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TR_ADR_Bits B;            /**< \brief Bitfield access */
} Ifx_CPU_TR_ADR;

/** \brief CPUx Trigger Event ${i}   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TR_EVT_Bits B;            /**< \brief Bitfield access */
} Ifx_CPU_TR_EVT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_RGN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RGN object */
typedef volatile struct _Ifx_CPU_RGN
{
       Ifx_CPU_RGN_LA                      LA;                     /**< \brief 0, CPUx Safety Protection SPR Region Lower Address Register ${i}*/
       Ifx_CPU_RGN_UA                      UA;                     /**< \brief 4, CPUx Safety Protection SPR Region Upper Address Register ${i}*/
       Ifx_CPU_RGN_ACCENA                  ACCENA;                 /**< \brief 8, CPUx Safety Protection SPR Region Write Access Enable Register A${i}*/
       Ifx_CPU_RGN_ACCENB                  ACCENB;                 /**< \brief C, CPUx Safety Protection SPR Region Write Access Enable Register B${i}*/
} Ifx_CPU_RGN;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_BLK_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief BLK object */
typedef volatile struct _Ifx_CPU_BLK
{
       Ifx_CPU_BLK_RABR                    RABR;                   /**< \brief 0, CPUx Redirected Address Base Register ${i}*/
       Ifx_CPU_BLK_OTAR                    OTAR;                   /**< \brief 4, CPUx Overlay Target Address Register ${i}*/
       Ifx_CPU_BLK_OMASK                   OMASK;                  /**< \brief 8, CPUx Overlay Mask Register ${i}*/
} Ifx_CPU_BLK;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_FPU_TRAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief FPU_TRAP object */
typedef volatile struct _Ifx_CPU_FPU_TRAP
{
       Ifx_CPU_FPU_TRAP_CON                CON;                    /**< \brief 0, CPUx Trap Control Register*/
       Ifx_CPU_FPU_TRAP_PC                 PC;                     /**< \brief 4, CPUx Trapping Instruction Program Counter Register*/
       Ifx_CPU_FPU_TRAP_OPC                OPC;                    /**< \brief 8, CPUx Trapping Instruction Opcode Register*/
       Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       Ifx_CPU_FPU_TRAP_SRC1               SRC1;                   /**< \brief 10, CPUx Trapping Instruction Operand Register*/
       Ifx_CPU_FPU_TRAP_SRC2               SRC2;                   /**< \brief 14, CPUx Trapping Instruction Operand Register*/
       Ifx_CPU_FPU_TRAP_SRC3               SRC3;                   /**< \brief 18, CPUx Trapping Instruction Operand Register*/
} Ifx_CPU_FPU_TRAP;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_DPR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DPR object */
typedef volatile struct _Ifx_CPU_DPR
{
       Ifx_CPU_DPR_L                       L;                      /**< \brief 0, CPUx Data Protection Range ${y}, Lower Bound Register*/
       Ifx_CPU_DPR_U                       U;                      /**< \brief 4, CPUx Data Protection Range ${y}, Upper Bound Register*/
} Ifx_CPU_DPR;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_CPR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CPR object */
typedef volatile struct _Ifx_CPU_CPR
{
       Ifx_CPU_CPR_L                       L;                      /**< \brief 0, CPUx Code Protection Range ${y} Lower Bound Register*/
       Ifx_CPU_CPR_U                       U;                      /**< \brief 4, CPUx Code Protection Range ${y} Upper Bound Register*/
} Ifx_CPU_CPR;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_TPS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TPS object */
typedef volatile struct _Ifx_CPU_TPS
{
       Ifx_CPU_TPS_CON                     CON;                    /**< \brief 0, CPUx Temporal Protection System Control Register*/
       Ifx_CPU_TPS_TIMER                   TIMER[3];               /**< \brief 4, CPUx Temporal Protection System Timer Register ${y}*/
} Ifx_CPU_TPS;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_TPS_EXTIM_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TPS_EXTIM object */
typedef volatile struct _Ifx_CPU_TPS_EXTIM
{
       Ifx_CPU_TPS_EXTIM_ENTRY_LVAL        ENTRY_LVAL;             /**< \brief 0, CPUx Exception Entry Timer Load Value*/
       Ifx_CPU_TPS_EXTIM_ENTRY_CVAL        ENTRY_CVAL;             /**< \brief 4, CPUx Exception Entry Timer Current Value*/
       Ifx_CPU_TPS_EXTIM_EXIT_LVAL         EXIT_LVAL;              /**< \brief 8, CPUx Exception Exit  Timer Load Value*/
       Ifx_CPU_TPS_EXTIM_EXIT_CVAL         EXIT_CVAL;              /**< \brief C, CPUx Exception Exit Timer Current Value*/
       Ifx_CPU_TPS_EXTIM_CLASS_EN          CLASS_EN;               /**< \brief 10, CPUx Exception Timer Class Enable Register*/
       Ifx_CPU_TPS_EXTIM_STAT              STAT;                   /**< \brief 14, CPUx Exception Timer Status Register*/
       Ifx_CPU_TPS_EXTIM_FCX               FCX;                    /**< \brief 18, CPUx Exception Timer FCX Register*/
} Ifx_CPU_TPS_EXTIM;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_TR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TR object */
typedef volatile struct _Ifx_CPU_TR
{
       Ifx_CPU_TR_EVT                      EVT;                    /**< \brief 0, CPUx Trigger Event ${i}*/
       Ifx_CPU_TR_ADR                      ADR;                    /**< \brief 4, CPUx Trigger Address ${i}*/
} Ifx_CPU_TR;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief CPU object */
typedef volatile struct _Ifx_CPU
{
       Ifx_UReg_8Bit                       reserved_0[4352];       /**< \brief 0, \internal Reserved */
       Ifx_CPU_FLASHCON0                   FLASHCON0;              /**< \brief 1100, CPUx Flash Configuration Register 0*/
       Ifx_CPU_FLASHCON1                   FLASHCON1;              /**< \brief 1104, CPUx Flash Configuration Register 1*/
       Ifx_CPU_FLASHCON2                   FLASHCON2;              /**< \brief 1108, CPUx Flash Configuration Register 2*/
       Ifx_CPU_FLASHCON3                   FLASHCON3;              /**< \brief 110C, CPUx Flash Configuration Register 3*/
       Ifx_CPU_FLASHCON4                   FLASHCON4;              /**< \brief 1110, CPUx Flash Configuration Register 4*/
       Ifx_UReg_8Bit                       reserved_1114[48876];    /**< \brief 1114, \internal Reserved */
       Ifx_CPU_KRST0                       KRST0;                  /**< \brief D000, CPUx  Reset Register 0*/
       Ifx_CPU_KRST1                       KRST1;                  /**< \brief D004, CPUx  Reset Register 1*/
       Ifx_CPU_KRSTCLR                     KRSTCLR;                /**< \brief D008, CPUx Reset Clear Register*/
       Ifx_UReg_8Bit                       reserved_D00C[4084];    /**< \brief D00C, \internal Reserved */
       Ifx_CPU_RGN                         RGN[8];                 /**< \brief E000, CPUx Safety Protection SPR Region Write Access Enable Register B${i}*/
       Ifx_UReg_8Bit                       reserved_E080[8];       /**< \brief E080, \internal Reserved */
       Ifx_CPU_SPR_SPROT_RGNACCENA_R       SPR_SPROT_RGNACCENA_R0;    /**< \brief E088, */
       Ifx_CPU_SPR_SPROT_RGNACCENB_R       SPR_SPROT_RGNACCENB_R0;    /**< \brief E08C, */
       Ifx_UReg_8Bit                       reserved_E090[8];       /**< \brief E090, \internal Reserved */
       Ifx_CPU_SPR_SPROT_RGNACCENA_R       SPR_SPROT_RGNACCENA_R1;    /**< \brief E098, */
       Ifx_CPU_SPR_SPROT_RGNACCENB_R       SPR_SPROT_RGNACCENB_R1;    /**< \brief E09C, */
       Ifx_UReg_8Bit                       reserved_E0A0[8];       /**< \brief E0A0, \internal Reserved */
       Ifx_CPU_SPR_SPROT_RGNACCENA_R       SPR_SPROT_RGNACCENA_R2;    /**< \brief E0A8, */
       Ifx_CPU_SPR_SPROT_RGNACCENB_R       SPR_SPROT_RGNACCENB_R2;    /**< \brief E0AC, */
       Ifx_UReg_8Bit                       reserved_E0B0[8];       /**< \brief E0B0, \internal Reserved */
       Ifx_CPU_SPR_SPROT_RGNACCENA_R       SPR_SPROT_RGNACCENA_R3;    /**< \brief E0B8, */
       Ifx_CPU_SPR_SPROT_RGNACCENB_R       SPR_SPROT_RGNACCENB_R3;    /**< \brief E0BC, */
       Ifx_UReg_8Bit                       reserved_E0C0[8];       /**< \brief E0C0, \internal Reserved */
       Ifx_CPU_SPR_SPROT_RGNACCENA_R       SPR_SPROT_RGNACCENA_R4;    /**< \brief E0C8, */
       Ifx_CPU_SPR_SPROT_RGNACCENB_R       SPR_SPROT_RGNACCENB_R4;    /**< \brief E0CC, */
       Ifx_UReg_8Bit                       reserved_E0D0[8];       /**< \brief E0D0, \internal Reserved */
       Ifx_CPU_SPR_SPROT_RGNACCENA_R       SPR_SPROT_RGNACCENA_R5;    /**< \brief E0D8, */
       Ifx_CPU_SPR_SPROT_RGNACCENB_R       SPR_SPROT_RGNACCENB_R5;    /**< \brief E0DC, */
       Ifx_UReg_8Bit                       reserved_E0E0[8];       /**< \brief E0E0, \internal Reserved */
       Ifx_CPU_SPR_SPROT_RGNACCENA_R       SPR_SPROT_RGNACCENA_R6;    /**< \brief E0E8, */
       Ifx_CPU_SPR_SPROT_RGNACCENB_R       SPR_SPROT_RGNACCENB_R6;    /**< \brief E0EC, */
       Ifx_UReg_8Bit                       reserved_E0F0[8];       /**< \brief E0F0, \internal Reserved */
       Ifx_CPU_SPR_SPROT_RGNACCENA_R       SPR_SPROT_RGNACCENA_R7;    /**< \brief E0F8, */
       Ifx_CPU_SPR_SPROT_RGNACCENB_R       SPR_SPROT_RGNACCENB_R7;    /**< \brief E0FC, */
       Ifx_CPU_SFR_SPROT_ACCENA_W          SFR_SPROT_ACCENA_W;     /**< \brief E100, CPUx Safety Protection Register Access Enable Register A*/
       Ifx_CPU_SFR_SPROT_ACCENB_W          SFR_SPROT_ACCENB_W;     /**< \brief E104, CPUx Safety Protection Region Access Enable Register B*/
       Ifx_UReg_8Bit                       reserved_E108[8];       /**< \brief E108, \internal Reserved */
       Ifx_CPU_LPB_SPROT_ACCENA_R          LPB_SPROT_ACCENA_R;     /**< \brief E110, CPUx Safety Protection Region LPB Read Access Enable Register A*/
       Ifx_CPU_LPB_SPROT_ACCENB_R          LPB_SPROT_ACCENB_R;     /**< \brief E114, CPUx Safety Protection Region LPB Read Access Enable Register B*/
       Ifx_UReg_8Bit                       reserved_E118[232];     /**< \brief E118, \internal Reserved */
       Ifx_CPU_DLMU_SPROT_RGNLA            DLMU_SPROT_RGNLA0;      /**< \brief E200, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNUA            DLMU_SPROT_RGNUA0;      /**< \brief E204, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENA_W      DLMU_SPROT_RGNACCENA_W0;    /**< \brief E208, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENB_W      DLMU_SPROT_RGNACCENB_W0;    /**< \brief E20C, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNLA            DLMU_SPROT_RGNLA1;      /**< \brief E210, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNUA            DLMU_SPROT_RGNUA1;      /**< \brief E214, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENA_W      DLMU_SPROT_RGNACCENA_W1;    /**< \brief E218, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENB_W      DLMU_SPROT_RGNACCENB_W1;    /**< \brief E21C, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNLA            DLMU_SPROT_RGNLA2;      /**< \brief E220, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNUA            DLMU_SPROT_RGNUA2;      /**< \brief E224, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENA_W      DLMU_SPROT_RGNACCENA_W2;    /**< \brief E228, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENB_W      DLMU_SPROT_RGNACCENB_W2;    /**< \brief E22C, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNLA            DLMU_SPROT_RGNLA3;      /**< \brief E230, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNUA            DLMU_SPROT_RGNUA3;      /**< \brief E234, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENA_W      DLMU_SPROT_RGNACCENA_W3;    /**< \brief E238, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENB_W      DLMU_SPROT_RGNACCENB_W3;    /**< \brief E23C, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNLA            DLMU_SPROT_RGNLA4;      /**< \brief E240, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNUA            DLMU_SPROT_RGNUA4;      /**< \brief E244, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENA_W      DLMU_SPROT_RGNACCENA_W4;    /**< \brief E248, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENB_W      DLMU_SPROT_RGNACCENB_W4;    /**< \brief E24C, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNLA            DLMU_SPROT_RGNLA5;      /**< \brief E250, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNUA            DLMU_SPROT_RGNUA5;      /**< \brief E254, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENA_W      DLMU_SPROT_RGNACCENA_W5;    /**< \brief E258, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENB_W      DLMU_SPROT_RGNACCENB_W5;    /**< \brief E25C, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNLA            DLMU_SPROT_RGNLA6;      /**< \brief E260, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNUA            DLMU_SPROT_RGNUA6;      /**< \brief E264, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENA_W      DLMU_SPROT_RGNACCENA_W6;    /**< \brief E268, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENB_W      DLMU_SPROT_RGNACCENB_W6;    /**< \brief E26C, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNLA            DLMU_SPROT_RGNLA7;      /**< \brief E270, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNUA            DLMU_SPROT_RGNUA7;      /**< \brief E274, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENA_W      DLMU_SPROT_RGNACCENA_W7;    /**< \brief E278, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_CPU_DLMU_SPROT_RGNACCENB_W      DLMU_SPROT_RGNACCENB_W7;    /**< \brief E27C, CPUx Safety Protection Region DLMU Write Access Enable Register B${i}*/
       Ifx_UReg_8Bit                       reserved_E280[8];       /**< \brief E280, \internal Reserved */
       Ifx_CPU_DLMU_SPROT_RGNACCENA_R      DLMU_SPROT_RGNACCENA_R0;    /**< \brief E288, */
       Ifx_CPU_DLMU_SPROT_RGNACCENB_R      DLMU_SPROT_RGNACCENB_R0;    /**< \brief E28C, */
       Ifx_UReg_8Bit                       reserved_E290[8];       /**< \brief E290, \internal Reserved */
       Ifx_CPU_DLMU_SPROT_RGNACCENA_R      DLMU_SPROT_RGNACCENA_R1;    /**< \brief E298, */
       Ifx_CPU_DLMU_SPROT_RGNACCENB_R      DLMU_SPROT_RGNACCENB_R1;    /**< \brief E29C, */
       Ifx_UReg_8Bit                       reserved_E2A0[8];       /**< \brief E2A0, \internal Reserved */
       Ifx_CPU_DLMU_SPROT_RGNACCENA_R      DLMU_SPROT_RGNACCENA_R2;    /**< \brief E2A8, */
       Ifx_CPU_DLMU_SPROT_RGNACCENB_R      DLMU_SPROT_RGNACCENB_R2;    /**< \brief E2AC, */
       Ifx_UReg_8Bit                       reserved_E2B0[8];       /**< \brief E2B0, \internal Reserved */
       Ifx_CPU_DLMU_SPROT_RGNACCENA_R      DLMU_SPROT_RGNACCENA_R3;    /**< \brief E2B8, */
       Ifx_CPU_DLMU_SPROT_RGNACCENB_R      DLMU_SPROT_RGNACCENB_R3;    /**< \brief E2BC, */
       Ifx_UReg_8Bit                       reserved_E2C0[8];       /**< \brief E2C0, \internal Reserved */
       Ifx_CPU_DLMU_SPROT_RGNACCENA_R      DLMU_SPROT_RGNACCENA_R4;    /**< \brief E2C8, */
       Ifx_CPU_DLMU_SPROT_RGNACCENB_R      DLMU_SPROT_RGNACCENB_R4;    /**< \brief E2CC, */
       Ifx_UReg_8Bit                       reserved_E2D0[8];       /**< \brief E2D0, \internal Reserved */
       Ifx_CPU_DLMU_SPROT_RGNACCENA_R      DLMU_SPROT_RGNACCENA_R5;    /**< \brief E2D8, */
       Ifx_CPU_DLMU_SPROT_RGNACCENB_R      DLMU_SPROT_RGNACCENB_R5;    /**< \brief E2DC, */
       Ifx_UReg_8Bit                       reserved_E2E0[8];       /**< \brief E2E0, \internal Reserved */
       Ifx_CPU_DLMU_SPROT_RGNACCENA_R      DLMU_SPROT_RGNACCENA_R6;    /**< \brief E2E8, */
       Ifx_CPU_DLMU_SPROT_RGNACCENB_R      DLMU_SPROT_RGNACCENB_R6;    /**< \brief E2EC, */
       Ifx_UReg_8Bit                       reserved_E2F0[8];       /**< \brief E2F0, \internal Reserved */
       Ifx_CPU_DLMU_SPROT_RGNACCENA_R      DLMU_SPROT_RGNACCENA_R7;    /**< \brief E2F8, */
       Ifx_CPU_DLMU_SPROT_RGNACCENB_R      DLMU_SPROT_RGNACCENB_R7;    /**< \brief E2FC, */
       Ifx_UReg_8Bit                       reserved_E300[6144];    /**< \brief E300, \internal Reserved */
       Ifx_CPU_OSEL                        OSEL;                   /**< \brief FB00, CPUx  Overlay Range Select Register*/
       Ifx_UReg_8Bit                       reserved_FB04[12];      /**< \brief FB04, \internal Reserved */
       Ifx_CPU_BLK                         BLK[32];                /**< \brief FB10, CPUx Overlay Mask Register ${i}*/
       Ifx_UReg_8Bit                       reserved_FC90[5024];    /**< \brief FC90, \internal Reserved */
       Ifx_CPU_SEGEN                       SEGEN;                  /**< \brief 11030, CPUx SRI Error Generation Register*/
       Ifx_UReg_8Bit                       reserved_11034[28624];    /**< \brief 11034, \internal Reserved */
       Ifx_CPU_TASK_ASI                    TASK_ASI;               /**< \brief 18004, CPUx Task Address Space Identifier Register*/
       Ifx_UReg_8Bit                       reserved_18008[248];    /**< \brief 18008, \internal Reserved */
       Ifx_CPU_PMA0                        PMA0;                   /**< \brief 18100, CPUx Data Access CacheabilityRegister*/
       Ifx_CPU_PMA1                        PMA1;                   /**< \brief 18104, CPUx Code Access CacheabilityRegister*/
       Ifx_CPU_PMA2                        PMA2;                   /**< \brief 18108, CPUx  Peripheral Space Identifier register*/
       Ifx_UReg_8Bit                       reserved_1810C[3828];    /**< \brief 1810C, \internal Reserved */
       Ifx_CPU_DCON2                       DCON2;                  /**< \brief 19000, CPUx Data Control Register 2*/
       Ifx_UReg_8Bit                       reserved_19004[8];      /**< \brief 19004, \internal Reserved */
       Ifx_CPU_SMACON                      SMACON;                 /**< \brief 1900C, CPUx SIST Mode Access Control Register*/
       Ifx_CPU_DSTR                        DSTR;                   /**< \brief 19010, CPUx Data Synchronous Trap Register*/
       Ifx_UReg_8Bit                       reserved_19014[4];      /**< \brief 19014, \internal Reserved */
       Ifx_CPU_DATR                        DATR;                   /**< \brief 19018, CPUx Data Asynchronous Trap Register*/
       Ifx_CPU_DEADD                       DEADD;                  /**< \brief 1901C, CPUx Data Error Address Register*/
       Ifx_CPU_DIEAR                       DIEAR;                  /**< \brief 19020, CPUx Data Integrity Error Address Register*/
       Ifx_CPU_DIETR                       DIETR;                  /**< \brief 19024, CPUx Data Integrity Error Trap Register*/
       Ifx_UReg_8Bit                       reserved_19028[24];     /**< \brief 19028, \internal Reserved */
       Ifx_CPU_DCON0                       DCON0;                  /**< \brief 19040, CPUx Data Memory Control Register*/
       Ifx_UReg_8Bit                       reserved_19044[444];    /**< \brief 19044, \internal Reserved */
       Ifx_CPU_PSTR                        PSTR;                   /**< \brief 19200, CPUx Program Synchronous Trap Register*/
       Ifx_CPU_PCON1                       PCON1;                  /**< \brief 19204, CPUx Program Control 1*/
       Ifx_CPU_PCON2                       PCON2;                  /**< \brief 19208, CPUx Program Control 2*/
       Ifx_CPU_PCON0                       PCON0;                  /**< \brief 1920C, CPUx Program Control 0*/
       Ifx_CPU_PIEAR                       PIEAR;                  /**< \brief 19210, CPUx Program Integrity Error Address Register*/
       Ifx_CPU_PIETR                       PIETR;                  /**< \brief 19214, CPUx Program Integrity Error Trap Register*/
       Ifx_UReg_8Bit                       reserved_19218[488];    /**< \brief 19218, \internal Reserved */
       Ifx_CPU_COMPAT                      COMPAT;                 /**< \brief 19400, CPUx Compatibility Control Register*/
       Ifx_UReg_8Bit                       reserved_19404[3068];    /**< \brief 19404, \internal Reserved */
       Ifx_CPU_FPU_TRAP                    FPU_TRAP;               /**< \brief 1A000, CPUx Trapping Instruction Operand Register*/
       Ifx_UReg_8Bit                       reserved_1A01C[8164];    /**< \brief 1A01C, \internal Reserved */
       Ifx_CPU_DPR                         DPR[18];                /**< \brief 1C000, CPUx Data Protection Range ${y}, Upper Bound Register*/
       Ifx_UReg_8Bit                       reserved_1C090[3952];    /**< \brief 1C090, \internal Reserved */
       Ifx_CPU_CPR                         CPR[10];                /**< \brief 1D000, CPUx Code Protection Range ${y} Upper Bound Register*/
       Ifx_UReg_8Bit                       reserved_1D050[4016];    /**< \brief 1D050, \internal Reserved */
       Ifx_CPU_CPXE                        CPXE_0;                 /**< \brief 1E000, CPUx Code Protection Execute Enable Register Set ${y}*/
       Ifx_CPU_CPXE                        CPXE_1;                 /**< \brief 1E004, CPUx Code Protection Execute Enable Register Set ${y}*/
       Ifx_CPU_CPXE                        CPXE_2;                 /**< \brief 1E008, CPUx Code Protection Execute Enable Register Set ${y}*/
       Ifx_CPU_CPXE                        CPXE_3;                 /**< \brief 1E00C, CPUx Code Protection Execute Enable Register Set ${y}*/
       Ifx_CPU_DPRE                        DPRE_0;                 /**< \brief 1E010, CPUx Data Protection Read Enable Register Set ${y}*/
       Ifx_CPU_DPRE                        DPRE_1;                 /**< \brief 1E014, CPUx Data Protection Read Enable Register Set ${y}*/
       Ifx_CPU_DPRE                        DPRE_2;                 /**< \brief 1E018, CPUx Data Protection Read Enable Register Set ${y}*/
       Ifx_CPU_DPRE                        DPRE_3;                 /**< \brief 1E01C, CPUx Data Protection Read Enable Register Set ${y}*/
       Ifx_CPU_DPWE                        DPWE_0;                 /**< \brief 1E020, CPUx Data Protection Write Enable Register Set ${y}*/
       Ifx_CPU_DPWE                        DPWE_1;                 /**< \brief 1E024, CPUx Data Protection Write Enable Register Set ${y}*/
       Ifx_CPU_DPWE                        DPWE_2;                 /**< \brief 1E028, CPUx Data Protection Write Enable Register Set ${y}*/
       Ifx_CPU_DPWE                        DPWE_3;                 /**< \brief 1E02C, CPUx Data Protection Write Enable Register Set ${y}*/
       Ifx_UReg_8Bit                       reserved_1E030[16];     /**< \brief 1E030, \internal Reserved */
       Ifx_CPU_CPXE                        CPXE_4;                 /**< \brief 1E040, CPUx Code Protection Execute Enable Register Set ${y}*/
       Ifx_CPU_CPXE                        CPXE_5;                 /**< \brief 1E044, CPUx Code Protection Execute Enable Register Set ${y}*/
       Ifx_UReg_8Bit                       reserved_1E048[8];      /**< \brief 1E048, \internal Reserved */
       Ifx_CPU_DPRE                        DPRE_4;                 /**< \brief 1E050, CPUx Data Protection Read Enable Register Set ${y}*/
       Ifx_CPU_DPRE                        DPRE_5;                 /**< \brief 1E054, CPUx Data Protection Read Enable Register Set ${y}*/
       Ifx_UReg_8Bit                       reserved_1E058[8];      /**< \brief 1E058, \internal Reserved */
       Ifx_CPU_DPWE                        DPWE_4;                 /**< \brief 1E060, CPUx Data Protection Write Enable Register Set ${y}*/
       Ifx_CPU_DPWE                        DPWE_5;                 /**< \brief 1E064, CPUx Data Protection Write Enable Register Set ${y}*/
       Ifx_UReg_8Bit                       reserved_1E068[920];    /**< \brief 1E068, \internal Reserved */
       Ifx_CPU_TPS                         TPS;                    /**< \brief 1E400, */
       Ifx_UReg_8Bit                       reserved_1E410[48];     /**< \brief 1E410, \internal Reserved */
       Ifx_CPU_TPS_EXTIM                   TPS_EXTIM;              /**< \brief 1E440, CPUx Exception Timer FCX Register*/
       Ifx_UReg_8Bit                       reserved_1E45C[2980];    /**< \brief 1E45C, \internal Reserved */
       Ifx_CPU_TR                          TR[8];                  /**< \brief 1F000, CPUx Trigger Address ${i}*/
       Ifx_UReg_8Bit                       reserved_1F040[3008];    /**< \brief 1F040, \internal Reserved */
       Ifx_CPU_CCTRL                       CCTRL;                  /**< \brief 1FC00, CPUx Counter Control*/
       Ifx_CPU_CCNT                        CCNT;                   /**< \brief 1FC04, CPUx CPU Clock Cycle Count*/
       Ifx_CPU_ICNT                        ICNT;                   /**< \brief 1FC08, CPUx Instruction Count*/
       Ifx_CPU_M1CNT                       M1CNT;                  /**< \brief 1FC0C, CPUx Multi-Count Register 1*/
       Ifx_CPU_M2CNT                       M2CNT;                  /**< \brief 1FC10, CPUx Multi-Count Register 2*/
       Ifx_CPU_M3CNT                       M3CNT;                  /**< \brief 1FC14, CPUx Multi-Count Register 3*/
       Ifx_UReg_8Bit                       reserved_1FC18[232];    /**< \brief 1FC18, \internal Reserved */
       Ifx_CPU_DBGSR                       DBGSR;                  /**< \brief 1FD00, CPUx Debug Status Register*/
       Ifx_UReg_8Bit                       reserved_1FD04[4];      /**< \brief 1FD04, \internal Reserved */
       Ifx_CPU_EXEVT                       EXEVT;                  /**< \brief 1FD08, CPUx External Event Register*/
       Ifx_CPU_CREVT                       CREVT;                  /**< \brief 1FD0C, CPUx Core Register Access Event*/
       Ifx_CPU_SWEVT                       SWEVT;                  /**< \brief 1FD10, CPUx Software Debug Event*/
       Ifx_UReg_8Bit                       reserved_1FD14[28];     /**< \brief 1FD14, \internal Reserved */
       Ifx_CPU_TRIG_ACC                    TRIG_ACC;               /**< \brief 1FD30, CPUx TriggerAddressx*/
       Ifx_UReg_8Bit                       reserved_1FD34[12];     /**< \brief 1FD34, \internal Reserved */
       Ifx_CPU_DMS                         DMS;                    /**< \brief 1FD40, CPUx Debug Monitor Start Address*/
       Ifx_CPU_DCX                         DCX;                    /**< \brief 1FD44, CPUx Debug Context Save Area Pointer*/
       Ifx_CPU_DBGTCR                      DBGTCR;                 /**< \brief 1FD48, CPUx Debug Trap Control Register*/
       Ifx_UReg_8Bit                       reserved_1FD4C[180];    /**< \brief 1FD4C, \internal Reserved */
       Ifx_CPU_PCXI                        PCXI;                   /**< \brief 1FE00, CPUx Previous Context Information Register*/
       Ifx_CPU_PSW                         PSW;                    /**< \brief 1FE04, CPUx Program Status Word*/
       Ifx_CPU_PC                          PC;                     /**< \brief 1FE08, CPUx Program Counter*/
       Ifx_UReg_8Bit                       reserved_1FE0C[8];      /**< \brief 1FE0C, \internal Reserved */
       Ifx_CPU_SYSCON                      SYSCON;                 /**< \brief 1FE14, CPUx System Configuration Register*/
       Ifx_CPU_CPU_ID                      CPU_ID;                 /**< \brief 1FE18, CPUx Identification Register TC1.6.2P*/
       Ifx_CPU_CORE_ID                     CORE_ID;                /**< \brief 1FE1C, CPUx Core Identification Register*/
       Ifx_CPU_BIV                         BIV;                    /**< \brief 1FE20, CPUx Base Interrupt Vector Table Pointer*/
       Ifx_CPU_BTV                         BTV;                    /**< \brief 1FE24, CPUx Base Trap Vector Table Pointer*/
       Ifx_CPU_ISP                         ISP;                    /**< \brief 1FE28, CPUx Interrupt Stack Pointer*/
       Ifx_CPU_ICR                         ICR;                    /**< \brief 1FE2C, CPUx Interrupt Control Register*/
       Ifx_UReg_8Bit                       reserved_1FE30[8];      /**< \brief 1FE30, \internal Reserved */
       Ifx_CPU_FCX                         FCX;                    /**< \brief 1FE38, CPUx Free CSA List Head Pointer*/
       Ifx_CPU_LCX                         LCX;                    /**< \brief 1FE3C, CPUx Free CSA List Limit Pointer*/
       Ifx_UReg_8Bit                       reserved_1FE40[16];     /**< \brief 1FE40, \internal Reserved */
       Ifx_CPU_CUS_ID                      CUS_ID;                 /**< \brief 1FE50, CPUx Customer ID register*/
       Ifx_UReg_8Bit                       reserved_1FE54[172];    /**< \brief 1FE54, \internal Reserved */
       Ifx_CPU_D                           D[16];                  /**< \brief 1FF00, CPUx Data General Purpose Register ${y}*/
       Ifx_UReg_8Bit                       reserved_1FF40[64];     /**< \brief 1FF40, \internal Reserved */
       Ifx_CPU_A                           A[16];                  /**< \brief 1FF80, CPUx Address General Purpose Register ${y}*/
       Ifx_UReg_8Bit                       reserved_1FFC0[64];     /**< \brief 1FFC0, \internal Reserved */
} Ifx_CPU;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/


#line 66 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\Libraries\\Infra\\Sfr\\TC38A\\_Reg\\IfxCpu_reg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/** \addtogroup IfxSfr_Cpu_Registers_Cfg_BaseAddress
 * \{  */

/** \brief CPU object */




/** \}  */

/** \brief 1030, CPUx SRI Error Generation Register */


/** \brief 8004, CPUx Task Address Space Identifier Register */


/** \brief 8100, CPUx Data Access CacheabilityRegister */


/** \brief 8104, CPUx Code Access CacheabilityRegister */


/** \brief 8108, CPUx  Peripheral Space Identifier register */


/** \brief 9000, CPUx Data Control Register 2 */


/** \brief 900C, CPUx SIST Mode Access Control Register */


/** \brief 9010, CPUx Data Synchronous Trap Register */


/** \brief 9018, CPUx Data Asynchronous Trap Register */


/** \brief 901C, CPUx Data Error Address Register */


/** \brief 9020, CPUx Data Integrity Error Address Register */


/** \brief 9024, CPUx Data Integrity Error Trap Register */


/** \brief 9040, CPUx Data Memory Control Register */


/** \brief 9200, CPUx Program Synchronous Trap Register */


/** \brief 9204, CPUx Program Control 1 */


/** \brief 9208, CPUx Program Control 2 */


/** \brief 920C, CPUx Program Control 0 */


/** \brief 9210, CPUx Program Integrity Error Address Register */


/** \brief 9214, CPUx Program Integrity Error Trap Register */


/** \brief 9400, CPUx Compatibility Control Register */


/** \brief A000, CPUx Trap Control Register */


/** \brief A004, CPUx Trapping Instruction Program Counter Register */


/** \brief A008, CPUx Trapping Instruction Opcode Register */


/** \brief A010, CPUx Trapping Instruction Operand Register */


/** \brief A014, CPUx Trapping Instruction Operand Register */


/** \brief A018, CPUx Trapping Instruction Operand Register */


/** \brief C000, CPUx Data Protection Range 0, Lower Bound Register */


/** \brief C004, CPUx Data Protection Range 0, Upper Bound Register */


/** \brief C008, CPUx Data Protection Range 1, Lower Bound Register */


/** \brief C00C, CPUx Data Protection Range 1, Upper Bound Register */


/** \brief C010, CPUx Data Protection Range 2, Lower Bound Register */


/** \brief C014, CPUx Data Protection Range 2, Upper Bound Register */


/** \brief C018, CPUx Data Protection Range 3, Lower Bound Register */


/** \brief C01C, CPUx Data Protection Range 3, Upper Bound Register */


/** \brief C020, CPUx Data Protection Range 4, Lower Bound Register */


/** \brief C024, CPUx Data Protection Range 4, Upper Bound Register */


/** \brief C028, CPUx Data Protection Range 5, Lower Bound Register */


/** \brief C02C, CPUx Data Protection Range 5, Upper Bound Register */


/** \brief C030, CPUx Data Protection Range 6, Lower Bound Register */


/** \brief C034, CPUx Data Protection Range 6, Upper Bound Register */


/** \brief C038, CPUx Data Protection Range 7, Lower Bound Register */


/** \brief C03C, CPUx Data Protection Range 7, Upper Bound Register */


/** \brief C040, CPUx Data Protection Range 8, Lower Bound Register */


/** \brief C044, CPUx Data Protection Range 8, Upper Bound Register */


/** \brief C048, CPUx Data Protection Range 9, Lower Bound Register */


/** \brief C04C, CPUx Data Protection Range 9, Upper Bound Register */


/** \brief C050, CPUx Data Protection Range 10, Lower Bound Register */


/** \brief C054, CPUx Data Protection Range 10, Upper Bound Register */


/** \brief C058, CPUx Data Protection Range 11, Lower Bound Register */


/** \brief C05C, CPUx Data Protection Range 11, Upper Bound Register */


/** \brief C060, CPUx Data Protection Range 12, Lower Bound Register */


/** \brief C064, CPUx Data Protection Range 12, Upper Bound Register */


/** \brief C068, CPUx Data Protection Range 13, Lower Bound Register */


/** \brief C06C, CPUx Data Protection Range 13, Upper Bound Register */


/** \brief C070, CPUx Data Protection Range 14, Lower Bound Register */


/** \brief C074, CPUx Data Protection Range 14, Upper Bound Register */


/** \brief C078, CPUx Data Protection Range 15, Lower Bound Register */


/** \brief C07C, CPUx Data Protection Range 15, Upper Bound Register */


/** \brief C080, CPUx Data Protection Range 16, Lower Bound Register */


/** \brief C084, CPUx Data Protection Range 16, Upper Bound Register */


/** \brief C088, CPUx Data Protection Range 17, Lower Bound Register */


/** \brief C08C, CPUx Data Protection Range 17, Upper Bound Register */


/** \brief D000, CPUx Code Protection Range 0 Lower Bound Register */


/** \brief D004, CPUx Code Protection Range 0 Upper Bound Register */


/** \brief D008, CPUx Code Protection Range 1 Lower Bound Register */


/** \brief D00C, CPUx Code Protection Range 1 Upper Bound Register */


/** \brief D010, CPUx Code Protection Range 2 Lower Bound Register */


/** \brief D014, CPUx Code Protection Range 2 Upper Bound Register */


/** \brief D018, CPUx Code Protection Range 3 Lower Bound Register */


/** \brief D01C, CPUx Code Protection Range 3 Upper Bound Register */


/** \brief D020, CPUx Code Protection Range 4 Lower Bound Register */


/** \brief D024, CPUx Code Protection Range 4 Upper Bound Register */


/** \brief D028, CPUx Code Protection Range 5 Lower Bound Register */


/** \brief D02C, CPUx Code Protection Range 5 Upper Bound Register */


/** \brief D030, CPUx Code Protection Range 6 Lower Bound Register */


/** \brief D034, CPUx Code Protection Range 6 Upper Bound Register */


/** \brief D038, CPUx Code Protection Range 7 Lower Bound Register */


/** \brief D03C, CPUx Code Protection Range 7 Upper Bound Register */


/** \brief D040, CPUx Code Protection Range 8 Lower Bound Register */


/** \brief D044, CPUx Code Protection Range 8 Upper Bound Register */


/** \brief D048, CPUx Code Protection Range 9 Lower Bound Register */


/** \brief D04C, CPUx Code Protection Range 9 Upper Bound Register */


/** \brief E000, CPUx Code Protection Execute Enable Register Set 0 */


/** \brief E004, CPUx Code Protection Execute Enable Register Set 1 */


/** \brief E008, CPUx Code Protection Execute Enable Register Set 2 */


/** \brief E00C, CPUx Code Protection Execute Enable Register Set 3 */


/** \brief E010, CPUx Data Protection Read Enable Register Set 0 */


/** \brief E014, CPUx Data Protection Read Enable Register Set 1 */


/** \brief E018, CPUx Data Protection Read Enable Register Set 2 */


/** \brief E01C, CPUx Data Protection Read Enable Register Set 3 */


/** \brief E020, CPUx Data Protection Write Enable Register Set 0 */


/** \brief E024, CPUx Data Protection Write Enable Register Set 1 */


/** \brief E028, CPUx Data Protection Write Enable Register Set 2 */


/** \brief E02C, CPUx Data Protection Write Enable Register Set 3 */


/** \brief E040, CPUx Code Protection Execute Enable Register Set 4 */


/** \brief E044, CPUx Code Protection Execute Enable Register Set 5 */


/** \brief E050, CPUx Data Protection Read Enable Register Set 4 */


/** \brief E054, CPUx Data Protection Read Enable Register Set 5 */


/** \brief E060, CPUx Data Protection Write Enable Register Set 4 */


/** \brief E064, CPUx Data Protection Write Enable Register Set 5 */


/** \brief E400, CPUx Temporal Protection System Control Register */


/** \brief E404, CPUx Temporal Protection System Timer Register 0 */


/** \brief E408, CPUx Temporal Protection System Timer Register 1 */


/** \brief E40C, CPUx Temporal Protection System Timer Register 2 */


/** \brief E440, CPUx Exception Entry Timer Load Value */


/** \brief E444, CPUx Exception Entry Timer Current Value */


/** \brief E448, CPUx Exception Exit  Timer Load Value */


/** \brief E44C, CPUx Exception Exit Timer Current Value */


/** \brief E450, CPUx Exception Timer Class Enable Register */


/** \brief E454, CPUx Exception Timer Status Register */


/** \brief E458, CPUx Exception Timer FCX Register */


/** \brief F000, CPUx Trigger Event 0 */

/** Alias (User Manual Name) for CPU_TR0_EVT.
* To use register names with standard convension, please use CPU_TR0_EVT.
*/


/** \brief F004, CPUx Trigger Address 0 */

/** Alias (User Manual Name) for CPU_TR0_ADR.
* To use register names with standard convension, please use CPU_TR0_ADR.
*/


/** \brief F008, CPUx Trigger Event 1 */

/** Alias (User Manual Name) for CPU_TR1_EVT.
* To use register names with standard convension, please use CPU_TR1_EVT.
*/


/** \brief F00C, CPUx Trigger Address 1 */

/** Alias (User Manual Name) for CPU_TR1_ADR.
* To use register names with standard convension, please use CPU_TR1_ADR.
*/


/** \brief F010, CPUx Trigger Event 2 */

/** Alias (User Manual Name) for CPU_TR2_EVT.
* To use register names with standard convension, please use CPU_TR2_EVT.
*/


/** \brief F014, CPUx Trigger Address 2 */

/** Alias (User Manual Name) for CPU_TR2_ADR.
* To use register names with standard convension, please use CPU_TR2_ADR.
*/


/** \brief F018, CPUx Trigger Event 3 */

/** Alias (User Manual Name) for CPU_TR3_EVT.
* To use register names with standard convension, please use CPU_TR3_EVT.
*/


/** \brief F01C, CPUx Trigger Address 3 */

/** Alias (User Manual Name) for CPU_TR3_ADR.
* To use register names with standard convension, please use CPU_TR3_ADR.
*/


/** \brief F020, CPUx Trigger Event 4 */

/** Alias (User Manual Name) for CPU_TR4_EVT.
* To use register names with standard convension, please use CPU_TR4_EVT.
*/


/** \brief F024, CPUx Trigger Address 4 */

/** Alias (User Manual Name) for CPU_TR4_ADR.
* To use register names with standard convension, please use CPU_TR4_ADR.
*/


/** \brief F028, CPUx Trigger Event 5 */

/** Alias (User Manual Name) for CPU_TR5_EVT.
* To use register names with standard convension, please use CPU_TR5_EVT.
*/


/** \brief F02C, CPUx Trigger Address 5 */

/** Alias (User Manual Name) for CPU_TR5_ADR.
* To use register names with standard convension, please use CPU_TR5_ADR.
*/


/** \brief F030, CPUx Trigger Event 6 */

/** Alias (User Manual Name) for CPU_TR6_EVT.
* To use register names with standard convension, please use CPU_TR6_EVT.
*/


/** \brief F034, CPUx Trigger Address 6 */

/** Alias (User Manual Name) for CPU_TR6_ADR.
* To use register names with standard convension, please use CPU_TR6_ADR.
*/


/** \brief F038, CPUx Trigger Event 7 */

/** Alias (User Manual Name) for CPU_TR7_EVT.
* To use register names with standard convension, please use CPU_TR7_EVT.
*/


/** \brief F03C, CPUx Trigger Address 7 */

/** Alias (User Manual Name) for CPU_TR7_ADR.
* To use register names with standard convension, please use CPU_TR7_ADR.
*/


/** \brief FC00, CPUx Counter Control */


/** \brief FC04, CPUx CPU Clock Cycle Count */


/** \brief FC08, CPUx Instruction Count */


/** \brief FC0C, CPUx Multi-Count Register 1 */


/** \brief FC10, CPUx Multi-Count Register 2 */


/** \brief FC14, CPUx Multi-Count Register 3 */


/** \brief FD00, CPUx Debug Status Register */


/** \brief FD08, CPUx External Event Register */


/** \brief FD0C, CPUx Core Register Access Event */


/** \brief FD10, CPUx Software Debug Event */


/** \brief FD30, CPUx TriggerAddressx */


/** \brief FD40, CPUx Debug Monitor Start Address */


/** \brief FD44, CPUx Debug Context Save Area Pointer */


/** \brief FD48, CPUx Debug Trap Control Register */


/** \brief FE00, CPUx Previous Context Information Register */


/** \brief FE04, CPUx Program Status Word */


/** \brief FE08, CPUx Program Counter */


/** \brief FE14, CPUx System Configuration Register */


/** \brief FE18, CPUx Identification Register TC1.6.2P */


/** \brief FE1C, CPUx Core Identification Register */


/** \brief FE20, CPUx Base Interrupt Vector Table Pointer */


/** \brief FE24, CPUx Base Trap Vector Table Pointer */


/** \brief FE28, CPUx Interrupt Stack Pointer */


/** \brief FE2C, CPUx Interrupt Control Register */


/** \brief FE38, CPUx Free CSA List Head Pointer */


/** \brief FE3C, CPUx Free CSA List Limit Pointer */


/** \brief FE50, CPUx Customer ID register */


/** \brief FF00, CPUx Data General Purpose Register 0 */


/** \brief FF04, CPUx Data General Purpose Register 1 */


/** \brief FF08, CPUx Data General Purpose Register 2 */


/** \brief FF0C, CPUx Data General Purpose Register 3 */


/** \brief FF10, CPUx Data General Purpose Register 4 */


/** \brief FF14, CPUx Data General Purpose Register 5 */


/** \brief FF18, CPUx Data General Purpose Register 6 */


/** \brief FF1C, CPUx Data General Purpose Register 7 */


/** \brief FF20, CPUx Data General Purpose Register 8 */


/** \brief FF24, CPUx Data General Purpose Register 9 */


/** \brief FF28, CPUx Data General Purpose Register 10 */


/** \brief FF2C, CPUx Data General Purpose Register 11 */


/** \brief FF30, CPUx Data General Purpose Register 12 */


/** \brief FF34, CPUx Data General Purpose Register 13 */


/** \brief FF38, CPUx Data General Purpose Register 14 */


/** \brief FF3C, CPUx Data General Purpose Register 15 */


/** \brief FF80, CPUx Address General Purpose Register 0 */


/** \brief FF84, CPUx Address General Purpose Register 1 */


/** \brief FF88, CPUx Address General Purpose Register 2 */


/** \brief FF8C, CPUx Address General Purpose Register 3 */


/** \brief FF90, CPUx Address General Purpose Register 4 */


/** \brief FF94, CPUx Address General Purpose Register 5 */


/** \brief FF98, CPUx Address General Purpose Register 6 */


/** \brief FF9C, CPUx Address General Purpose Register 7 */


/** \brief FFA0, CPUx Address General Purpose Register 8 */


/** \brief FFA4, CPUx Address General Purpose Register 9 */


/** \brief FFA8, CPUx Address General Purpose Register 10 */


/** \brief FFAC, CPUx Address General Purpose Register 11 */


/** \brief FFB0, CPUx Address General Purpose Register 12 */


/** \brief FFB4, CPUx Address General Purpose Register 13 */


/** \brief FFB8, CPUx Address General Purpose Register 14 */


/** \brief FFBC, CPUx Address General Purpose Register 15 */



/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_Registers_Cfg_Cpu0
 * \{  */
/** \brief 1100, CPUx Flash Configuration Register 0 */


/** \brief 1104, CPUx Flash Configuration Register 1 */


/** \brief 1108, CPUx Flash Configuration Register 2 */


/** \brief 110C, CPUx Flash Configuration Register 3 */


/** \brief 1110, CPUx Flash Configuration Register 4 */


/** \brief D000, CPUx  Reset Register 0 */


/** \brief D004, CPUx  Reset Register 1 */


/** \brief D008, CPUx Reset Clear Register */


/** \brief E000, CPUx Safety Protection SPR Region Lower Address Register 0 */

/** Alias (User Manual Name) for CPU0_RGN0_LA.
* To use register names with standard convension, please use CPU0_RGN0_LA.
*/


/** \brief E004, CPUx Safety Protection SPR Region Upper Address Register 0 */

/** Alias (User Manual Name) for CPU0_RGN0_UA.
* To use register names with standard convension, please use CPU0_RGN0_UA.
*/


/** \brief E008, CPUx Safety Protection SPR Region Write Access Enable Register A0 */

/** Alias (User Manual Name) for CPU0_RGN0_ACCENA.
* To use register names with standard convension, please use CPU0_RGN0_ACCENA.
*/


/** \brief E00C, CPUx Safety Protection SPR Region Write Access Enable Register B0 */

/** Alias (User Manual Name) for CPU0_RGN0_ACCENB.
* To use register names with standard convension, please use CPU0_RGN0_ACCENB.
*/


/** \brief E010, CPUx Safety Protection SPR Region Lower Address Register 1 */

/** Alias (User Manual Name) for CPU0_RGN1_LA.
* To use register names with standard convension, please use CPU0_RGN1_LA.
*/


/** \brief E014, CPUx Safety Protection SPR Region Upper Address Register 1 */

/** Alias (User Manual Name) for CPU0_RGN1_UA.
* To use register names with standard convension, please use CPU0_RGN1_UA.
*/


/** \brief E018, CPUx Safety Protection SPR Region Write Access Enable Register A1 */

/** Alias (User Manual Name) for CPU0_RGN1_ACCENA.
* To use register names with standard convension, please use CPU0_RGN1_ACCENA.
*/


/** \brief E01C, CPUx Safety Protection SPR Region Write Access Enable Register B1 */

/** Alias (User Manual Name) for CPU0_RGN1_ACCENB.
* To use register names with standard convension, please use CPU0_RGN1_ACCENB.
*/


/** \brief E020, CPUx Safety Protection SPR Region Lower Address Register 2 */

/** Alias (User Manual Name) for CPU0_RGN2_LA.
* To use register names with standard convension, please use CPU0_RGN2_LA.
*/


/** \brief E024, CPUx Safety Protection SPR Region Upper Address Register 2 */

/** Alias (User Manual Name) for CPU0_RGN2_UA.
* To use register names with standard convension, please use CPU0_RGN2_UA.
*/


/** \brief E028, CPUx Safety Protection SPR Region Write Access Enable Register A2 */

/** Alias (User Manual Name) for CPU0_RGN2_ACCENA.
* To use register names with standard convension, please use CPU0_RGN2_ACCENA.
*/


/** \brief E02C, CPUx Safety Protection SPR Region Write Access Enable Register B2 */

/** Alias (User Manual Name) for CPU0_RGN2_ACCENB.
* To use register names with standard convension, please use CPU0_RGN2_ACCENB.
*/


/** \brief E030, CPUx Safety Protection SPR Region Lower Address Register 3 */

/** Alias (User Manual Name) for CPU0_RGN3_LA.
* To use register names with standard convension, please use CPU0_RGN3_LA.
*/


/** \brief E034, CPUx Safety Protection SPR Region Upper Address Register 3 */

/** Alias (User Manual Name) for CPU0_RGN3_UA.
* To use register names with standard convension, please use CPU0_RGN3_UA.
*/


/** \brief E038, CPUx Safety Protection SPR Region Write Access Enable Register A3 */

/** Alias (User Manual Name) for CPU0_RGN3_ACCENA.
* To use register names with standard convension, please use CPU0_RGN3_ACCENA.
*/


/** \brief E03C, CPUx Safety Protection SPR Region Write Access Enable Register B3 */

/** Alias (User Manual Name) for CPU0_RGN3_ACCENB.
* To use register names with standard convension, please use CPU0_RGN3_ACCENB.
*/


/** \brief E040, CPUx Safety Protection SPR Region Lower Address Register 4 */

/** Alias (User Manual Name) for CPU0_RGN4_LA.
* To use register names with standard convension, please use CPU0_RGN4_LA.
*/


/** \brief E044, CPUx Safety Protection SPR Region Upper Address Register 4 */

/** Alias (User Manual Name) for CPU0_RGN4_UA.
* To use register names with standard convension, please use CPU0_RGN4_UA.
*/


/** \brief E048, CPUx Safety Protection SPR Region Write Access Enable Register A4 */

/** Alias (User Manual Name) for CPU0_RGN4_ACCENA.
* To use register names with standard convension, please use CPU0_RGN4_ACCENA.
*/


/** \brief E04C, CPUx Safety Protection SPR Region Write Access Enable Register B4 */

/** Alias (User Manual Name) for CPU0_RGN4_ACCENB.
* To use register names with standard convension, please use CPU0_RGN4_ACCENB.
*/


/** \brief E050, CPUx Safety Protection SPR Region Lower Address Register 5 */

/** Alias (User Manual Name) for CPU0_RGN5_LA.
* To use register names with standard convension, please use CPU0_RGN5_LA.
*/


/** \brief E054, CPUx Safety Protection SPR Region Upper Address Register 5 */

/** Alias (User Manual Name) for CPU0_RGN5_UA.
* To use register names with standard convension, please use CPU0_RGN5_UA.
*/


/** \brief E058, CPUx Safety Protection SPR Region Write Access Enable Register A5 */

/** Alias (User Manual Name) for CPU0_RGN5_ACCENA.
* To use register names with standard convension, please use CPU0_RGN5_ACCENA.
*/


/** \brief E05C, CPUx Safety Protection SPR Region Write Access Enable Register B5 */

/** Alias (User Manual Name) for CPU0_RGN5_ACCENB.
* To use register names with standard convension, please use CPU0_RGN5_ACCENB.
*/


/** \brief E060, CPUx Safety Protection SPR Region Lower Address Register 6 */

/** Alias (User Manual Name) for CPU0_RGN6_LA.
* To use register names with standard convension, please use CPU0_RGN6_LA.
*/


/** \brief E064, CPUx Safety Protection SPR Region Upper Address Register 6 */

/** Alias (User Manual Name) for CPU0_RGN6_UA.
* To use register names with standard convension, please use CPU0_RGN6_UA.
*/


/** \brief E068, CPUx Safety Protection SPR Region Write Access Enable Register A6 */

/** Alias (User Manual Name) for CPU0_RGN6_ACCENA.
* To use register names with standard convension, please use CPU0_RGN6_ACCENA.
*/


/** \brief E06C, CPUx Safety Protection SPR Region Write Access Enable Register B6 */

/** Alias (User Manual Name) for CPU0_RGN6_ACCENB.
* To use register names with standard convension, please use CPU0_RGN6_ACCENB.
*/


/** \brief E070, CPUx Safety Protection SPR Region Lower Address Register 7 */

/** Alias (User Manual Name) for CPU0_RGN7_LA.
* To use register names with standard convension, please use CPU0_RGN7_LA.
*/


/** \brief E074, CPUx Safety Protection SPR Region Upper Address Register 7 */

/** Alias (User Manual Name) for CPU0_RGN7_UA.
* To use register names with standard convension, please use CPU0_RGN7_UA.
*/


/** \brief E078, CPUx Safety Protection SPR Region Write Access Enable Register A7 */

/** Alias (User Manual Name) for CPU0_RGN7_ACCENA.
* To use register names with standard convension, please use CPU0_RGN7_ACCENA.
*/


/** \brief E07C, CPUx Safety Protection SPR Region Write Access Enable Register B7 */

/** Alias (User Manual Name) for CPU0_RGN7_ACCENB.
* To use register names with standard convension, please use CPU0_RGN7_ACCENB.
*/


/** \brief E088, CPUx Safety Protection SPR Region Read Access Enable Register A0 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENA_R0.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENA_R0.
*/


/** \brief E08C, CPUx Safety Protection SPR Region Read Access Enable Register B0 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENB_R0.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENB_R0.
*/


/** \brief E098, CPUx Safety Protection SPR Region Read Access Enable Register A1 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENA_R1.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENA_R1.
*/


/** \brief E09C, CPUx Safety Protection SPR Region Read Access Enable Register B1 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENB_R1.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENB_R1.
*/


/** \brief E0A8, CPUx Safety Protection SPR Region Read Access Enable Register A2 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENA_R2.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENA_R2.
*/


/** \brief E0AC, CPUx Safety Protection SPR Region Read Access Enable Register B2 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENB_R2.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENB_R2.
*/


/** \brief E0B8, CPUx Safety Protection SPR Region Read Access Enable Register A3 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENA_R3.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENA_R3.
*/


/** \brief E0BC, CPUx Safety Protection SPR Region Read Access Enable Register B3 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENB_R3.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENB_R3.
*/


/** \brief E0C8, CPUx Safety Protection SPR Region Read Access Enable Register A4 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENA_R4.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENA_R4.
*/


/** \brief E0CC, CPUx Safety Protection SPR Region Read Access Enable Register B4 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENB_R4.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENB_R4.
*/


/** \brief E0D8, CPUx Safety Protection SPR Region Read Access Enable Register A5 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENA_R5.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENA_R5.
*/


/** \brief E0DC, CPUx Safety Protection SPR Region Read Access Enable Register B5 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENB_R5.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENB_R5.
*/


/** \brief E0E8, CPUx Safety Protection SPR Region Read Access Enable Register A6 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENA_R6.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENA_R6.
*/


/** \brief E0EC, CPUx Safety Protection SPR Region Read Access Enable Register B6 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENB_R6.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENB_R6.
*/


/** \brief E0F8, CPUx Safety Protection SPR Region Read Access Enable Register A7 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENA_R7.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENA_R7.
*/


/** \brief E0FC, CPUx Safety Protection SPR Region Read Access Enable Register B7 */

/** Alias (User Manual Name) for CPU0_SPR_SPROT_RGNACCENB_R7.
* To use register names with standard convension, please use CPU0_SPR_SPROT_RGNACCENB_R7.
*/


/** \brief E100, CPUx Safety Protection Register Access Enable Register A */


/** \brief E104, CPUx Safety Protection Region Access Enable Register B */


/** \brief E110, CPUx Safety Protection Region LPB Read Access Enable Register A */


/** \brief E114, CPUx Safety Protection Region LPB Read Access Enable Register B */


/** \brief E200, CPUx Safety Protection DLMU Region Lower Address Register 0 */


/** \brief E204, CPUx Safety protection DLMU Region Upper Address Register 0 */


/** \brief E208, CPUx Safety Protection Region DLMU Write Access Enable Register A0 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_W0.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_W0.
*/


/** \brief E20C, CPUx Safety Protection Region DLMU Write Access Enable Register B0 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_W0.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_W0.
*/


/** \brief E210, CPUx Safety Protection DLMU Region Lower Address Register 1 */


/** \brief E214, CPUx Safety protection DLMU Region Upper Address Register 1 */


/** \brief E218, CPUx Safety Protection Region DLMU Write Access Enable Register A1 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_W1.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_W1.
*/


/** \brief E21C, CPUx Safety Protection Region DLMU Write Access Enable Register B1 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_W1.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_W1.
*/


/** \brief E220, CPUx Safety Protection DLMU Region Lower Address Register 2 */


/** \brief E224, CPUx Safety protection DLMU Region Upper Address Register 2 */


/** \brief E228, CPUx Safety Protection Region DLMU Write Access Enable Register A2 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_W2.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_W2.
*/


/** \brief E22C, CPUx Safety Protection Region DLMU Write Access Enable Register B2 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_W2.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_W2.
*/


/** \brief E230, CPUx Safety Protection DLMU Region Lower Address Register 3 */


/** \brief E234, CPUx Safety protection DLMU Region Upper Address Register 3 */


/** \brief E238, CPUx Safety Protection Region DLMU Write Access Enable Register A3 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_W3.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_W3.
*/


/** \brief E23C, CPUx Safety Protection Region DLMU Write Access Enable Register B3 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_W3.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_W3.
*/


/** \brief E240, CPUx Safety Protection DLMU Region Lower Address Register 4 */


/** \brief E244, CPUx Safety protection DLMU Region Upper Address Register 4 */


/** \brief E248, CPUx Safety Protection Region DLMU Write Access Enable Register A4 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_W4.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_W4.
*/


/** \brief E24C, CPUx Safety Protection Region DLMU Write Access Enable Register B4 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_W4.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_W4.
*/


/** \brief E250, CPUx Safety Protection DLMU Region Lower Address Register 5 */


/** \brief E254, CPUx Safety protection DLMU Region Upper Address Register 5 */


/** \brief E258, CPUx Safety Protection Region DLMU Write Access Enable Register A5 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_W5.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_W5.
*/


/** \brief E25C, CPUx Safety Protection Region DLMU Write Access Enable Register B5 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_W5.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_W5.
*/


/** \brief E260, CPUx Safety Protection DLMU Region Lower Address Register 6 */


/** \brief E264, CPUx Safety protection DLMU Region Upper Address Register 6 */


/** \brief E268, CPUx Safety Protection Region DLMU Write Access Enable Register A6 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_W6.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_W6.
*/


/** \brief E26C, CPUx Safety Protection Region DLMU Write Access Enable Register B6 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_W6.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_W6.
*/


/** \brief E270, CPUx Safety Protection DLMU Region Lower Address Register 7 */


/** \brief E274, CPUx Safety protection DLMU Region Upper Address Register 7 */


/** \brief E278, CPUx Safety Protection Region DLMU Write Access Enable Register A7 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_W7.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_W7.
*/


/** \brief E27C, CPUx Safety Protection Region DLMU Write Access Enable Register B7 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_W7.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_W7.
*/


/** \brief E288, CPUx Safety Protection Region DLMU Read Access Enable Register A0 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_R0.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_R0.
*/


/** \brief E28C, CPUx Safety Protection Region DLMU Read Access Enable Register B0 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_R0.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_R0.
*/


/** \brief E298, CPUx Safety Protection Region DLMU Read Access Enable Register A1 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_R1.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_R1.
*/


/** \brief E29C, CPUx Safety Protection Region DLMU Read Access Enable Register B1 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_R1.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_R1.
*/


/** \brief E2A8, CPUx Safety Protection Region DLMU Read Access Enable Register A2 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_R2.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_R2.
*/


/** \brief E2AC, CPUx Safety Protection Region DLMU Read Access Enable Register B2 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_R2.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_R2.
*/


/** \brief E2B8, CPUx Safety Protection Region DLMU Read Access Enable Register A3 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_R3.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_R3.
*/


/** \brief E2BC, CPUx Safety Protection Region DLMU Read Access Enable Register B3 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_R3.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_R3.
*/


/** \brief E2C8, CPUx Safety Protection Region DLMU Read Access Enable Register A4 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_R4.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_R4.
*/


/** \brief E2CC, CPUx Safety Protection Region DLMU Read Access Enable Register B4 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_R4.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_R4.
*/


/** \brief E2D8, CPUx Safety Protection Region DLMU Read Access Enable Register A5 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_R5.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_R5.
*/


/** \brief E2DC, CPUx Safety Protection Region DLMU Read Access Enable Register B5 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_R5.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_R5.
*/


/** \brief E2E8, CPUx Safety Protection Region DLMU Read Access Enable Register A6 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_R6.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_R6.
*/


/** \brief E2EC, CPUx Safety Protection Region DLMU Read Access Enable Register B6 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_R6.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_R6.
*/


/** \brief E2F8, CPUx Safety Protection Region DLMU Read Access Enable Register A7 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENA_R7.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENA_R7.
*/


/** \brief E2FC, CPUx Safety Protection Region DLMU Read Access Enable Register B7 */

/** Alias (User Manual Name) for CPU0_DLMU_SPROT_RGNACCENB_R7.
* To use register names with standard convension, please use CPU0_DLMU_SPROT_RGNACCENB_R7.
*/


/** \brief FB00, CPUx  Overlay Range Select Register */


/** \brief FB10, CPUx Redirected Address Base Register 0 */

/** Alias (User Manual Name) for CPU0_BLK0_RABR.
* To use register names with standard convension, please use CPU0_BLK0_RABR.
*/


/** \brief FB14, CPUx Overlay Target Address Register 0 */

/** Alias (User Manual Name) for CPU0_BLK0_OTAR.
* To use register names with standard convension, please use CPU0_BLK0_OTAR.
*/


/** \brief FB18, CPUx Overlay Mask Register 0 */

/** Alias (User Manual Name) for CPU0_BLK0_OMASK.
* To use register names with standard convension, please use CPU0_BLK0_OMASK.
*/


/** \brief FB1C, CPUx Redirected Address Base Register 1 */

/** Alias (User Manual Name) for CPU0_BLK1_RABR.
* To use register names with standard convension, please use CPU0_BLK1_RABR.
*/


/** \brief FB20, CPUx Overlay Target Address Register 1 */

/** Alias (User Manual Name) for CPU0_BLK1_OTAR.
* To use register names with standard convension, please use CPU0_BLK1_OTAR.
*/


/** \brief FB24, CPUx Overlay Mask Register 1 */

/** Alias (User Manual Name) for CPU0_BLK1_OMASK.
* To use register names with standard convension, please use CPU0_BLK1_OMASK.
*/


/** \brief FB28, CPUx Redirected Address Base Register 2 */

/** Alias (User Manual Name) for CPU0_BLK2_RABR.
* To use register names with standard convension, please use CPU0_BLK2_RABR.
*/


/** \brief FB2C, CPUx Overlay Target Address Register 2 */

/** Alias (User Manual Name) for CPU0_BLK2_OTAR.
* To use register names with standard convension, please use CPU0_BLK2_OTAR.
*/


/** \brief FB30, CPUx Overlay Mask Register 2 */

/** Alias (User Manual Name) for CPU0_BLK2_OMASK.
* To use register names with standard convension, please use CPU0_BLK2_OMASK.
*/


/** \brief FB34, CPUx Redirected Address Base Register 3 */

/** Alias (User Manual Name) for CPU0_BLK3_RABR.
* To use register names with standard convension, please use CPU0_BLK3_RABR.
*/


/** \brief FB38, CPUx Overlay Target Address Register 3 */

/** Alias (User Manual Name) for CPU0_BLK3_OTAR.
* To use register names with standard convension, please use CPU0_BLK3_OTAR.
*/


/** \brief FB3C, CPUx Overlay Mask Register 3 */

/** Alias (User Manual Name) for CPU0_BLK3_OMASK.
* To use register names with standard convension, please use CPU0_BLK3_OMASK.
*/


/** \brief FB40, CPUx Redirected Address Base Register 4 */

/** Alias (User Manual Name) for CPU0_BLK4_RABR.
* To use register names with standard convension, please use CPU0_BLK4_RABR.
*/


/** \brief FB44, CPUx Overlay Target Address Register 4 */

/** Alias (User Manual Name) for CPU0_BLK4_OTAR.
* To use register names with standard convension, please use CPU0_BLK4_OTAR.
*/


/** \brief FB48, CPUx Overlay Mask Register 4 */

/** Alias (User Manual Name) for CPU0_BLK4_OMASK.
* To use register names with standard convension, please use CPU0_BLK4_OMASK.
*/


/** \brief FB4C, CPUx Redirected Address Base Register 5 */

/** Alias (User Manual Name) for CPU0_BLK5_RABR.
* To use register names with standard convension, please use CPU0_BLK5_RABR.
*/


/** \brief FB50, CPUx Overlay Target Address Register 5 */

/** Alias (User Manual Name) for CPU0_BLK5_OTAR.
* To use register names with standard convension, please use CPU0_BLK5_OTAR.
*/


/** \brief FB54, CPUx Overlay Mask Register 5 */

/** Alias (User Manual Name) for CPU0_BLK5_OMASK.
* To use register names with standard convension, please use CPU0_BLK5_OMASK.
*/


/** \brief FB58, CPUx Redirected Address Base Register 6 */

/** Alias (User Manual Name) for CPU0_BLK6_RABR.
* To use register names with standard convension, please use CPU0_BLK6_RABR.
*/


/** \brief FB5C, CPUx Overlay Target Address Register 6 */

/** Alias (User Manual Name) for CPU0_BLK6_OTAR.
* To use register names with standard convension, please use CPU0_BLK6_OTAR.
*/


/** \brief FB60, CPUx Overlay Mask Register 6 */

/** Alias (User Manual Name) for CPU0_BLK6_OMASK.
* To use register names with standard convension, please use CPU0_BLK6_OMASK.
*/


/** \brief FB64, CPUx Redirected Address Base Register 7 */

/** Alias (User Manual Name) for CPU0_BLK7_RABR.
* To use register names with standard convension, please use CPU0_BLK7_RABR.
*/


/** \brief FB68, CPUx Overlay Target Address Register 7 */

/** Alias (User Manual Name) for CPU0_BLK7_OTAR.
* To use register names with standard convension, please use CPU0_BLK7_OTAR.
*/


/** \brief FB6C, CPUx Overlay Mask Register 7 */

/** Alias (User Manual Name) for CPU0_BLK7_OMASK.
* To use register names with standard convension, please use CPU0_BLK7_OMASK.
*/


/** \brief FB70, CPUx Redirected Address Base Register 8 */

/** Alias (User Manual Name) for CPU0_BLK8_RABR.
* To use register names with standard convension, please use CPU0_BLK8_RABR.
*/


/** \brief FB74, CPUx Overlay Target Address Register 8 */

/** Alias (User Manual Name) for CPU0_BLK8_OTAR.
* To use register names with standard convension, please use CPU0_BLK8_OTAR.
*/


/** \brief FB78, CPUx Overlay Mask Register 8 */

/** Alias (User Manual Name) for CPU0_BLK8_OMASK.
* To use register names with standard convension, please use CPU0_BLK8_OMASK.
*/


/** \brief FB7C, CPUx Redirected Address Base Register 9 */

/** Alias (User Manual Name) for CPU0_BLK9_RABR.
* To use register names with standard convension, please use CPU0_BLK9_RABR.
*/


/** \brief FB80, CPUx Overlay Target Address Register 9 */

/** Alias (User Manual Name) for CPU0_BLK9_OTAR.
* To use register names with standard convension, please use CPU0_BLK9_OTAR.
*/


/** \brief FB84, CPUx Overlay Mask Register 9 */

/** Alias (User Manual Name) for CPU0_BLK9_OMASK.
* To use register names with standard convension, please use CPU0_BLK9_OMASK.
*/


/** \brief FB88, CPUx Redirected Address Base Register 10 */

/** Alias (User Manual Name) for CPU0_BLK10_RABR.
* To use register names with standard convension, please use CPU0_BLK10_RABR.
*/


/** \brief FB8C, CPUx Overlay Target Address Register 10 */

/** Alias (User Manual Name) for CPU0_BLK10_OTAR.
* To use register names with standard convension, please use CPU0_BLK10_OTAR.
*/


/** \brief FB90, CPUx Overlay Mask Register 10 */

/** Alias (User Manual Name) for CPU0_BLK10_OMASK.
* To use register names with standard convension, please use CPU0_BLK10_OMASK.
*/


/** \brief FB94, CPUx Redirected Address Base Register 11 */

/** Alias (User Manual Name) for CPU0_BLK11_RABR.
* To use register names with standard convension, please use CPU0_BLK11_RABR.
*/


/** \brief FB98, CPUx Overlay Target Address Register 11 */

/** Alias (User Manual Name) for CPU0_BLK11_OTAR.
* To use register names with standard convension, please use CPU0_BLK11_OTAR.
*/


/** \brief FB9C, CPUx Overlay Mask Register 11 */

/** Alias (User Manual Name) for CPU0_BLK11_OMASK.
* To use register names with standard convension, please use CPU0_BLK11_OMASK.
*/


/** \brief FBA0, CPUx Redirected Address Base Register 12 */

/** Alias (User Manual Name) for CPU0_BLK12_RABR.
* To use register names with standard convension, please use CPU0_BLK12_RABR.
*/


/** \brief FBA4, CPUx Overlay Target Address Register 12 */

/** Alias (User Manual Name) for CPU0_BLK12_OTAR.
* To use register names with standard convension, please use CPU0_BLK12_OTAR.
*/


/** \brief FBA8, CPUx Overlay Mask Register 12 */

/** Alias (User Manual Name) for CPU0_BLK12_OMASK.
* To use register names with standard convension, please use CPU0_BLK12_OMASK.
*/


/** \brief FBAC, CPUx Redirected Address Base Register 13 */

/** Alias (User Manual Name) for CPU0_BLK13_RABR.
* To use register names with standard convension, please use CPU0_BLK13_RABR.
*/


/** \brief FBB0, CPUx Overlay Target Address Register 13 */

/** Alias (User Manual Name) for CPU0_BLK13_OTAR.
* To use register names with standard convension, please use CPU0_BLK13_OTAR.
*/


/** \brief FBB4, CPUx Overlay Mask Register 13 */

/** Alias (User Manual Name) for CPU0_BLK13_OMASK.
* To use register names with standard convension, please use CPU0_BLK13_OMASK.
*/


/** \brief FBB8, CPUx Redirected Address Base Register 14 */

/** Alias (User Manual Name) for CPU0_BLK14_RABR.
* To use register names with standard convension, please use CPU0_BLK14_RABR.
*/


/** \brief FBBC, CPUx Overlay Target Address Register 14 */

/** Alias (User Manual Name) for CPU0_BLK14_OTAR.
* To use register names with standard convension, please use CPU0_BLK14_OTAR.
*/


/** \brief FBC0, CPUx Overlay Mask Register 14 */

/** Alias (User Manual Name) for CPU0_BLK14_OMASK.
* To use register names with standard convension, please use CPU0_BLK14_OMASK.
*/


/** \brief FBC4, CPUx Redirected Address Base Register 15 */

/** Alias (User Manual Name) for CPU0_BLK15_RABR.
* To use register names with standard convension, please use CPU0_BLK15_RABR.
*/


/** \brief FBC8, CPUx Overlay Target Address Register 15 */

/** Alias (User Manual Name) for CPU0_BLK15_OTAR.
* To use register names with standard convension, please use CPU0_BLK15_OTAR.
*/


/** \brief FBCC, CPUx Overlay Mask Register 15 */

/** Alias (User Manual Name) for CPU0_BLK15_OMASK.
* To use register names with standard convension, please use CPU0_BLK15_OMASK.
*/


/** \brief FBD0, CPUx Redirected Address Base Register 16 */

/** Alias (User Manual Name) for CPU0_BLK16_RABR.
* To use register names with standard convension, please use CPU0_BLK16_RABR.
*/


/** \brief FBD4, CPUx Overlay Target Address Register 16 */

/** Alias (User Manual Name) for CPU0_BLK16_OTAR.
* To use register names with standard convension, please use CPU0_BLK16_OTAR.
*/


/** \brief FBD8, CPUx Overlay Mask Register 16 */

/** Alias (User Manual Name) for CPU0_BLK16_OMASK.
* To use register names with standard convension, please use CPU0_BLK16_OMASK.
*/


/** \brief FBDC, CPUx Redirected Address Base Register 17 */

/** Alias (User Manual Name) for CPU0_BLK17_RABR.
* To use register names with standard convension, please use CPU0_BLK17_RABR.
*/


/** \brief FBE0, CPUx Overlay Target Address Register 17 */

/** Alias (User Manual Name) for CPU0_BLK17_OTAR.
* To use register names with standard convension, please use CPU0_BLK17_OTAR.
*/


/** \brief FBE4, CPUx Overlay Mask Register 17 */

/** Alias (User Manual Name) for CPU0_BLK17_OMASK.
* To use register names with standard convension, please use CPU0_BLK17_OMASK.
*/


/** \brief FBE8, CPUx Redirected Address Base Register 18 */

/** Alias (User Manual Name) for CPU0_BLK18_RABR.
* To use register names with standard convension, please use CPU0_BLK18_RABR.
*/


/** \brief FBEC, CPUx Overlay Target Address Register 18 */

/** Alias (User Manual Name) for CPU0_BLK18_OTAR.
* To use register names with standard convension, please use CPU0_BLK18_OTAR.
*/


/** \brief FBF0, CPUx Overlay Mask Register 18 */

/** Alias (User Manual Name) for CPU0_BLK18_OMASK.
* To use register names with standard convension, please use CPU0_BLK18_OMASK.
*/


/** \brief FBF4, CPUx Redirected Address Base Register 19 */

/** Alias (User Manual Name) for CPU0_BLK19_RABR.
* To use register names with standard convension, please use CPU0_BLK19_RABR.
*/


/** \brief FBF8, CPUx Overlay Target Address Register 19 */

/** Alias (User Manual Name) for CPU0_BLK19_OTAR.
* To use register names with standard convension, please use CPU0_BLK19_OTAR.
*/


/** \brief FBFC, CPUx Overlay Mask Register 19 */

/** Alias (User Manual Name) for CPU0_BLK19_OMASK.
* To use register names with standard convension, please use CPU0_BLK19_OMASK.
*/


/** \brief FC00, CPUx Redirected Address Base Register 20 */

/** Alias (User Manual Name) for CPU0_BLK20_RABR.
* To use register names with standard convension, please use CPU0_BLK20_RABR.
*/


/** \brief FC04, CPUx Overlay Target Address Register 20 */

/** Alias (User Manual Name) for CPU0_BLK20_OTAR.
* To use register names with standard convension, please use CPU0_BLK20_OTAR.
*/


/** \brief FC08, CPUx Overlay Mask Register 20 */

/** Alias (User Manual Name) for CPU0_BLK20_OMASK.
* To use register names with standard convension, please use CPU0_BLK20_OMASK.
*/


/** \brief FC0C, CPUx Redirected Address Base Register 21 */

/** Alias (User Manual Name) for CPU0_BLK21_RABR.
* To use register names with standard convension, please use CPU0_BLK21_RABR.
*/


/** \brief FC10, CPUx Overlay Target Address Register 21 */

/** Alias (User Manual Name) for CPU0_BLK21_OTAR.
* To use register names with standard convension, please use CPU0_BLK21_OTAR.
*/


/** \brief FC14, CPUx Overlay Mask Register 21 */

/** Alias (User Manual Name) for CPU0_BLK21_OMASK.
* To use register names with standard convension, please use CPU0_BLK21_OMASK.
*/


/** \brief FC18, CPUx Redirected Address Base Register 22 */

/** Alias (User Manual Name) for CPU0_BLK22_RABR.
* To use register names with standard convension, please use CPU0_BLK22_RABR.
*/


/** \brief FC1C, CPUx Overlay Target Address Register 22 */

/** Alias (User Manual Name) for CPU0_BLK22_OTAR.
* To use register names with standard convension, please use CPU0_BLK22_OTAR.
*/


/** \brief FC20, CPUx Overlay Mask Register 22 */

/** Alias (User Manual Name) for CPU0_BLK22_OMASK.
* To use register names with standard convension, please use CPU0_BLK22_OMASK.
*/


/** \brief FC24, CPUx Redirected Address Base Register 23 */

/** Alias (User Manual Name) for CPU0_BLK23_RABR.
* To use register names with standard convension, please use CPU0_BLK23_RABR.
*/


/** \brief FC28, CPUx Overlay Target Address Register 23 */

/** Alias (User Manual Name) for CPU0_BLK23_OTAR.
* To use register names with standard convension, please use CPU0_BLK23_OTAR.
*/


/** \brief FC2C, CPUx Overlay Mask Register 23 */

/** Alias (User Manual Name) for CPU0_BLK23_OMASK.
* To use register names with standard convension, please use CPU0_BLK23_OMASK.
*/


/** \brief FC30, CPUx Redirected Address Base Register 24 */

/** Alias (User Manual Name) for CPU0_BLK24_RABR.
* To use register names with standard convension, please use CPU0_BLK24_RABR.
*/


/** \brief FC34, CPUx Overlay Target Address Register 24 */

/** Alias (User Manual Name) for CPU0_BLK24_OTAR.
* To use register names with standard convension, please use CPU0_BLK24_OTAR.
*/


/** \brief FC38, CPUx Overlay Mask Register 24 */

/** Alias (User Manual Name) for CPU0_BLK24_OMASK.
* To use register names with standard convension, please use CPU0_BLK24_OMASK.
*/


/** \brief FC3C, CPUx Redirected Address Base Register 25 */

/** Alias (User Manual Name) for CPU0_BLK25_RABR.
* To use register names with standard convension, please use CPU0_BLK25_RABR.
*/


/** \brief FC40, CPUx Overlay Target Address Register 25 */

/** Alias (User Manual Name) for CPU0_BLK25_OTAR.
* To use register names with standard convension, please use CPU0_BLK25_OTAR.
*/


/** \brief FC44, CPUx Overlay Mask Register 25 */

/** Alias (User Manual Name) for CPU0_BLK25_OMASK.
* To use register names with standard convension, please use CPU0_BLK25_OMASK.
*/


/** \brief FC48, CPUx Redirected Address Base Register 26 */

/** Alias (User Manual Name) for CPU0_BLK26_RABR.
* To use register names with standard convension, please use CPU0_BLK26_RABR.
*/


/** \brief FC4C, CPUx Overlay Target Address Register 26 */

/** Alias (User Manual Name) for CPU0_BLK26_OTAR.
* To use register names with standard convension, please use CPU0_BLK26_OTAR.
*/


/** \brief FC50, CPUx Overlay Mask Register 26 */

/** Alias (User Manual Name) for CPU0_BLK26_OMASK.
* To use register names with standard convension, please use CPU0_BLK26_OMASK.
*/


/** \brief FC54, CPUx Redirected Address Base Register 27 */

/** Alias (User Manual Name) for CPU0_BLK27_RABR.
* To use register names with standard convension, please use CPU0_BLK27_RABR.
*/


/** \brief FC58, CPUx Overlay Target Address Register 27 */

/** Alias (User Manual Name) for CPU0_BLK27_OTAR.
* To use register names with standard convension, please use CPU0_BLK27_OTAR.
*/


/** \brief FC5C, CPUx Overlay Mask Register 27 */

/** Alias (User Manual Name) for CPU0_BLK27_OMASK.
* To use register names with standard convension, please use CPU0_BLK27_OMASK.
*/


/** \brief FC60, CPUx Redirected Address Base Register 28 */

/** Alias (User Manual Name) for CPU0_BLK28_RABR.
* To use register names with standard convension, please use CPU0_BLK28_RABR.
*/


/** \brief FC64, CPUx Overlay Target Address Register 28 */

/** Alias (User Manual Name) for CPU0_BLK28_OTAR.
* To use register names with standard convension, please use CPU0_BLK28_OTAR.
*/


/** \brief FC68, CPUx Overlay Mask Register 28 */

/** Alias (User Manual Name) for CPU0_BLK28_OMASK.
* To use register names with standard convension, please use CPU0_BLK28_OMASK.
*/


/** \brief FC6C, CPUx Redirected Address Base Register 29 */

/** Alias (User Manual Name) for CPU0_BLK29_RABR.
* To use register names with standard convension, please use CPU0_BLK29_RABR.
*/


/** \brief FC70, CPUx Overlay Target Address Register 29 */

/** Alias (User Manual Name) for CPU0_BLK29_OTAR.
* To use register names with standard convension, please use CPU0_BLK29_OTAR.
*/


/** \brief FC74, CPUx Overlay Mask Register 29 */

/** Alias (User Manual Name) for CPU0_BLK29_OMASK.
* To use register names with standard convension, please use CPU0_BLK29_OMASK.
*/


/** \brief FC78, CPUx Redirected Address Base Register 30 */

/** Alias (User Manual Name) for CPU0_BLK30_RABR.
* To use register names with standard convension, please use CPU0_BLK30_RABR.
*/


/** \brief FC7C, CPUx Overlay Target Address Register 30 */

/** Alias (User Manual Name) for CPU0_BLK30_OTAR.
* To use register names with standard convension, please use CPU0_BLK30_OTAR.
*/


/** \brief FC80, CPUx Overlay Mask Register 30 */

/** Alias (User Manual Name) for CPU0_BLK30_OMASK.
* To use register names with standard convension, please use CPU0_BLK30_OMASK.
*/


/** \brief FC84, CPUx Redirected Address Base Register 31 */

/** Alias (User Manual Name) for CPU0_BLK31_RABR.
* To use register names with standard convension, please use CPU0_BLK31_RABR.
*/


/** \brief FC88, CPUx Overlay Target Address Register 31 */

/** Alias (User Manual Name) for CPU0_BLK31_OTAR.
* To use register names with standard convension, please use CPU0_BLK31_OTAR.
*/


/** \brief FC8C, CPUx Overlay Mask Register 31 */

/** Alias (User Manual Name) for CPU0_BLK31_OMASK.
* To use register names with standard convension, please use CPU0_BLK31_OMASK.
*/


/** \brief 1030, CPUx SRI Error Generation Register */


/** \brief 8004, CPUx Task Address Space Identifier Register */


/** \brief 8100, CPUx Data Access CacheabilityRegister */


/** \brief 8104, CPUx Code Access CacheabilityRegister */


/** \brief 8108, CPUx  Peripheral Space Identifier register */


/** \brief 9000, CPUx Data Control Register 2 */


/** \brief 900C, CPUx SIST Mode Access Control Register */


/** \brief 9010, CPUx Data Synchronous Trap Register */


/** \brief 9018, CPUx Data Asynchronous Trap Register */


/** \brief 901C, CPUx Data Error Address Register */


/** \brief 9020, CPUx Data Integrity Error Address Register */


/** \brief 9024, CPUx Data Integrity Error Trap Register */


/** \brief 9040, CPUx Data Memory Control Register */


/** \brief 9200, CPUx Program Synchronous Trap Register */


/** \brief 9204, CPUx Program Control 1 */


/** \brief 9208, CPUx Program Control 2 */


/** \brief 920C, CPUx Program Control 0 */


/** \brief 9210, CPUx Program Integrity Error Address Register */


/** \brief 9214, CPUx Program Integrity Error Trap Register */


/** \brief 9400, CPUx Compatibility Control Register */


/** \brief A000, CPUx Trap Control Register */


/** \brief A004, CPUx Trapping Instruction Program Counter Register */


/** \brief A008, CPUx Trapping Instruction Opcode Register */


/** \brief A010, CPUx Trapping Instruction Operand Register */


/** \brief A014, CPUx Trapping Instruction Operand Register */


/** \brief A018, CPUx Trapping Instruction Operand Register */


/** \brief C000, CPUx Data Protection Range 0, Lower Bound Register */


/** \brief C004, CPUx Data Protection Range 0, Upper Bound Register */


/** \brief C008, CPUx Data Protection Range 1, Lower Bound Register */


/** \brief C00C, CPUx Data Protection Range 1, Upper Bound Register */


/** \brief C010, CPUx Data Protection Range 2, Lower Bound Register */


/** \brief C014, CPUx Data Protection Range 2, Upper Bound Register */


/** \brief C018, CPUx Data Protection Range 3, Lower Bound Register */


/** \brief C01C, CPUx Data Protection Range 3, Upper Bound Register */


/** \brief C020, CPUx Data Protection Range 4, Lower Bound Register */


/** \brief C024, CPUx Data Protection Range 4, Upper Bound Register */


/** \brief C028, CPUx Data Protection Range 5, Lower Bound Register */


/** \brief C02C, CPUx Data Protection Range 5, Upper Bound Register */


/** \brief C030, CPUx Data Protection Range 6, Lower Bound Register */


/** \brief C034, CPUx Data Protection Range 6, Upper Bound Register */


/** \brief C038, CPUx Data Protection Range 7, Lower Bound Register */


/** \brief C03C, CPUx Data Protection Range 7, Upper Bound Register */


/** \brief C040, CPUx Data Protection Range 8, Lower Bound Register */


/** \brief C044, CPUx Data Protection Range 8, Upper Bound Register */


/** \brief C048, CPUx Data Protection Range 9, Lower Bound Register */


/** \brief C04C, CPUx Data Protection Range 9, Upper Bound Register */


/** \brief C050, CPUx Data Protection Range 10, Lower Bound Register */


/** \brief C054, CPUx Data Protection Range 10, Upper Bound Register */


/** \brief C058, CPUx Data Protection Range 11, Lower Bound Register */


/** \brief C05C, CPUx Data Protection Range 11, Upper Bound Register */


/** \brief C060, CPUx Data Protection Range 12, Lower Bound Register */


/** \brief C064, CPUx Data Protection Range 12, Upper Bound Register */


/** \brief C068, CPUx Data Protection Range 13, Lower Bound Register */


/** \brief C06C, CPUx Data Protection Range 13, Upper Bound Register */


/** \brief C070, CPUx Data Protection Range 14, Lower Bound Register */


/** \brief C074, CPUx Data Protection Range 14, Upper Bound Register */


/** \brief C078, CPUx Data Protection Range 15, Lower Bound Register */


/** \brief C07C, CPUx Data Protection Range 15, Upper Bound Register */


/** \brief C080, CPUx Data Protection Range 16, Lower Bound Register */


/** \brief C084, CPUx Data Protection Range 16, Upper Bound Register */


/** \brief C088, CPUx Data Protection Range 17, Lower Bound Register */


/** \brief C08C, CPUx Data Protection Range 17, Upper Bound Register */


/** \brief D000, CPUx Code Protection Range 0 Lower Bound Register */


/** \brief D004, CPUx Code Protection Range 0 Upper Bound Register */


/** \brief D008, CPUx Code Protection Range 1 Lower Bound Register */


/** \brief D00C, CPUx Code Protection Range 1 Upper Bound Register */


/** \brief D010, CPUx Code Protection Range 2 Lower Bound Register */


/** \brief D014, CPUx Code Protection Range 2 Upper Bound Register */


/** \brief D018, CPUx Code Protection Range 3 Lower Bound Register */


/** \brief D01C, CPUx Code Protection Range 3 Upper Bound Register */


/** \brief D020, CPUx Code Protection Range 4 Lower Bound Register */


/** \brief D024, CPUx Code Protection Range 4 Upper Bound Register */


/** \brief D028, CPUx Code Protection Range 5 Lower Bound Register */


/** \brief D02C, CPUx Code Protection Range 5 Upper Bound Register */


/** \brief D030, CPUx Code Protection Range 6 Lower Bound Register */


/** \brief D034, CPUx Code Protection Range 6 Upper Bound Register */


/** \brief D038, CPUx Code Protection Range 7 Lower Bound Register */


/** \brief D03C, CPUx Code Protection Range 7 Upper Bound Register */


/** \brief D040, CPUx Code Protection Range 8 Lower Bound Register */


/** \brief D044, CPUx Code Protection Range 8 Upper Bound Register */


/** \brief D048, CPUx Code Protection Range 9 Lower Bound Register */


/** \brief D04C, CPUx Code Protection Range 9 Upper Bound Register */


/** \brief E000, CPUx Code Protection Execute Enable Register Set 0 */


/** \brief E004, CPUx Code Protection Execute Enable Register Set 1 */


/** \brief E008, CPUx Code Protection Execute Enable Register Set 2 */


/** \brief E00C, CPUx Code Protection Execute Enable Register Set 3 */


/** \brief E010, CPUx Data Protection Read Enable Register Set 0 */


/** \brief E014, CPUx Data Protection Read Enable Register Set 1 */


/** \brief E018, CPUx Data Protection Read Enable Register Set 2 */


/** \brief E01C, CPUx Data Protection Read Enable Register Set 3 */


/** \brief E020, CPUx Data Protection Write Enable Register Set 0 */


/** \brief E024, CPUx Data Protection Write Enable Register Set 1 */


/** \brief E028, CPUx Data Protection Write Enable Register Set 2 */


/** \brief E02C, CPUx Data Protection Write Enable Register Set 3 */


/** \brief E040, CPUx Code Protection Execute Enable Register Set 4 */


/** \brief E044, CPUx Code Protection Execute Enable Register Set 5 */


/** \brief E050, CPUx Data Protection Read Enable Register Set 4 */


/** \brief E054, CPUx Data Protection Read Enable Register Set 5 */


/** \brief E060, CPUx Data Protection Write Enable Register Set 4 */


/** \brief E064, CPUx Data Protection Write Enable Register Set 5 */


/** \brief E400, CPUx Temporal Protection System Control Register */


/** \brief E404, CPUx Temporal Protection System Timer Register 0 */


/** \brief E408, CPUx Temporal Protection System Timer Register 1 */


/** \brief E40C, CPUx Temporal Protection System Timer Register 2 */


/** \brief E440, CPUx Exception Entry Timer Load Value */


/** \brief E444, CPUx Exception Entry Timer Current Value */


/** \brief E448, CPUx Exception Exit  Timer Load Value */


/** \brief E44C, CPUx Exception Exit Timer Current Value */


/** \brief E450, CPUx Exception Timer Class Enable Register */


/** \brief E454, CPUx Exception Timer Status Register */


/** \brief E458, CPUx Exception Timer FCX Register */


/** \brief F000, CPUx Trigger Event 0 */

/** Alias (User Manual Name) for CPU0_TR0_EVT.
* To use register names with standard convension, please use CPU0_TR0_EVT.
*/


/** \brief F004, CPUx Trigger Address 0 */

/** Alias (User Manual Name) for CPU0_TR0_ADR.
* To use register names with standard convension, please use CPU0_TR0_ADR.
*/


/** \brief F008, CPUx Trigger Event 1 */

/** Alias (User Manual Name) for CPU0_TR1_EVT.
* To use register names with standard convension, please use CPU0_TR1_EVT.
*/


/** \brief F00C, CPUx Trigger Address 1 */

/** Alias (User Manual Name) for CPU0_TR1_ADR.
* To use register names with standard convension, please use CPU0_TR1_ADR.
*/


/** \brief F010, CPUx Trigger Event 2 */

/** Alias (User Manual Name) for CPU0_TR2_EVT.
* To use register names with standard convension, please use CPU0_TR2_EVT.
*/


/** \brief F014, CPUx Trigger Address 2 */

/** Alias (User Manual Name) for CPU0_TR2_ADR.
* To use register names with standard convension, please use CPU0_TR2_ADR.
*/


/** \brief F018, CPUx Trigger Event 3 */

/** Alias (User Manual Name) for CPU0_TR3_EVT.
* To use register names with standard convension, please use CPU0_TR3_EVT.
*/


/** \brief F01C, CPUx Trigger Address 3 */

/** Alias (User Manual Name) for CPU0_TR3_ADR.
* To use register names with standard convension, please use CPU0_TR3_ADR.
*/


/** \brief F020, CPUx Trigger Event 4 */

/** Alias (User Manual Name) for CPU0_TR4_EVT.
* To use register names with standard convension, please use CPU0_TR4_EVT.
*/


/** \brief F024, CPUx Trigger Address 4 */

/** Alias (User Manual Name) for CPU0_TR4_ADR.
* To use register names with standard convension, please use CPU0_TR4_ADR.
*/


/** \brief F028, CPUx Trigger Event 5 */

/** Alias (User Manual Name) for CPU0_TR5_EVT.
* To use register names with standard convension, please use CPU0_TR5_EVT.
*/


/** \brief F02C, CPUx Trigger Address 5 */

/** Alias (User Manual Name) for CPU0_TR5_ADR.
* To use register names with standard convension, please use CPU0_TR5_ADR.
*/


/** \brief F030, CPUx Trigger Event 6 */

/** Alias (User Manual Name) for CPU0_TR6_EVT.
* To use register names with standard convension, please use CPU0_TR6_EVT.
*/


/** \brief F034, CPUx Trigger Address 6 */

/** Alias (User Manual Name) for CPU0_TR6_ADR.
* To use register names with standard convension, please use CPU0_TR6_ADR.
*/


/** \brief F038, CPUx Trigger Event 7 */

/** Alias (User Manual Name) for CPU0_TR7_EVT.
* To use register names with standard convension, please use CPU0_TR7_EVT.
*/


/** \brief F03C, CPUx Trigger Address 7 */

/** Alias (User Manual Name) for CPU0_TR7_ADR.
* To use register names with standard convension, please use CPU0_TR7_ADR.
*/


/** \brief FC00, CPUx Counter Control */


/** \brief FC04, CPUx CPU Clock Cycle Count */


/** \brief FC08, CPUx Instruction Count */


/** \brief FC0C, CPUx Multi-Count Register 1 */


/** \brief FC10, CPUx Multi-Count Register 2 */


/** \brief FC14, CPUx Multi-Count Register 3 */


/** \brief FD00, CPUx Debug Status Register */


/** \brief FD08, CPUx External Event Register */


/** \brief FD0C, CPUx Core Register Access Event */


/** \brief FD10, CPUx Software Debug Event */


/** \brief FD30, CPUx TriggerAddressx */


/** \brief FD40, CPUx Debug Monitor Start Address */


/** \brief FD44, CPUx Debug Context Save Area Pointer */


/** \brief FD48, CPUx Debug Trap Control Register */


/** \brief FE00, CPUx Previous Context Information Register */


/** \brief FE04, CPUx Program Status Word */


/** \brief FE08, CPUx Program Counter */


/** \brief FE14, CPUx System Configuration Register */


/** \brief FE18, CPUx Identification Register TC1.6.2P */


/** \brief FE1C, CPUx Core Identification Register */


/** \brief FE20, CPUx Base Interrupt Vector Table Pointer */


/** \brief FE24, CPUx Base Trap Vector Table Pointer */


/** \brief FE28, CPUx Interrupt Stack Pointer */


/** \brief FE2C, CPUx Interrupt Control Register */


/** \brief FE38, CPUx Free CSA List Head Pointer */


/** \brief FE3C, CPUx Free CSA List Limit Pointer */


/** \brief FE50, CPUx Customer ID register */


/** \brief FF00, CPUx Data General Purpose Register 0 */


/** \brief FF04, CPUx Data General Purpose Register 1 */


/** \brief FF08, CPUx Data General Purpose Register 2 */


/** \brief FF0C, CPUx Data General Purpose Register 3 */


/** \brief FF10, CPUx Data General Purpose Register 4 */


/** \brief FF14, CPUx Data General Purpose Register 5 */


/** \brief FF18, CPUx Data General Purpose Register 6 */


/** \brief FF1C, CPUx Data General Purpose Register 7 */


/** \brief FF20, CPUx Data General Purpose Register 8 */


/** \brief FF24, CPUx Data General Purpose Register 9 */


/** \brief FF28, CPUx Data General Purpose Register 10 */


/** \brief FF2C, CPUx Data General Purpose Register 11 */


/** \brief FF30, CPUx Data General Purpose Register 12 */


/** \brief FF34, CPUx Data General Purpose Register 13 */


/** \brief FF38, CPUx Data General Purpose Register 14 */


/** \brief FF3C, CPUx Data General Purpose Register 15 */


/** \brief FF80, CPUx Address General Purpose Register 0 */


/** \brief FF84, CPUx Address General Purpose Register 1 */


/** \brief FF88, CPUx Address General Purpose Register 2 */


/** \brief FF8C, CPUx Address General Purpose Register 3 */


/** \brief FF90, CPUx Address General Purpose Register 4 */


/** \brief FF94, CPUx Address General Purpose Register 5 */


/** \brief FF98, CPUx Address General Purpose Register 6 */


/** \brief FF9C, CPUx Address General Purpose Register 7 */


/** \brief FFA0, CPUx Address General Purpose Register 8 */


/** \brief FFA4, CPUx Address General Purpose Register 9 */


/** \brief FFA8, CPUx Address General Purpose Register 10 */


/** \brief FFAC, CPUx Address General Purpose Register 11 */


/** \brief FFB0, CPUx Address General Purpose Register 12 */


/** \brief FFB4, CPUx Address General Purpose Register 13 */


/** \brief FFB8, CPUx Address General Purpose Register 14 */


/** \brief FFBC, CPUx Address General Purpose Register 15 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_Registers_Cfg_Cpu1
 * \{  */
/** \brief 1100, CPUx Flash Configuration Register 0 */


/** \brief 1104, CPUx Flash Configuration Register 1 */


/** \brief 1108, CPUx Flash Configuration Register 2 */


/** \brief 110C, CPUx Flash Configuration Register 3 */


/** \brief 1110, CPUx Flash Configuration Register 4 */


/** \brief D000, CPUx  Reset Register 0 */


/** \brief D004, CPUx  Reset Register 1 */


/** \brief D008, CPUx Reset Clear Register */


/** \brief E000, CPUx Safety Protection SPR Region Lower Address Register 0 */

/** Alias (User Manual Name) for CPU1_RGN0_LA.
* To use register names with standard convension, please use CPU1_RGN0_LA.
*/


/** \brief E004, CPUx Safety Protection SPR Region Upper Address Register 0 */

/** Alias (User Manual Name) for CPU1_RGN0_UA.
* To use register names with standard convension, please use CPU1_RGN0_UA.
*/


/** \brief E008, CPUx Safety Protection SPR Region Write Access Enable Register A0 */

/** Alias (User Manual Name) for CPU1_RGN0_ACCENA.
* To use register names with standard convension, please use CPU1_RGN0_ACCENA.
*/


/** \brief E00C, CPUx Safety Protection SPR Region Write Access Enable Register B0 */

/** Alias (User Manual Name) for CPU1_RGN0_ACCENB.
* To use register names with standard convension, please use CPU1_RGN0_ACCENB.
*/


/** \brief E010, CPUx Safety Protection SPR Region Lower Address Register 1 */

/** Alias (User Manual Name) for CPU1_RGN1_LA.
* To use register names with standard convension, please use CPU1_RGN1_LA.
*/


/** \brief E014, CPUx Safety Protection SPR Region Upper Address Register 1 */

/** Alias (User Manual Name) for CPU1_RGN1_UA.
* To use register names with standard convension, please use CPU1_RGN1_UA.
*/


/** \brief E018, CPUx Safety Protection SPR Region Write Access Enable Register A1 */

/** Alias (User Manual Name) for CPU1_RGN1_ACCENA.
* To use register names with standard convension, please use CPU1_RGN1_ACCENA.
*/


/** \brief E01C, CPUx Safety Protection SPR Region Write Access Enable Register B1 */

/** Alias (User Manual Name) for CPU1_RGN1_ACCENB.
* To use register names with standard convension, please use CPU1_RGN1_ACCENB.
*/


/** \brief E020, CPUx Safety Protection SPR Region Lower Address Register 2 */

/** Alias (User Manual Name) for CPU1_RGN2_LA.
* To use register names with standard convension, please use CPU1_RGN2_LA.
*/


/** \brief E024, CPUx Safety Protection SPR Region Upper Address Register 2 */

/** Alias (User Manual Name) for CPU1_RGN2_UA.
* To use register names with standard convension, please use CPU1_RGN2_UA.
*/


/** \brief E028, CPUx Safety Protection SPR Region Write Access Enable Register A2 */

/** Alias (User Manual Name) for CPU1_RGN2_ACCENA.
* To use register names with standard convension, please use CPU1_RGN2_ACCENA.
*/


/** \brief E02C, CPUx Safety Protection SPR Region Write Access Enable Register B2 */

/** Alias (User Manual Name) for CPU1_RGN2_ACCENB.
* To use register names with standard convension, please use CPU1_RGN2_ACCENB.
*/


/** \brief E030, CPUx Safety Protection SPR Region Lower Address Register 3 */

/** Alias (User Manual Name) for CPU1_RGN3_LA.
* To use register names with standard convension, please use CPU1_RGN3_LA.
*/


/** \brief E034, CPUx Safety Protection SPR Region Upper Address Register 3 */

/** Alias (User Manual Name) for CPU1_RGN3_UA.
* To use register names with standard convension, please use CPU1_RGN3_UA.
*/


/** \brief E038, CPUx Safety Protection SPR Region Write Access Enable Register A3 */

/** Alias (User Manual Name) for CPU1_RGN3_ACCENA.
* To use register names with standard convension, please use CPU1_RGN3_ACCENA.
*/


/** \brief E03C, CPUx Safety Protection SPR Region Write Access Enable Register B3 */

/** Alias (User Manual Name) for CPU1_RGN3_ACCENB.
* To use register names with standard convension, please use CPU1_RGN3_ACCENB.
*/


/** \brief E040, CPUx Safety Protection SPR Region Lower Address Register 4 */

/** Alias (User Manual Name) for CPU1_RGN4_LA.
* To use register names with standard convension, please use CPU1_RGN4_LA.
*/


/** \brief E044, CPUx Safety Protection SPR Region Upper Address Register 4 */

/** Alias (User Manual Name) for CPU1_RGN4_UA.
* To use register names with standard convension, please use CPU1_RGN4_UA.
*/


/** \brief E048, CPUx Safety Protection SPR Region Write Access Enable Register A4 */

/** Alias (User Manual Name) for CPU1_RGN4_ACCENA.
* To use register names with standard convension, please use CPU1_RGN4_ACCENA.
*/


/** \brief E04C, CPUx Safety Protection SPR Region Write Access Enable Register B4 */

/** Alias (User Manual Name) for CPU1_RGN4_ACCENB.
* To use register names with standard convension, please use CPU1_RGN4_ACCENB.
*/


/** \brief E050, CPUx Safety Protection SPR Region Lower Address Register 5 */

/** Alias (User Manual Name) for CPU1_RGN5_LA.
* To use register names with standard convension, please use CPU1_RGN5_LA.
*/


/** \brief E054, CPUx Safety Protection SPR Region Upper Address Register 5 */

/** Alias (User Manual Name) for CPU1_RGN5_UA.
* To use register names with standard convension, please use CPU1_RGN5_UA.
*/


/** \brief E058, CPUx Safety Protection SPR Region Write Access Enable Register A5 */

/** Alias (User Manual Name) for CPU1_RGN5_ACCENA.
* To use register names with standard convension, please use CPU1_RGN5_ACCENA.
*/


/** \brief E05C, CPUx Safety Protection SPR Region Write Access Enable Register B5 */

/** Alias (User Manual Name) for CPU1_RGN5_ACCENB.
* To use register names with standard convension, please use CPU1_RGN5_ACCENB.
*/


/** \brief E060, CPUx Safety Protection SPR Region Lower Address Register 6 */

/** Alias (User Manual Name) for CPU1_RGN6_LA.
* To use register names with standard convension, please use CPU1_RGN6_LA.
*/


/** \brief E064, CPUx Safety Protection SPR Region Upper Address Register 6 */

/** Alias (User Manual Name) for CPU1_RGN6_UA.
* To use register names with standard convension, please use CPU1_RGN6_UA.
*/


/** \brief E068, CPUx Safety Protection SPR Region Write Access Enable Register A6 */

/** Alias (User Manual Name) for CPU1_RGN6_ACCENA.
* To use register names with standard convension, please use CPU1_RGN6_ACCENA.
*/


/** \brief E06C, CPUx Safety Protection SPR Region Write Access Enable Register B6 */

/** Alias (User Manual Name) for CPU1_RGN6_ACCENB.
* To use register names with standard convension, please use CPU1_RGN6_ACCENB.
*/


/** \brief E070, CPUx Safety Protection SPR Region Lower Address Register 7 */

/** Alias (User Manual Name) for CPU1_RGN7_LA.
* To use register names with standard convension, please use CPU1_RGN7_LA.
*/


/** \brief E074, CPUx Safety Protection SPR Region Upper Address Register 7 */

/** Alias (User Manual Name) for CPU1_RGN7_UA.
* To use register names with standard convension, please use CPU1_RGN7_UA.
*/


/** \brief E078, CPUx Safety Protection SPR Region Write Access Enable Register A7 */

/** Alias (User Manual Name) for CPU1_RGN7_ACCENA.
* To use register names with standard convension, please use CPU1_RGN7_ACCENA.
*/


/** \brief E07C, CPUx Safety Protection SPR Region Write Access Enable Register B7 */

/** Alias (User Manual Name) for CPU1_RGN7_ACCENB.
* To use register names with standard convension, please use CPU1_RGN7_ACCENB.
*/


/** \brief E088, CPUx Safety Protection SPR Region Read Access Enable Register A0 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENA_R0.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENA_R0.
*/


/** \brief E08C, CPUx Safety Protection SPR Region Read Access Enable Register B0 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENB_R0.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENB_R0.
*/


/** \brief E098, CPUx Safety Protection SPR Region Read Access Enable Register A1 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENA_R1.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENA_R1.
*/


/** \brief E09C, CPUx Safety Protection SPR Region Read Access Enable Register B1 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENB_R1.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENB_R1.
*/


/** \brief E0A8, CPUx Safety Protection SPR Region Read Access Enable Register A2 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENA_R2.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENA_R2.
*/


/** \brief E0AC, CPUx Safety Protection SPR Region Read Access Enable Register B2 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENB_R2.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENB_R2.
*/


/** \brief E0B8, CPUx Safety Protection SPR Region Read Access Enable Register A3 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENA_R3.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENA_R3.
*/


/** \brief E0BC, CPUx Safety Protection SPR Region Read Access Enable Register B3 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENB_R3.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENB_R3.
*/


/** \brief E0C8, CPUx Safety Protection SPR Region Read Access Enable Register A4 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENA_R4.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENA_R4.
*/


/** \brief E0CC, CPUx Safety Protection SPR Region Read Access Enable Register B4 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENB_R4.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENB_R4.
*/


/** \brief E0D8, CPUx Safety Protection SPR Region Read Access Enable Register A5 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENA_R5.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENA_R5.
*/


/** \brief E0DC, CPUx Safety Protection SPR Region Read Access Enable Register B5 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENB_R5.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENB_R5.
*/


/** \brief E0E8, CPUx Safety Protection SPR Region Read Access Enable Register A6 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENA_R6.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENA_R6.
*/


/** \brief E0EC, CPUx Safety Protection SPR Region Read Access Enable Register B6 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENB_R6.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENB_R6.
*/


/** \brief E0F8, CPUx Safety Protection SPR Region Read Access Enable Register A7 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENA_R7.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENA_R7.
*/


/** \brief E0FC, CPUx Safety Protection SPR Region Read Access Enable Register B7 */

/** Alias (User Manual Name) for CPU1_SPR_SPROT_RGNACCENB_R7.
* To use register names with standard convension, please use CPU1_SPR_SPROT_RGNACCENB_R7.
*/


/** \brief E100, CPUx Safety Protection Register Access Enable Register A */


/** \brief E104, CPUx Safety Protection Region Access Enable Register B */


/** \brief E110, CPUx Safety Protection Region LPB Read Access Enable Register A */


/** \brief E114, CPUx Safety Protection Region LPB Read Access Enable Register B */


/** \brief E200, CPUx Safety Protection DLMU Region Lower Address Register 0 */


/** \brief E204, CPUx Safety protection DLMU Region Upper Address Register 0 */


/** \brief E208, CPUx Safety Protection Region DLMU Write Access Enable Register A0 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_W0.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_W0.
*/


/** \brief E20C, CPUx Safety Protection Region DLMU Write Access Enable Register B0 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_W0.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_W0.
*/


/** \brief E210, CPUx Safety Protection DLMU Region Lower Address Register 1 */


/** \brief E214, CPUx Safety protection DLMU Region Upper Address Register 1 */


/** \brief E218, CPUx Safety Protection Region DLMU Write Access Enable Register A1 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_W1.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_W1.
*/


/** \brief E21C, CPUx Safety Protection Region DLMU Write Access Enable Register B1 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_W1.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_W1.
*/


/** \brief E220, CPUx Safety Protection DLMU Region Lower Address Register 2 */


/** \brief E224, CPUx Safety protection DLMU Region Upper Address Register 2 */


/** \brief E228, CPUx Safety Protection Region DLMU Write Access Enable Register A2 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_W2.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_W2.
*/


/** \brief E22C, CPUx Safety Protection Region DLMU Write Access Enable Register B2 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_W2.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_W2.
*/


/** \brief E230, CPUx Safety Protection DLMU Region Lower Address Register 3 */


/** \brief E234, CPUx Safety protection DLMU Region Upper Address Register 3 */


/** \brief E238, CPUx Safety Protection Region DLMU Write Access Enable Register A3 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_W3.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_W3.
*/


/** \brief E23C, CPUx Safety Protection Region DLMU Write Access Enable Register B3 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_W3.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_W3.
*/


/** \brief E240, CPUx Safety Protection DLMU Region Lower Address Register 4 */


/** \brief E244, CPUx Safety protection DLMU Region Upper Address Register 4 */


/** \brief E248, CPUx Safety Protection Region DLMU Write Access Enable Register A4 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_W4.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_W4.
*/


/** \brief E24C, CPUx Safety Protection Region DLMU Write Access Enable Register B4 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_W4.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_W4.
*/


/** \brief E250, CPUx Safety Protection DLMU Region Lower Address Register 5 */


/** \brief E254, CPUx Safety protection DLMU Region Upper Address Register 5 */


/** \brief E258, CPUx Safety Protection Region DLMU Write Access Enable Register A5 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_W5.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_W5.
*/


/** \brief E25C, CPUx Safety Protection Region DLMU Write Access Enable Register B5 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_W5.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_W5.
*/


/** \brief E260, CPUx Safety Protection DLMU Region Lower Address Register 6 */


/** \brief E264, CPUx Safety protection DLMU Region Upper Address Register 6 */


/** \brief E268, CPUx Safety Protection Region DLMU Write Access Enable Register A6 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_W6.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_W6.
*/


/** \brief E26C, CPUx Safety Protection Region DLMU Write Access Enable Register B6 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_W6.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_W6.
*/


/** \brief E270, CPUx Safety Protection DLMU Region Lower Address Register 7 */


/** \brief E274, CPUx Safety protection DLMU Region Upper Address Register 7 */


/** \brief E278, CPUx Safety Protection Region DLMU Write Access Enable Register A7 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_W7.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_W7.
*/


/** \brief E27C, CPUx Safety Protection Region DLMU Write Access Enable Register B7 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_W7.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_W7.
*/


/** \brief E288, CPUx Safety Protection Region DLMU Read Access Enable Register A0 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_R0.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_R0.
*/


/** \brief E28C, CPUx Safety Protection Region DLMU Read Access Enable Register B0 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_R0.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_R0.
*/


/** \brief E298, CPUx Safety Protection Region DLMU Read Access Enable Register A1 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_R1.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_R1.
*/


/** \brief E29C, CPUx Safety Protection Region DLMU Read Access Enable Register B1 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_R1.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_R1.
*/


/** \brief E2A8, CPUx Safety Protection Region DLMU Read Access Enable Register A2 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_R2.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_R2.
*/


/** \brief E2AC, CPUx Safety Protection Region DLMU Read Access Enable Register B2 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_R2.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_R2.
*/


/** \brief E2B8, CPUx Safety Protection Region DLMU Read Access Enable Register A3 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_R3.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_R3.
*/


/** \brief E2BC, CPUx Safety Protection Region DLMU Read Access Enable Register B3 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_R3.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_R3.
*/


/** \brief E2C8, CPUx Safety Protection Region DLMU Read Access Enable Register A4 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_R4.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_R4.
*/


/** \brief E2CC, CPUx Safety Protection Region DLMU Read Access Enable Register B4 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_R4.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_R4.
*/


/** \brief E2D8, CPUx Safety Protection Region DLMU Read Access Enable Register A5 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_R5.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_R5.
*/


/** \brief E2DC, CPUx Safety Protection Region DLMU Read Access Enable Register B5 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_R5.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_R5.
*/


/** \brief E2E8, CPUx Safety Protection Region DLMU Read Access Enable Register A6 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_R6.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_R6.
*/


/** \brief E2EC, CPUx Safety Protection Region DLMU Read Access Enable Register B6 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_R6.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_R6.
*/


/** \brief E2F8, CPUx Safety Protection Region DLMU Read Access Enable Register A7 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENA_R7.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENA_R7.
*/


/** \brief E2FC, CPUx Safety Protection Region DLMU Read Access Enable Register B7 */

/** Alias (User Manual Name) for CPU1_DLMU_SPROT_RGNACCENB_R7.
* To use register names with standard convension, please use CPU1_DLMU_SPROT_RGNACCENB_R7.
*/


/** \brief FB00, CPUx  Overlay Range Select Register */


/** \brief FB10, CPUx Redirected Address Base Register 0 */

/** Alias (User Manual Name) for CPU1_BLK0_RABR.
* To use register names with standard convension, please use CPU1_BLK0_RABR.
*/


/** \brief FB14, CPUx Overlay Target Address Register 0 */

/** Alias (User Manual Name) for CPU1_BLK0_OTAR.
* To use register names with standard convension, please use CPU1_BLK0_OTAR.
*/


/** \brief FB18, CPUx Overlay Mask Register 0 */

/** Alias (User Manual Name) for CPU1_BLK0_OMASK.
* To use register names with standard convension, please use CPU1_BLK0_OMASK.
*/


/** \brief FB1C, CPUx Redirected Address Base Register 1 */

/** Alias (User Manual Name) for CPU1_BLK1_RABR.
* To use register names with standard convension, please use CPU1_BLK1_RABR.
*/


/** \brief FB20, CPUx Overlay Target Address Register 1 */

/** Alias (User Manual Name) for CPU1_BLK1_OTAR.
* To use register names with standard convension, please use CPU1_BLK1_OTAR.
*/


/** \brief FB24, CPUx Overlay Mask Register 1 */

/** Alias (User Manual Name) for CPU1_BLK1_OMASK.
* To use register names with standard convension, please use CPU1_BLK1_OMASK.
*/


/** \brief FB28, CPUx Redirected Address Base Register 2 */

/** Alias (User Manual Name) for CPU1_BLK2_RABR.
* To use register names with standard convension, please use CPU1_BLK2_RABR.
*/


/** \brief FB2C, CPUx Overlay Target Address Register 2 */

/** Alias (User Manual Name) for CPU1_BLK2_OTAR.
* To use register names with standard convension, please use CPU1_BLK2_OTAR.
*/


/** \brief FB30, CPUx Overlay Mask Register 2 */

/** Alias (User Manual Name) for CPU1_BLK2_OMASK.
* To use register names with standard convension, please use CPU1_BLK2_OMASK.
*/


/** \brief FB34, CPUx Redirected Address Base Register 3 */

/** Alias (User Manual Name) for CPU1_BLK3_RABR.
* To use register names with standard convension, please use CPU1_BLK3_RABR.
*/


/** \brief FB38, CPUx Overlay Target Address Register 3 */

/** Alias (User Manual Name) for CPU1_BLK3_OTAR.
* To use register names with standard convension, please use CPU1_BLK3_OTAR.
*/


/** \brief FB3C, CPUx Overlay Mask Register 3 */

/** Alias (User Manual Name) for CPU1_BLK3_OMASK.
* To use register names with standard convension, please use CPU1_BLK3_OMASK.
*/


/** \brief FB40, CPUx Redirected Address Base Register 4 */

/** Alias (User Manual Name) for CPU1_BLK4_RABR.
* To use register names with standard convension, please use CPU1_BLK4_RABR.
*/


/** \brief FB44, CPUx Overlay Target Address Register 4 */

/** Alias (User Manual Name) for CPU1_BLK4_OTAR.
* To use register names with standard convension, please use CPU1_BLK4_OTAR.
*/


/** \brief FB48, CPUx Overlay Mask Register 4 */

/** Alias (User Manual Name) for CPU1_BLK4_OMASK.
* To use register names with standard convension, please use CPU1_BLK4_OMASK.
*/


/** \brief FB4C, CPUx Redirected Address Base Register 5 */

/** Alias (User Manual Name) for CPU1_BLK5_RABR.
* To use register names with standard convension, please use CPU1_BLK5_RABR.
*/


/** \brief FB50, CPUx Overlay Target Address Register 5 */

/** Alias (User Manual Name) for CPU1_BLK5_OTAR.
* To use register names with standard convension, please use CPU1_BLK5_OTAR.
*/


/** \brief FB54, CPUx Overlay Mask Register 5 */

/** Alias (User Manual Name) for CPU1_BLK5_OMASK.
* To use register names with standard convension, please use CPU1_BLK5_OMASK.
*/


/** \brief FB58, CPUx Redirected Address Base Register 6 */

/** Alias (User Manual Name) for CPU1_BLK6_RABR.
* To use register names with standard convension, please use CPU1_BLK6_RABR.
*/


/** \brief FB5C, CPUx Overlay Target Address Register 6 */

/** Alias (User Manual Name) for CPU1_BLK6_OTAR.
* To use register names with standard convension, please use CPU1_BLK6_OTAR.
*/


/** \brief FB60, CPUx Overlay Mask Register 6 */

/** Alias (User Manual Name) for CPU1_BLK6_OMASK.
* To use register names with standard convension, please use CPU1_BLK6_OMASK.
*/


/** \brief FB64, CPUx Redirected Address Base Register 7 */

/** Alias (User Manual Name) for CPU1_BLK7_RABR.
* To use register names with standard convension, please use CPU1_BLK7_RABR.
*/


/** \brief FB68, CPUx Overlay Target Address Register 7 */

/** Alias (User Manual Name) for CPU1_BLK7_OTAR.
* To use register names with standard convension, please use CPU1_BLK7_OTAR.
*/


/** \brief FB6C, CPUx Overlay Mask Register 7 */

/** Alias (User Manual Name) for CPU1_BLK7_OMASK.
* To use register names with standard convension, please use CPU1_BLK7_OMASK.
*/


/** \brief FB70, CPUx Redirected Address Base Register 8 */

/** Alias (User Manual Name) for CPU1_BLK8_RABR.
* To use register names with standard convension, please use CPU1_BLK8_RABR.
*/


/** \brief FB74, CPUx Overlay Target Address Register 8 */

/** Alias (User Manual Name) for CPU1_BLK8_OTAR.
* To use register names with standard convension, please use CPU1_BLK8_OTAR.
*/


/** \brief FB78, CPUx Overlay Mask Register 8 */

/** Alias (User Manual Name) for CPU1_BLK8_OMASK.
* To use register names with standard convension, please use CPU1_BLK8_OMASK.
*/


/** \brief FB7C, CPUx Redirected Address Base Register 9 */

/** Alias (User Manual Name) for CPU1_BLK9_RABR.
* To use register names with standard convension, please use CPU1_BLK9_RABR.
*/


/** \brief FB80, CPUx Overlay Target Address Register 9 */

/** Alias (User Manual Name) for CPU1_BLK9_OTAR.
* To use register names with standard convension, please use CPU1_BLK9_OTAR.
*/


/** \brief FB84, CPUx Overlay Mask Register 9 */

/** Alias (User Manual Name) for CPU1_BLK9_OMASK.
* To use register names with standard convension, please use CPU1_BLK9_OMASK.
*/


/** \brief FB88, CPUx Redirected Address Base Register 10 */

/** Alias (User Manual Name) for CPU1_BLK10_RABR.
* To use register names with standard convension, please use CPU1_BLK10_RABR.
*/


/** \brief FB8C, CPUx Overlay Target Address Register 10 */

/** Alias (User Manual Name) for CPU1_BLK10_OTAR.
* To use register names with standard convension, please use CPU1_BLK10_OTAR.
*/


/** \brief FB90, CPUx Overlay Mask Register 10 */

/** Alias (User Manual Name) for CPU1_BLK10_OMASK.
* To use register names with standard convension, please use CPU1_BLK10_OMASK.
*/


/** \brief FB94, CPUx Redirected Address Base Register 11 */

/** Alias (User Manual Name) for CPU1_BLK11_RABR.
* To use register names with standard convension, please use CPU1_BLK11_RABR.
*/


/** \brief FB98, CPUx Overlay Target Address Register 11 */

/** Alias (User Manual Name) for CPU1_BLK11_OTAR.
* To use register names with standard convension, please use CPU1_BLK11_OTAR.
*/


/** \brief FB9C, CPUx Overlay Mask Register 11 */

/** Alias (User Manual Name) for CPU1_BLK11_OMASK.
* To use register names with standard convension, please use CPU1_BLK11_OMASK.
*/


/** \brief FBA0, CPUx Redirected Address Base Register 12 */

/** Alias (User Manual Name) for CPU1_BLK12_RABR.
* To use register names with standard convension, please use CPU1_BLK12_RABR.
*/


/** \brief FBA4, CPUx Overlay Target Address Register 12 */

/** Alias (User Manual Name) for CPU1_BLK12_OTAR.
* To use register names with standard convension, please use CPU1_BLK12_OTAR.
*/


/** \brief FBA8, CPUx Overlay Mask Register 12 */

/** Alias (User Manual Name) for CPU1_BLK12_OMASK.
* To use register names with standard convension, please use CPU1_BLK12_OMASK.
*/


/** \brief FBAC, CPUx Redirected Address Base Register 13 */

/** Alias (User Manual Name) for CPU1_BLK13_RABR.
* To use register names with standard convension, please use CPU1_BLK13_RABR.
*/


/** \brief FBB0, CPUx Overlay Target Address Register 13 */

/** Alias (User Manual Name) for CPU1_BLK13_OTAR.
* To use register names with standard convension, please use CPU1_BLK13_OTAR.
*/


/** \brief FBB4, CPUx Overlay Mask Register 13 */

/** Alias (User Manual Name) for CPU1_BLK13_OMASK.
* To use register names with standard convension, please use CPU1_BLK13_OMASK.
*/


/** \brief FBB8, CPUx Redirected Address Base Register 14 */

/** Alias (User Manual Name) for CPU1_BLK14_RABR.
* To use register names with standard convension, please use CPU1_BLK14_RABR.
*/


/** \brief FBBC, CPUx Overlay Target Address Register 14 */

/** Alias (User Manual Name) for CPU1_BLK14_OTAR.
* To use register names with standard convension, please use CPU1_BLK14_OTAR.
*/


/** \brief FBC0, CPUx Overlay Mask Register 14 */

/** Alias (User Manual Name) for CPU1_BLK14_OMASK.
* To use register names with standard convension, please use CPU1_BLK14_OMASK.
*/


/** \brief FBC4, CPUx Redirected Address Base Register 15 */

/** Alias (User Manual Name) for CPU1_BLK15_RABR.
* To use register names with standard convension, please use CPU1_BLK15_RABR.
*/


/** \brief FBC8, CPUx Overlay Target Address Register 15 */

/** Alias (User Manual Name) for CPU1_BLK15_OTAR.
* To use register names with standard convension, please use CPU1_BLK15_OTAR.
*/


/** \brief FBCC, CPUx Overlay Mask Register 15 */

/** Alias (User Manual Name) for CPU1_BLK15_OMASK.
* To use register names with standard convension, please use CPU1_BLK15_OMASK.
*/


/** \brief FBD0, CPUx Redirected Address Base Register 16 */

/** Alias (User Manual Name) for CPU1_BLK16_RABR.
* To use register names with standard convension, please use CPU1_BLK16_RABR.
*/


/** \brief FBD4, CPUx Overlay Target Address Register 16 */

/** Alias (User Manual Name) for CPU1_BLK16_OTAR.
* To use register names with standard convension, please use CPU1_BLK16_OTAR.
*/


/** \brief FBD8, CPUx Overlay Mask Register 16 */

/** Alias (User Manual Name) for CPU1_BLK16_OMASK.
* To use register names with standard convension, please use CPU1_BLK16_OMASK.
*/


/** \brief FBDC, CPUx Redirected Address Base Register 17 */

/** Alias (User Manual Name) for CPU1_BLK17_RABR.
* To use register names with standard convension, please use CPU1_BLK17_RABR.
*/


/** \brief FBE0, CPUx Overlay Target Address Register 17 */

/** Alias (User Manual Name) for CPU1_BLK17_OTAR.
* To use register names with standard convension, please use CPU1_BLK17_OTAR.
*/


/** \brief FBE4, CPUx Overlay Mask Register 17 */

/** Alias (User Manual Name) for CPU1_BLK17_OMASK.
* To use register names with standard convension, please use CPU1_BLK17_OMASK.
*/


/** \brief FBE8, CPUx Redirected Address Base Register 18 */

/** Alias (User Manual Name) for CPU1_BLK18_RABR.
* To use register names with standard convension, please use CPU1_BLK18_RABR.
*/


/** \brief FBEC, CPUx Overlay Target Address Register 18 */

/** Alias (User Manual Name) for CPU1_BLK18_OTAR.
* To use register names with standard convension, please use CPU1_BLK18_OTAR.
*/


/** \brief FBF0, CPUx Overlay Mask Register 18 */

/** Alias (User Manual Name) for CPU1_BLK18_OMASK.
* To use register names with standard convension, please use CPU1_BLK18_OMASK.
*/


/** \brief FBF4, CPUx Redirected Address Base Register 19 */

/** Alias (User Manual Name) for CPU1_BLK19_RABR.
* To use register names with standard convension, please use CPU1_BLK19_RABR.
*/


/** \brief FBF8, CPUx Overlay Target Address Register 19 */

/** Alias (User Manual Name) for CPU1_BLK19_OTAR.
* To use register names with standard convension, please use CPU1_BLK19_OTAR.
*/


/** \brief FBFC, CPUx Overlay Mask Register 19 */

/** Alias (User Manual Name) for CPU1_BLK19_OMASK.
* To use register names with standard convension, please use CPU1_BLK19_OMASK.
*/


/** \brief FC00, CPUx Redirected Address Base Register 20 */

/** Alias (User Manual Name) for CPU1_BLK20_RABR.
* To use register names with standard convension, please use CPU1_BLK20_RABR.
*/


/** \brief FC04, CPUx Overlay Target Address Register 20 */

/** Alias (User Manual Name) for CPU1_BLK20_OTAR.
* To use register names with standard convension, please use CPU1_BLK20_OTAR.
*/


/** \brief FC08, CPUx Overlay Mask Register 20 */

/** Alias (User Manual Name) for CPU1_BLK20_OMASK.
* To use register names with standard convension, please use CPU1_BLK20_OMASK.
*/


/** \brief FC0C, CPUx Redirected Address Base Register 21 */

/** Alias (User Manual Name) for CPU1_BLK21_RABR.
* To use register names with standard convension, please use CPU1_BLK21_RABR.
*/


/** \brief FC10, CPUx Overlay Target Address Register 21 */

/** Alias (User Manual Name) for CPU1_BLK21_OTAR.
* To use register names with standard convension, please use CPU1_BLK21_OTAR.
*/


/** \brief FC14, CPUx Overlay Mask Register 21 */

/** Alias (User Manual Name) for CPU1_BLK21_OMASK.
* To use register names with standard convension, please use CPU1_BLK21_OMASK.
*/


/** \brief FC18, CPUx Redirected Address Base Register 22 */

/** Alias (User Manual Name) for CPU1_BLK22_RABR.
* To use register names with standard convension, please use CPU1_BLK22_RABR.
*/


/** \brief FC1C, CPUx Overlay Target Address Register 22 */

/** Alias (User Manual Name) for CPU1_BLK22_OTAR.
* To use register names with standard convension, please use CPU1_BLK22_OTAR.
*/


/** \brief FC20, CPUx Overlay Mask Register 22 */

/** Alias (User Manual Name) for CPU1_BLK22_OMASK.
* To use register names with standard convension, please use CPU1_BLK22_OMASK.
*/


/** \brief FC24, CPUx Redirected Address Base Register 23 */

/** Alias (User Manual Name) for CPU1_BLK23_RABR.
* To use register names with standard convension, please use CPU1_BLK23_RABR.
*/


/** \brief FC28, CPUx Overlay Target Address Register 23 */

/** Alias (User Manual Name) for CPU1_BLK23_OTAR.
* To use register names with standard convension, please use CPU1_BLK23_OTAR.
*/


/** \brief FC2C, CPUx Overlay Mask Register 23 */

/** Alias (User Manual Name) for CPU1_BLK23_OMASK.
* To use register names with standard convension, please use CPU1_BLK23_OMASK.
*/


/** \brief FC30, CPUx Redirected Address Base Register 24 */

/** Alias (User Manual Name) for CPU1_BLK24_RABR.
* To use register names with standard convension, please use CPU1_BLK24_RABR.
*/


/** \brief FC34, CPUx Overlay Target Address Register 24 */

/** Alias (User Manual Name) for CPU1_BLK24_OTAR.
* To use register names with standard convension, please use CPU1_BLK24_OTAR.
*/


/** \brief FC38, CPUx Overlay Mask Register 24 */

/** Alias (User Manual Name) for CPU1_BLK24_OMASK.
* To use register names with standard convension, please use CPU1_BLK24_OMASK.
*/


/** \brief FC3C, CPUx Redirected Address Base Register 25 */

/** Alias (User Manual Name) for CPU1_BLK25_RABR.
* To use register names with standard convension, please use CPU1_BLK25_RABR.
*/


/** \brief FC40, CPUx Overlay Target Address Register 25 */

/** Alias (User Manual Name) for CPU1_BLK25_OTAR.
* To use register names with standard convension, please use CPU1_BLK25_OTAR.
*/


/** \brief FC44, CPUx Overlay Mask Register 25 */

/** Alias (User Manual Name) for CPU1_BLK25_OMASK.
* To use register names with standard convension, please use CPU1_BLK25_OMASK.
*/


/** \brief FC48, CPUx Redirected Address Base Register 26 */

/** Alias (User Manual Name) for CPU1_BLK26_RABR.
* To use register names with standard convension, please use CPU1_BLK26_RABR.
*/


/** \brief FC4C, CPUx Overlay Target Address Register 26 */

/** Alias (User Manual Name) for CPU1_BLK26_OTAR.
* To use register names with standard convension, please use CPU1_BLK26_OTAR.
*/


/** \brief FC50, CPUx Overlay Mask Register 26 */

/** Alias (User Manual Name) for CPU1_BLK26_OMASK.
* To use register names with standard convension, please use CPU1_BLK26_OMASK.
*/


/** \brief FC54, CPUx Redirected Address Base Register 27 */

/** Alias (User Manual Name) for CPU1_BLK27_RABR.
* To use register names with standard convension, please use CPU1_BLK27_RABR.
*/


/** \brief FC58, CPUx Overlay Target Address Register 27 */

/** Alias (User Manual Name) for CPU1_BLK27_OTAR.
* To use register names with standard convension, please use CPU1_BLK27_OTAR.
*/


/** \brief FC5C, CPUx Overlay Mask Register 27 */

/** Alias (User Manual Name) for CPU1_BLK27_OMASK.
* To use register names with standard convension, please use CPU1_BLK27_OMASK.
*/


/** \brief FC60, CPUx Redirected Address Base Register 28 */

/** Alias (User Manual Name) for CPU1_BLK28_RABR.
* To use register names with standard convension, please use CPU1_BLK28_RABR.
*/


/** \brief FC64, CPUx Overlay Target Address Register 28 */

/** Alias (User Manual Name) for CPU1_BLK28_OTAR.
* To use register names with standard convension, please use CPU1_BLK28_OTAR.
*/


/** \brief FC68, CPUx Overlay Mask Register 28 */

/** Alias (User Manual Name) for CPU1_BLK28_OMASK.
* To use register names with standard convension, please use CPU1_BLK28_OMASK.
*/


/** \brief FC6C, CPUx Redirected Address Base Register 29 */

/** Alias (User Manual Name) for CPU1_BLK29_RABR.
* To use register names with standard convension, please use CPU1_BLK29_RABR.
*/


/** \brief FC70, CPUx Overlay Target Address Register 29 */

/** Alias (User Manual Name) for CPU1_BLK29_OTAR.
* To use register names with standard convension, please use CPU1_BLK29_OTAR.
*/


/** \brief FC74, CPUx Overlay Mask Register 29 */

/** Alias (User Manual Name) for CPU1_BLK29_OMASK.
* To use register names with standard convension, please use CPU1_BLK29_OMASK.
*/


/** \brief FC78, CPUx Redirected Address Base Register 30 */

/** Alias (User Manual Name) for CPU1_BLK30_RABR.
* To use register names with standard convension, please use CPU1_BLK30_RABR.
*/


/** \brief FC7C, CPUx Overlay Target Address Register 30 */

/** Alias (User Manual Name) for CPU1_BLK30_OTAR.
* To use register names with standard convension, please use CPU1_BLK30_OTAR.
*/


/** \brief FC80, CPUx Overlay Mask Register 30 */

/** Alias (User Manual Name) for CPU1_BLK30_OMASK.
* To use register names with standard convension, please use CPU1_BLK30_OMASK.
*/


/** \brief FC84, CPUx Redirected Address Base Register 31 */

/** Alias (User Manual Name) for CPU1_BLK31_RABR.
* To use register names with standard convension, please use CPU1_BLK31_RABR.
*/


/** \brief FC88, CPUx Overlay Target Address Register 31 */

/** Alias (User Manual Name) for CPU1_BLK31_OTAR.
* To use register names with standard convension, please use CPU1_BLK31_OTAR.
*/


/** \brief FC8C, CPUx Overlay Mask Register 31 */

/** Alias (User Manual Name) for CPU1_BLK31_OMASK.
* To use register names with standard convension, please use CPU1_BLK31_OMASK.
*/


/** \brief 1030, CPUx SRI Error Generation Register */


/** \brief 8004, CPUx Task Address Space Identifier Register */


/** \brief 8100, CPUx Data Access CacheabilityRegister */


/** \brief 8104, CPUx Code Access CacheabilityRegister */


/** \brief 8108, CPUx  Peripheral Space Identifier register */


/** \brief 9000, CPUx Data Control Register 2 */


/** \brief 900C, CPUx SIST Mode Access Control Register */


/** \brief 9010, CPUx Data Synchronous Trap Register */


/** \brief 9018, CPUx Data Asynchronous Trap Register */


/** \brief 901C, CPUx Data Error Address Register */


/** \brief 9020, CPUx Data Integrity Error Address Register */


/** \brief 9024, CPUx Data Integrity Error Trap Register */


/** \brief 9040, CPUx Data Memory Control Register */


/** \brief 9200, CPUx Program Synchronous Trap Register */


/** \brief 9204, CPUx Program Control 1 */


/** \brief 9208, CPUx Program Control 2 */


/** \brief 920C, CPUx Program Control 0 */


/** \brief 9210, CPUx Program Integrity Error Address Register */


/** \brief 9214, CPUx Program Integrity Error Trap Register */


/** \brief 9400, CPUx Compatibility Control Register */


/** \brief A000, CPUx Trap Control Register */


/** \brief A004, CPUx Trapping Instruction Program Counter Register */


/** \brief A008, CPUx Trapping Instruction Opcode Register */


/** \brief A010, CPUx Trapping Instruction Operand Register */


/** \brief A014, CPUx Trapping Instruction Operand Register */


/** \brief A018, CPUx Trapping Instruction Operand Register */


/** \brief C000, CPUx Data Protection Range 0, Lower Bound Register */


/** \brief C004, CPUx Data Protection Range 0, Upper Bound Register */


/** \brief C008, CPUx Data Protection Range 1, Lower Bound Register */


/** \brief C00C, CPUx Data Protection Range 1, Upper Bound Register */


/** \brief C010, CPUx Data Protection Range 2, Lower Bound Register */


/** \brief C014, CPUx Data Protection Range 2, Upper Bound Register */


/** \brief C018, CPUx Data Protection Range 3, Lower Bound Register */


/** \brief C01C, CPUx Data Protection Range 3, Upper Bound Register */


/** \brief C020, CPUx Data Protection Range 4, Lower Bound Register */


/** \brief C024, CPUx Data Protection Range 4, Upper Bound Register */


/** \brief C028, CPUx Data Protection Range 5, Lower Bound Register */


/** \brief C02C, CPUx Data Protection Range 5, Upper Bound Register */


/** \brief C030, CPUx Data Protection Range 6, Lower Bound Register */


/** \brief C034, CPUx Data Protection Range 6, Upper Bound Register */


/** \brief C038, CPUx Data Protection Range 7, Lower Bound Register */


/** \brief C03C, CPUx Data Protection Range 7, Upper Bound Register */


/** \brief C040, CPUx Data Protection Range 8, Lower Bound Register */


/** \brief C044, CPUx Data Protection Range 8, Upper Bound Register */


/** \brief C048, CPUx Data Protection Range 9, Lower Bound Register */


/** \brief C04C, CPUx Data Protection Range 9, Upper Bound Register */


/** \brief C050, CPUx Data Protection Range 10, Lower Bound Register */


/** \brief C054, CPUx Data Protection Range 10, Upper Bound Register */


/** \brief C058, CPUx Data Protection Range 11, Lower Bound Register */


/** \brief C05C, CPUx Data Protection Range 11, Upper Bound Register */


/** \brief C060, CPUx Data Protection Range 12, Lower Bound Register */


/** \brief C064, CPUx Data Protection Range 12, Upper Bound Register */


/** \brief C068, CPUx Data Protection Range 13, Lower Bound Register */


/** \brief C06C, CPUx Data Protection Range 13, Upper Bound Register */


/** \brief C070, CPUx Data Protection Range 14, Lower Bound Register */


/** \brief C074, CPUx Data Protection Range 14, Upper Bound Register */


/** \brief C078, CPUx Data Protection Range 15, Lower Bound Register */


/** \brief C07C, CPUx Data Protection Range 15, Upper Bound Register */


/** \brief C080, CPUx Data Protection Range 16, Lower Bound Register */


/** \brief C084, CPUx Data Protection Range 16, Upper Bound Register */


/** \brief C088, CPUx Data Protection Range 17, Lower Bound Register */


/** \brief C08C, CPUx Data Protection Range 17, Upper Bound Register */


/** \brief D000, CPUx Code Protection Range 0 Lower Bound Register */


/** \brief D004, CPUx Code Protection Range 0 Upper Bound Register */


/** \brief D008, CPUx Code Protection Range 1 Lower Bound Register */


/** \brief D00C, CPUx Code Protection Range 1 Upper Bound Register */


/** \brief D010, CPUx Code Protection Range 2 Lower Bound Register */


/** \brief D014, CPUx Code Protection Range 2 Upper Bound Register */


/** \brief D018, CPUx Code Protection Range 3 Lower Bound Register */


/** \brief D01C, CPUx Code Protection Range 3 Upper Bound Register */


/** \brief D020, CPUx Code Protection Range 4 Lower Bound Register */


/** \brief D024, CPUx Code Protection Range 4 Upper Bound Register */


/** \brief D028, CPUx Code Protection Range 5 Lower Bound Register */


/** \brief D02C, CPUx Code Protection Range 5 Upper Bound Register */


/** \brief D030, CPUx Code Protection Range 6 Lower Bound Register */


/** \brief D034, CPUx Code Protection Range 6 Upper Bound Register */


/** \brief D038, CPUx Code Protection Range 7 Lower Bound Register */


/** \brief D03C, CPUx Code Protection Range 7 Upper Bound Register */


/** \brief D040, CPUx Code Protection Range 8 Lower Bound Register */


/** \brief D044, CPUx Code Protection Range 8 Upper Bound Register */


/** \brief D048, CPUx Code Protection Range 9 Lower Bound Register */


/** \brief D04C, CPUx Code Protection Range 9 Upper Bound Register */


/** \brief E000, CPUx Code Protection Execute Enable Register Set 0 */


/** \brief E004, CPUx Code Protection Execute Enable Register Set 1 */


/** \brief E008, CPUx Code Protection Execute Enable Register Set 2 */


/** \brief E00C, CPUx Code Protection Execute Enable Register Set 3 */


/** \brief E010, CPUx Data Protection Read Enable Register Set 0 */


/** \brief E014, CPUx Data Protection Read Enable Register Set 1 */


/** \brief E018, CPUx Data Protection Read Enable Register Set 2 */


/** \brief E01C, CPUx Data Protection Read Enable Register Set 3 */


/** \brief E020, CPUx Data Protection Write Enable Register Set 0 */


/** \brief E024, CPUx Data Protection Write Enable Register Set 1 */


/** \brief E028, CPUx Data Protection Write Enable Register Set 2 */


/** \brief E02C, CPUx Data Protection Write Enable Register Set 3 */


/** \brief E040, CPUx Code Protection Execute Enable Register Set 4 */


/** \brief E044, CPUx Code Protection Execute Enable Register Set 5 */


/** \brief E050, CPUx Data Protection Read Enable Register Set 4 */


/** \brief E054, CPUx Data Protection Read Enable Register Set 5 */


/** \brief E060, CPUx Data Protection Write Enable Register Set 4 */


/** \brief E064, CPUx Data Protection Write Enable Register Set 5 */


/** \brief E400, CPUx Temporal Protection System Control Register */


/** \brief E404, CPUx Temporal Protection System Timer Register 0 */


/** \brief E408, CPUx Temporal Protection System Timer Register 1 */


/** \brief E40C, CPUx Temporal Protection System Timer Register 2 */


/** \brief E440, CPUx Exception Entry Timer Load Value */


/** \brief E444, CPUx Exception Entry Timer Current Value */


/** \brief E448, CPUx Exception Exit  Timer Load Value */


/** \brief E44C, CPUx Exception Exit Timer Current Value */


/** \brief E450, CPUx Exception Timer Class Enable Register */


/** \brief E454, CPUx Exception Timer Status Register */


/** \brief E458, CPUx Exception Timer FCX Register */


/** \brief F000, CPUx Trigger Event 0 */

/** Alias (User Manual Name) for CPU1_TR0_EVT.
* To use register names with standard convension, please use CPU1_TR0_EVT.
*/


/** \brief F004, CPUx Trigger Address 0 */

/** Alias (User Manual Name) for CPU1_TR0_ADR.
* To use register names with standard convension, please use CPU1_TR0_ADR.
*/


/** \brief F008, CPUx Trigger Event 1 */

/** Alias (User Manual Name) for CPU1_TR1_EVT.
* To use register names with standard convension, please use CPU1_TR1_EVT.
*/


/** \brief F00C, CPUx Trigger Address 1 */

/** Alias (User Manual Name) for CPU1_TR1_ADR.
* To use register names with standard convension, please use CPU1_TR1_ADR.
*/


/** \brief F010, CPUx Trigger Event 2 */

/** Alias (User Manual Name) for CPU1_TR2_EVT.
* To use register names with standard convension, please use CPU1_TR2_EVT.
*/


/** \brief F014, CPUx Trigger Address 2 */

/** Alias (User Manual Name) for CPU1_TR2_ADR.
* To use register names with standard convension, please use CPU1_TR2_ADR.
*/


/** \brief F018, CPUx Trigger Event 3 */

/** Alias (User Manual Name) for CPU1_TR3_EVT.
* To use register names with standard convension, please use CPU1_TR3_EVT.
*/


/** \brief F01C, CPUx Trigger Address 3 */

/** Alias (User Manual Name) for CPU1_TR3_ADR.
* To use register names with standard convension, please use CPU1_TR3_ADR.
*/


/** \brief F020, CPUx Trigger Event 4 */

/** Alias (User Manual Name) for CPU1_TR4_EVT.
* To use register names with standard convension, please use CPU1_TR4_EVT.
*/


/** \brief F024, CPUx Trigger Address 4 */

/** Alias (User Manual Name) for CPU1_TR4_ADR.
* To use register names with standard convension, please use CPU1_TR4_ADR.
*/


/** \brief F028, CPUx Trigger Event 5 */

/** Alias (User Manual Name) for CPU1_TR5_EVT.
* To use register names with standard convension, please use CPU1_TR5_EVT.
*/


/** \brief F02C, CPUx Trigger Address 5 */

/** Alias (User Manual Name) for CPU1_TR5_ADR.
* To use register names with standard convension, please use CPU1_TR5_ADR.
*/


/** \brief F030, CPUx Trigger Event 6 */

/** Alias (User Manual Name) for CPU1_TR6_EVT.
* To use register names with standard convension, please use CPU1_TR6_EVT.
*/


/** \brief F034, CPUx Trigger Address 6 */

/** Alias (User Manual Name) for CPU1_TR6_ADR.
* To use register names with standard convension, please use CPU1_TR6_ADR.
*/


/** \brief F038, CPUx Trigger Event 7 */

/** Alias (User Manual Name) for CPU1_TR7_EVT.
* To use register names with standard convension, please use CPU1_TR7_EVT.
*/


/** \brief F03C, CPUx Trigger Address 7 */

/** Alias (User Manual Name) for CPU1_TR7_ADR.
* To use register names with standard convension, please use CPU1_TR7_ADR.
*/


/** \brief FC00, CPUx Counter Control */


/** \brief FC04, CPUx CPU Clock Cycle Count */


/** \brief FC08, CPUx Instruction Count */


/** \brief FC0C, CPUx Multi-Count Register 1 */


/** \brief FC10, CPUx Multi-Count Register 2 */


/** \brief FC14, CPUx Multi-Count Register 3 */


/** \brief FD00, CPUx Debug Status Register */


/** \brief FD08, CPUx External Event Register */


/** \brief FD0C, CPUx Core Register Access Event */


/** \brief FD10, CPUx Software Debug Event */


/** \brief FD30, CPUx TriggerAddressx */


/** \brief FD40, CPUx Debug Monitor Start Address */


/** \brief FD44, CPUx Debug Context Save Area Pointer */


/** \brief FD48, CPUx Debug Trap Control Register */


/** \brief FE00, CPUx Previous Context Information Register */


/** \brief FE04, CPUx Program Status Word */


/** \brief FE08, CPUx Program Counter */


/** \brief FE14, CPUx System Configuration Register */


/** \brief FE18, CPUx Identification Register TC1.6.2P */


/** \brief FE1C, CPUx Core Identification Register */


/** \brief FE20, CPUx Base Interrupt Vector Table Pointer */


/** \brief FE24, CPUx Base Trap Vector Table Pointer */


/** \brief FE28, CPUx Interrupt Stack Pointer */


/** \brief FE2C, CPUx Interrupt Control Register */


/** \brief FE38, CPUx Free CSA List Head Pointer */


/** \brief FE3C, CPUx Free CSA List Limit Pointer */


/** \brief FE50, CPUx Customer ID register */


/** \brief FF00, CPUx Data General Purpose Register 0 */


/** \brief FF04, CPUx Data General Purpose Register 1 */


/** \brief FF08, CPUx Data General Purpose Register 2 */


/** \brief FF0C, CPUx Data General Purpose Register 3 */


/** \brief FF10, CPUx Data General Purpose Register 4 */


/** \brief FF14, CPUx Data General Purpose Register 5 */


/** \brief FF18, CPUx Data General Purpose Register 6 */


/** \brief FF1C, CPUx Data General Purpose Register 7 */


/** \brief FF20, CPUx Data General Purpose Register 8 */


/** \brief FF24, CPUx Data General Purpose Register 9 */


/** \brief FF28, CPUx Data General Purpose Register 10 */


/** \brief FF2C, CPUx Data General Purpose Register 11 */


/** \brief FF30, CPUx Data General Purpose Register 12 */


/** \brief FF34, CPUx Data General Purpose Register 13 */


/** \brief FF38, CPUx Data General Purpose Register 14 */


/** \brief FF3C, CPUx Data General Purpose Register 15 */


/** \brief FF80, CPUx Address General Purpose Register 0 */


/** \brief FF84, CPUx Address General Purpose Register 1 */


/** \brief FF88, CPUx Address General Purpose Register 2 */


/** \brief FF8C, CPUx Address General Purpose Register 3 */


/** \brief FF90, CPUx Address General Purpose Register 4 */


/** \brief FF94, CPUx Address General Purpose Register 5 */


/** \brief FF98, CPUx Address General Purpose Register 6 */


/** \brief FF9C, CPUx Address General Purpose Register 7 */


/** \brief FFA0, CPUx Address General Purpose Register 8 */


/** \brief FFA4, CPUx Address General Purpose Register 9 */


/** \brief FFA8, CPUx Address General Purpose Register 10 */


/** \brief FFAC, CPUx Address General Purpose Register 11 */


/** \brief FFB0, CPUx Address General Purpose Register 12 */


/** \brief FFB4, CPUx Address General Purpose Register 13 */


/** \brief FFB8, CPUx Address General Purpose Register 14 */


/** \brief FFBC, CPUx Address General Purpose Register 15 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_Registers_Cfg_Cpu2
 * \{  */
/** \brief 1100, CPUx Flash Configuration Register 0 */


/** \brief 1104, CPUx Flash Configuration Register 1 */


/** \brief 1108, CPUx Flash Configuration Register 2 */


/** \brief 110C, CPUx Flash Configuration Register 3 */


/** \brief 1110, CPUx Flash Configuration Register 4 */


/** \brief D000, CPUx  Reset Register 0 */


/** \brief D004, CPUx  Reset Register 1 */


/** \brief D008, CPUx Reset Clear Register */


/** \brief E000, CPUx Safety Protection SPR Region Lower Address Register 0 */

/** Alias (User Manual Name) for CPU2_RGN0_LA.
* To use register names with standard convension, please use CPU2_RGN0_LA.
*/


/** \brief E004, CPUx Safety Protection SPR Region Upper Address Register 0 */

/** Alias (User Manual Name) for CPU2_RGN0_UA.
* To use register names with standard convension, please use CPU2_RGN0_UA.
*/


/** \brief E008, CPUx Safety Protection SPR Region Write Access Enable Register A0 */

/** Alias (User Manual Name) for CPU2_RGN0_ACCENA.
* To use register names with standard convension, please use CPU2_RGN0_ACCENA.
*/


/** \brief E00C, CPUx Safety Protection SPR Region Write Access Enable Register B0 */

/** Alias (User Manual Name) for CPU2_RGN0_ACCENB.
* To use register names with standard convension, please use CPU2_RGN0_ACCENB.
*/


/** \brief E010, CPUx Safety Protection SPR Region Lower Address Register 1 */

/** Alias (User Manual Name) for CPU2_RGN1_LA.
* To use register names with standard convension, please use CPU2_RGN1_LA.
*/


/** \brief E014, CPUx Safety Protection SPR Region Upper Address Register 1 */

/** Alias (User Manual Name) for CPU2_RGN1_UA.
* To use register names with standard convension, please use CPU2_RGN1_UA.
*/


/** \brief E018, CPUx Safety Protection SPR Region Write Access Enable Register A1 */

/** Alias (User Manual Name) for CPU2_RGN1_ACCENA.
* To use register names with standard convension, please use CPU2_RGN1_ACCENA.
*/


/** \brief E01C, CPUx Safety Protection SPR Region Write Access Enable Register B1 */

/** Alias (User Manual Name) for CPU2_RGN1_ACCENB.
* To use register names with standard convension, please use CPU2_RGN1_ACCENB.
*/


/** \brief E020, CPUx Safety Protection SPR Region Lower Address Register 2 */

/** Alias (User Manual Name) for CPU2_RGN2_LA.
* To use register names with standard convension, please use CPU2_RGN2_LA.
*/


/** \brief E024, CPUx Safety Protection SPR Region Upper Address Register 2 */

/** Alias (User Manual Name) for CPU2_RGN2_UA.
* To use register names with standard convension, please use CPU2_RGN2_UA.
*/


/** \brief E028, CPUx Safety Protection SPR Region Write Access Enable Register A2 */

/** Alias (User Manual Name) for CPU2_RGN2_ACCENA.
* To use register names with standard convension, please use CPU2_RGN2_ACCENA.
*/


/** \brief E02C, CPUx Safety Protection SPR Region Write Access Enable Register B2 */

/** Alias (User Manual Name) for CPU2_RGN2_ACCENB.
* To use register names with standard convension, please use CPU2_RGN2_ACCENB.
*/


/** \brief E030, CPUx Safety Protection SPR Region Lower Address Register 3 */

/** Alias (User Manual Name) for CPU2_RGN3_LA.
* To use register names with standard convension, please use CPU2_RGN3_LA.
*/


/** \brief E034, CPUx Safety Protection SPR Region Upper Address Register 3 */

/** Alias (User Manual Name) for CPU2_RGN3_UA.
* To use register names with standard convension, please use CPU2_RGN3_UA.
*/


/** \brief E038, CPUx Safety Protection SPR Region Write Access Enable Register A3 */

/** Alias (User Manual Name) for CPU2_RGN3_ACCENA.
* To use register names with standard convension, please use CPU2_RGN3_ACCENA.
*/


/** \brief E03C, CPUx Safety Protection SPR Region Write Access Enable Register B3 */

/** Alias (User Manual Name) for CPU2_RGN3_ACCENB.
* To use register names with standard convension, please use CPU2_RGN3_ACCENB.
*/


/** \brief E040, CPUx Safety Protection SPR Region Lower Address Register 4 */

/** Alias (User Manual Name) for CPU2_RGN4_LA.
* To use register names with standard convension, please use CPU2_RGN4_LA.
*/


/** \brief E044, CPUx Safety Protection SPR Region Upper Address Register 4 */

/** Alias (User Manual Name) for CPU2_RGN4_UA.
* To use register names with standard convension, please use CPU2_RGN4_UA.
*/


/** \brief E048, CPUx Safety Protection SPR Region Write Access Enable Register A4 */

/** Alias (User Manual Name) for CPU2_RGN4_ACCENA.
* To use register names with standard convension, please use CPU2_RGN4_ACCENA.
*/


/** \brief E04C, CPUx Safety Protection SPR Region Write Access Enable Register B4 */

/** Alias (User Manual Name) for CPU2_RGN4_ACCENB.
* To use register names with standard convension, please use CPU2_RGN4_ACCENB.
*/


/** \brief E050, CPUx Safety Protection SPR Region Lower Address Register 5 */

/** Alias (User Manual Name) for CPU2_RGN5_LA.
* To use register names with standard convension, please use CPU2_RGN5_LA.
*/


/** \brief E054, CPUx Safety Protection SPR Region Upper Address Register 5 */

/** Alias (User Manual Name) for CPU2_RGN5_UA.
* To use register names with standard convension, please use CPU2_RGN5_UA.
*/


/** \brief E058, CPUx Safety Protection SPR Region Write Access Enable Register A5 */

/** Alias (User Manual Name) for CPU2_RGN5_ACCENA.
* To use register names with standard convension, please use CPU2_RGN5_ACCENA.
*/


/** \brief E05C, CPUx Safety Protection SPR Region Write Access Enable Register B5 */

/** Alias (User Manual Name) for CPU2_RGN5_ACCENB.
* To use register names with standard convension, please use CPU2_RGN5_ACCENB.
*/


/** \brief E060, CPUx Safety Protection SPR Region Lower Address Register 6 */

/** Alias (User Manual Name) for CPU2_RGN6_LA.
* To use register names with standard convension, please use CPU2_RGN6_LA.
*/


/** \brief E064, CPUx Safety Protection SPR Region Upper Address Register 6 */

/** Alias (User Manual Name) for CPU2_RGN6_UA.
* To use register names with standard convension, please use CPU2_RGN6_UA.
*/


/** \brief E068, CPUx Safety Protection SPR Region Write Access Enable Register A6 */

/** Alias (User Manual Name) for CPU2_RGN6_ACCENA.
* To use register names with standard convension, please use CPU2_RGN6_ACCENA.
*/


/** \brief E06C, CPUx Safety Protection SPR Region Write Access Enable Register B6 */

/** Alias (User Manual Name) for CPU2_RGN6_ACCENB.
* To use register names with standard convension, please use CPU2_RGN6_ACCENB.
*/


/** \brief E070, CPUx Safety Protection SPR Region Lower Address Register 7 */

/** Alias (User Manual Name) for CPU2_RGN7_LA.
* To use register names with standard convension, please use CPU2_RGN7_LA.
*/


/** \brief E074, CPUx Safety Protection SPR Region Upper Address Register 7 */

/** Alias (User Manual Name) for CPU2_RGN7_UA.
* To use register names with standard convension, please use CPU2_RGN7_UA.
*/


/** \brief E078, CPUx Safety Protection SPR Region Write Access Enable Register A7 */

/** Alias (User Manual Name) for CPU2_RGN7_ACCENA.
* To use register names with standard convension, please use CPU2_RGN7_ACCENA.
*/


/** \brief E07C, CPUx Safety Protection SPR Region Write Access Enable Register B7 */

/** Alias (User Manual Name) for CPU2_RGN7_ACCENB.
* To use register names with standard convension, please use CPU2_RGN7_ACCENB.
*/


/** \brief E088, CPUx Safety Protection SPR Region Read Access Enable Register A0 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENA_R0.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENA_R0.
*/


/** \brief E08C, CPUx Safety Protection SPR Region Read Access Enable Register B0 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENB_R0.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENB_R0.
*/


/** \brief E098, CPUx Safety Protection SPR Region Read Access Enable Register A1 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENA_R1.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENA_R1.
*/


/** \brief E09C, CPUx Safety Protection SPR Region Read Access Enable Register B1 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENB_R1.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENB_R1.
*/


/** \brief E0A8, CPUx Safety Protection SPR Region Read Access Enable Register A2 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENA_R2.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENA_R2.
*/


/** \brief E0AC, CPUx Safety Protection SPR Region Read Access Enable Register B2 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENB_R2.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENB_R2.
*/


/** \brief E0B8, CPUx Safety Protection SPR Region Read Access Enable Register A3 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENA_R3.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENA_R3.
*/


/** \brief E0BC, CPUx Safety Protection SPR Region Read Access Enable Register B3 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENB_R3.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENB_R3.
*/


/** \brief E0C8, CPUx Safety Protection SPR Region Read Access Enable Register A4 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENA_R4.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENA_R4.
*/


/** \brief E0CC, CPUx Safety Protection SPR Region Read Access Enable Register B4 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENB_R4.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENB_R4.
*/


/** \brief E0D8, CPUx Safety Protection SPR Region Read Access Enable Register A5 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENA_R5.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENA_R5.
*/


/** \brief E0DC, CPUx Safety Protection SPR Region Read Access Enable Register B5 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENB_R5.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENB_R5.
*/


/** \brief E0E8, CPUx Safety Protection SPR Region Read Access Enable Register A6 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENA_R6.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENA_R6.
*/


/** \brief E0EC, CPUx Safety Protection SPR Region Read Access Enable Register B6 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENB_R6.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENB_R6.
*/


/** \brief E0F8, CPUx Safety Protection SPR Region Read Access Enable Register A7 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENA_R7.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENA_R7.
*/


/** \brief E0FC, CPUx Safety Protection SPR Region Read Access Enable Register B7 */

/** Alias (User Manual Name) for CPU2_SPR_SPROT_RGNACCENB_R7.
* To use register names with standard convension, please use CPU2_SPR_SPROT_RGNACCENB_R7.
*/


/** \brief E100, CPUx Safety Protection Register Access Enable Register A */


/** \brief E104, CPUx Safety Protection Region Access Enable Register B */


/** \brief E110, CPUx Safety Protection Region LPB Read Access Enable Register A */


/** \brief E114, CPUx Safety Protection Region LPB Read Access Enable Register B */


/** \brief E200, CPUx Safety Protection DLMU Region Lower Address Register 0 */


/** \brief E204, CPUx Safety protection DLMU Region Upper Address Register 0 */


/** \brief E208, CPUx Safety Protection Region DLMU Write Access Enable Register A0 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_W0.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_W0.
*/


/** \brief E20C, CPUx Safety Protection Region DLMU Write Access Enable Register B0 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_W0.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_W0.
*/


/** \brief E210, CPUx Safety Protection DLMU Region Lower Address Register 1 */


/** \brief E214, CPUx Safety protection DLMU Region Upper Address Register 1 */


/** \brief E218, CPUx Safety Protection Region DLMU Write Access Enable Register A1 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_W1.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_W1.
*/


/** \brief E21C, CPUx Safety Protection Region DLMU Write Access Enable Register B1 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_W1.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_W1.
*/


/** \brief E220, CPUx Safety Protection DLMU Region Lower Address Register 2 */


/** \brief E224, CPUx Safety protection DLMU Region Upper Address Register 2 */


/** \brief E228, CPUx Safety Protection Region DLMU Write Access Enable Register A2 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_W2.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_W2.
*/


/** \brief E22C, CPUx Safety Protection Region DLMU Write Access Enable Register B2 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_W2.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_W2.
*/


/** \brief E230, CPUx Safety Protection DLMU Region Lower Address Register 3 */


/** \brief E234, CPUx Safety protection DLMU Region Upper Address Register 3 */


/** \brief E238, CPUx Safety Protection Region DLMU Write Access Enable Register A3 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_W3.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_W3.
*/


/** \brief E23C, CPUx Safety Protection Region DLMU Write Access Enable Register B3 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_W3.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_W3.
*/


/** \brief E240, CPUx Safety Protection DLMU Region Lower Address Register 4 */


/** \brief E244, CPUx Safety protection DLMU Region Upper Address Register 4 */


/** \brief E248, CPUx Safety Protection Region DLMU Write Access Enable Register A4 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_W4.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_W4.
*/


/** \brief E24C, CPUx Safety Protection Region DLMU Write Access Enable Register B4 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_W4.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_W4.
*/


/** \brief E250, CPUx Safety Protection DLMU Region Lower Address Register 5 */


/** \brief E254, CPUx Safety protection DLMU Region Upper Address Register 5 */


/** \brief E258, CPUx Safety Protection Region DLMU Write Access Enable Register A5 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_W5.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_W5.
*/


/** \brief E25C, CPUx Safety Protection Region DLMU Write Access Enable Register B5 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_W5.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_W5.
*/


/** \brief E260, CPUx Safety Protection DLMU Region Lower Address Register 6 */


/** \brief E264, CPUx Safety protection DLMU Region Upper Address Register 6 */


/** \brief E268, CPUx Safety Protection Region DLMU Write Access Enable Register A6 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_W6.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_W6.
*/


/** \brief E26C, CPUx Safety Protection Region DLMU Write Access Enable Register B6 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_W6.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_W6.
*/


/** \brief E270, CPUx Safety Protection DLMU Region Lower Address Register 7 */


/** \brief E274, CPUx Safety protection DLMU Region Upper Address Register 7 */


/** \brief E278, CPUx Safety Protection Region DLMU Write Access Enable Register A7 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_W7.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_W7.
*/


/** \brief E27C, CPUx Safety Protection Region DLMU Write Access Enable Register B7 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_W7.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_W7.
*/


/** \brief E288, CPUx Safety Protection Region DLMU Read Access Enable Register A0 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_R0.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_R0.
*/


/** \brief E28C, CPUx Safety Protection Region DLMU Read Access Enable Register B0 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_R0.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_R0.
*/


/** \brief E298, CPUx Safety Protection Region DLMU Read Access Enable Register A1 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_R1.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_R1.
*/


/** \brief E29C, CPUx Safety Protection Region DLMU Read Access Enable Register B1 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_R1.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_R1.
*/


/** \brief E2A8, CPUx Safety Protection Region DLMU Read Access Enable Register A2 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_R2.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_R2.
*/


/** \brief E2AC, CPUx Safety Protection Region DLMU Read Access Enable Register B2 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_R2.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_R2.
*/


/** \brief E2B8, CPUx Safety Protection Region DLMU Read Access Enable Register A3 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_R3.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_R3.
*/


/** \brief E2BC, CPUx Safety Protection Region DLMU Read Access Enable Register B3 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_R3.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_R3.
*/


/** \brief E2C8, CPUx Safety Protection Region DLMU Read Access Enable Register A4 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_R4.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_R4.
*/


/** \brief E2CC, CPUx Safety Protection Region DLMU Read Access Enable Register B4 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_R4.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_R4.
*/


/** \brief E2D8, CPUx Safety Protection Region DLMU Read Access Enable Register A5 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_R5.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_R5.
*/


/** \brief E2DC, CPUx Safety Protection Region DLMU Read Access Enable Register B5 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_R5.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_R5.
*/


/** \brief E2E8, CPUx Safety Protection Region DLMU Read Access Enable Register A6 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_R6.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_R6.
*/


/** \brief E2EC, CPUx Safety Protection Region DLMU Read Access Enable Register B6 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_R6.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_R6.
*/


/** \brief E2F8, CPUx Safety Protection Region DLMU Read Access Enable Register A7 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENA_R7.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENA_R7.
*/


/** \brief E2FC, CPUx Safety Protection Region DLMU Read Access Enable Register B7 */

/** Alias (User Manual Name) for CPU2_DLMU_SPROT_RGNACCENB_R7.
* To use register names with standard convension, please use CPU2_DLMU_SPROT_RGNACCENB_R7.
*/


/** \brief FB00, CPUx  Overlay Range Select Register */


/** \brief FB10, CPUx Redirected Address Base Register 0 */

/** Alias (User Manual Name) for CPU2_BLK0_RABR.
* To use register names with standard convension, please use CPU2_BLK0_RABR.
*/


/** \brief FB14, CPUx Overlay Target Address Register 0 */

/** Alias (User Manual Name) for CPU2_BLK0_OTAR.
* To use register names with standard convension, please use CPU2_BLK0_OTAR.
*/


/** \brief FB18, CPUx Overlay Mask Register 0 */

/** Alias (User Manual Name) for CPU2_BLK0_OMASK.
* To use register names with standard convension, please use CPU2_BLK0_OMASK.
*/


/** \brief FB1C, CPUx Redirected Address Base Register 1 */

/** Alias (User Manual Name) for CPU2_BLK1_RABR.
* To use register names with standard convension, please use CPU2_BLK1_RABR.
*/


/** \brief FB20, CPUx Overlay Target Address Register 1 */

/** Alias (User Manual Name) for CPU2_BLK1_OTAR.
* To use register names with standard convension, please use CPU2_BLK1_OTAR.
*/


/** \brief FB24, CPUx Overlay Mask Register 1 */

/** Alias (User Manual Name) for CPU2_BLK1_OMASK.
* To use register names with standard convension, please use CPU2_BLK1_OMASK.
*/


/** \brief FB28, CPUx Redirected Address Base Register 2 */

/** Alias (User Manual Name) for CPU2_BLK2_RABR.
* To use register names with standard convension, please use CPU2_BLK2_RABR.
*/


/** \brief FB2C, CPUx Overlay Target Address Register 2 */

/** Alias (User Manual Name) for CPU2_BLK2_OTAR.
* To use register names with standard convension, please use CPU2_BLK2_OTAR.
*/


/** \brief FB30, CPUx Overlay Mask Register 2 */

/** Alias (User Manual Name) for CPU2_BLK2_OMASK.
* To use register names with standard convension, please use CPU2_BLK2_OMASK.
*/


/** \brief FB34, CPUx Redirected Address Base Register 3 */

/** Alias (User Manual Name) for CPU2_BLK3_RABR.
* To use register names with standard convension, please use CPU2_BLK3_RABR.
*/


/** \brief FB38, CPUx Overlay Target Address Register 3 */

/** Alias (User Manual Name) for CPU2_BLK3_OTAR.
* To use register names with standard convension, please use CPU2_BLK3_OTAR.
*/


/** \brief FB3C, CPUx Overlay Mask Register 3 */

/** Alias (User Manual Name) for CPU2_BLK3_OMASK.
* To use register names with standard convension, please use CPU2_BLK3_OMASK.
*/


/** \brief FB40, CPUx Redirected Address Base Register 4 */

/** Alias (User Manual Name) for CPU2_BLK4_RABR.
* To use register names with standard convension, please use CPU2_BLK4_RABR.
*/


/** \brief FB44, CPUx Overlay Target Address Register 4 */

/** Alias (User Manual Name) for CPU2_BLK4_OTAR.
* To use register names with standard convension, please use CPU2_BLK4_OTAR.
*/


/** \brief FB48, CPUx Overlay Mask Register 4 */

/** Alias (User Manual Name) for CPU2_BLK4_OMASK.
* To use register names with standard convension, please use CPU2_BLK4_OMASK.
*/


/** \brief FB4C, CPUx Redirected Address Base Register 5 */

/** Alias (User Manual Name) for CPU2_BLK5_RABR.
* To use register names with standard convension, please use CPU2_BLK5_RABR.
*/


/** \brief FB50, CPUx Overlay Target Address Register 5 */

/** Alias (User Manual Name) for CPU2_BLK5_OTAR.
* To use register names with standard convension, please use CPU2_BLK5_OTAR.
*/


/** \brief FB54, CPUx Overlay Mask Register 5 */

/** Alias (User Manual Name) for CPU2_BLK5_OMASK.
* To use register names with standard convension, please use CPU2_BLK5_OMASK.
*/


/** \brief FB58, CPUx Redirected Address Base Register 6 */

/** Alias (User Manual Name) for CPU2_BLK6_RABR.
* To use register names with standard convension, please use CPU2_BLK6_RABR.
*/


/** \brief FB5C, CPUx Overlay Target Address Register 6 */

/** Alias (User Manual Name) for CPU2_BLK6_OTAR.
* To use register names with standard convension, please use CPU2_BLK6_OTAR.
*/


/** \brief FB60, CPUx Overlay Mask Register 6 */

/** Alias (User Manual Name) for CPU2_BLK6_OMASK.
* To use register names with standard convension, please use CPU2_BLK6_OMASK.
*/


/** \brief FB64, CPUx Redirected Address Base Register 7 */

/** Alias (User Manual Name) for CPU2_BLK7_RABR.
* To use register names with standard convension, please use CPU2_BLK7_RABR.
*/


/** \brief FB68, CPUx Overlay Target Address Register 7 */

/** Alias (User Manual Name) for CPU2_BLK7_OTAR.
* To use register names with standard convension, please use CPU2_BLK7_OTAR.
*/


/** \brief FB6C, CPUx Overlay Mask Register 7 */

/** Alias (User Manual Name) for CPU2_BLK7_OMASK.
* To use register names with standard convension, please use CPU2_BLK7_OMASK.
*/


/** \brief FB70, CPUx Redirected Address Base Register 8 */

/** Alias (User Manual Name) for CPU2_BLK8_RABR.
* To use register names with standard convension, please use CPU2_BLK8_RABR.
*/


/** \brief FB74, CPUx Overlay Target Address Register 8 */

/** Alias (User Manual Name) for CPU2_BLK8_OTAR.
* To use register names with standard convension, please use CPU2_BLK8_OTAR.
*/


/** \brief FB78, CPUx Overlay Mask Register 8 */

/** Alias (User Manual Name) for CPU2_BLK8_OMASK.
* To use register names with standard convension, please use CPU2_BLK8_OMASK.
*/


/** \brief FB7C, CPUx Redirected Address Base Register 9 */

/** Alias (User Manual Name) for CPU2_BLK9_RABR.
* To use register names with standard convension, please use CPU2_BLK9_RABR.
*/


/** \brief FB80, CPUx Overlay Target Address Register 9 */

/** Alias (User Manual Name) for CPU2_BLK9_OTAR.
* To use register names with standard convension, please use CPU2_BLK9_OTAR.
*/


/** \brief FB84, CPUx Overlay Mask Register 9 */

/** Alias (User Manual Name) for CPU2_BLK9_OMASK.
* To use register names with standard convension, please use CPU2_BLK9_OMASK.
*/


/** \brief FB88, CPUx Redirected Address Base Register 10 */

/** Alias (User Manual Name) for CPU2_BLK10_RABR.
* To use register names with standard convension, please use CPU2_BLK10_RABR.
*/


/** \brief FB8C, CPUx Overlay Target Address Register 10 */

/** Alias (User Manual Name) for CPU2_BLK10_OTAR.
* To use register names with standard convension, please use CPU2_BLK10_OTAR.
*/


/** \brief FB90, CPUx Overlay Mask Register 10 */

/** Alias (User Manual Name) for CPU2_BLK10_OMASK.
* To use register names with standard convension, please use CPU2_BLK10_OMASK.
*/


/** \brief FB94, CPUx Redirected Address Base Register 11 */

/** Alias (User Manual Name) for CPU2_BLK11_RABR.
* To use register names with standard convension, please use CPU2_BLK11_RABR.
*/


/** \brief FB98, CPUx Overlay Target Address Register 11 */

/** Alias (User Manual Name) for CPU2_BLK11_OTAR.
* To use register names with standard convension, please use CPU2_BLK11_OTAR.
*/


/** \brief FB9C, CPUx Overlay Mask Register 11 */

/** Alias (User Manual Name) for CPU2_BLK11_OMASK.
* To use register names with standard convension, please use CPU2_BLK11_OMASK.
*/


/** \brief FBA0, CPUx Redirected Address Base Register 12 */

/** Alias (User Manual Name) for CPU2_BLK12_RABR.
* To use register names with standard convension, please use CPU2_BLK12_RABR.
*/


/** \brief FBA4, CPUx Overlay Target Address Register 12 */

/** Alias (User Manual Name) for CPU2_BLK12_OTAR.
* To use register names with standard convension, please use CPU2_BLK12_OTAR.
*/


/** \brief FBA8, CPUx Overlay Mask Register 12 */

/** Alias (User Manual Name) for CPU2_BLK12_OMASK.
* To use register names with standard convension, please use CPU2_BLK12_OMASK.
*/


/** \brief FBAC, CPUx Redirected Address Base Register 13 */

/** Alias (User Manual Name) for CPU2_BLK13_RABR.
* To use register names with standard convension, please use CPU2_BLK13_RABR.
*/


/** \brief FBB0, CPUx Overlay Target Address Register 13 */

/** Alias (User Manual Name) for CPU2_BLK13_OTAR.
* To use register names with standard convension, please use CPU2_BLK13_OTAR.
*/


/** \brief FBB4, CPUx Overlay Mask Register 13 */

/** Alias (User Manual Name) for CPU2_BLK13_OMASK.
* To use register names with standard convension, please use CPU2_BLK13_OMASK.
*/


/** \brief FBB8, CPUx Redirected Address Base Register 14 */

/** Alias (User Manual Name) for CPU2_BLK14_RABR.
* To use register names with standard convension, please use CPU2_BLK14_RABR.
*/


/** \brief FBBC, CPUx Overlay Target Address Register 14 */

/** Alias (User Manual Name) for CPU2_BLK14_OTAR.
* To use register names with standard convension, please use CPU2_BLK14_OTAR.
*/


/** \brief FBC0, CPUx Overlay Mask Register 14 */

/** Alias (User Manual Name) for CPU2_BLK14_OMASK.
* To use register names with standard convension, please use CPU2_BLK14_OMASK.
*/


/** \brief FBC4, CPUx Redirected Address Base Register 15 */

/** Alias (User Manual Name) for CPU2_BLK15_RABR.
* To use register names with standard convension, please use CPU2_BLK15_RABR.
*/


/** \brief FBC8, CPUx Overlay Target Address Register 15 */

/** Alias (User Manual Name) for CPU2_BLK15_OTAR.
* To use register names with standard convension, please use CPU2_BLK15_OTAR.
*/


/** \brief FBCC, CPUx Overlay Mask Register 15 */

/** Alias (User Manual Name) for CPU2_BLK15_OMASK.
* To use register names with standard convension, please use CPU2_BLK15_OMASK.
*/


/** \brief FBD0, CPUx Redirected Address Base Register 16 */

/** Alias (User Manual Name) for CPU2_BLK16_RABR.
* To use register names with standard convension, please use CPU2_BLK16_RABR.
*/


/** \brief FBD4, CPUx Overlay Target Address Register 16 */

/** Alias (User Manual Name) for CPU2_BLK16_OTAR.
* To use register names with standard convension, please use CPU2_BLK16_OTAR.
*/


/** \brief FBD8, CPUx Overlay Mask Register 16 */

/** Alias (User Manual Name) for CPU2_BLK16_OMASK.
* To use register names with standard convension, please use CPU2_BLK16_OMASK.
*/


/** \brief FBDC, CPUx Redirected Address Base Register 17 */

/** Alias (User Manual Name) for CPU2_BLK17_RABR.
* To use register names with standard convension, please use CPU2_BLK17_RABR.
*/


/** \brief FBE0, CPUx Overlay Target Address Register 17 */

/** Alias (User Manual Name) for CPU2_BLK17_OTAR.
* To use register names with standard convension, please use CPU2_BLK17_OTAR.
*/


/** \brief FBE4, CPUx Overlay Mask Register 17 */

/** Alias (User Manual Name) for CPU2_BLK17_OMASK.
* To use register names with standard convension, please use CPU2_BLK17_OMASK.
*/


/** \brief FBE8, CPUx Redirected Address Base Register 18 */

/** Alias (User Manual Name) for CPU2_BLK18_RABR.
* To use register names with standard convension, please use CPU2_BLK18_RABR.
*/


/** \brief FBEC, CPUx Overlay Target Address Register 18 */

/** Alias (User Manual Name) for CPU2_BLK18_OTAR.
* To use register names with standard convension, please use CPU2_BLK18_OTAR.
*/


/** \brief FBF0, CPUx Overlay Mask Register 18 */

/** Alias (User Manual Name) for CPU2_BLK18_OMASK.
* To use register names with standard convension, please use CPU2_BLK18_OMASK.
*/


/** \brief FBF4, CPUx Redirected Address Base Register 19 */

/** Alias (User Manual Name) for CPU2_BLK19_RABR.
* To use register names with standard convension, please use CPU2_BLK19_RABR.
*/


/** \brief FBF8, CPUx Overlay Target Address Register 19 */

/** Alias (User Manual Name) for CPU2_BLK19_OTAR.
* To use register names with standard convension, please use CPU2_BLK19_OTAR.
*/


/** \brief FBFC, CPUx Overlay Mask Register 19 */

/** Alias (User Manual Name) for CPU2_BLK19_OMASK.
* To use register names with standard convension, please use CPU2_BLK19_OMASK.
*/


/** \brief FC00, CPUx Redirected Address Base Register 20 */

/** Alias (User Manual Name) for CPU2_BLK20_RABR.
* To use register names with standard convension, please use CPU2_BLK20_RABR.
*/


/** \brief FC04, CPUx Overlay Target Address Register 20 */

/** Alias (User Manual Name) for CPU2_BLK20_OTAR.
* To use register names with standard convension, please use CPU2_BLK20_OTAR.
*/


/** \brief FC08, CPUx Overlay Mask Register 20 */

/** Alias (User Manual Name) for CPU2_BLK20_OMASK.
* To use register names with standard convension, please use CPU2_BLK20_OMASK.
*/


/** \brief FC0C, CPUx Redirected Address Base Register 21 */

/** Alias (User Manual Name) for CPU2_BLK21_RABR.
* To use register names with standard convension, please use CPU2_BLK21_RABR.
*/


/** \brief FC10, CPUx Overlay Target Address Register 21 */

/** Alias (User Manual Name) for CPU2_BLK21_OTAR.
* To use register names with standard convension, please use CPU2_BLK21_OTAR.
*/


/** \brief FC14, CPUx Overlay Mask Register 21 */

/** Alias (User Manual Name) for CPU2_BLK21_OMASK.
* To use register names with standard convension, please use CPU2_BLK21_OMASK.
*/


/** \brief FC18, CPUx Redirected Address Base Register 22 */

/** Alias (User Manual Name) for CPU2_BLK22_RABR.
* To use register names with standard convension, please use CPU2_BLK22_RABR.
*/


/** \brief FC1C, CPUx Overlay Target Address Register 22 */

/** Alias (User Manual Name) for CPU2_BLK22_OTAR.
* To use register names with standard convension, please use CPU2_BLK22_OTAR.
*/


/** \brief FC20, CPUx Overlay Mask Register 22 */

/** Alias (User Manual Name) for CPU2_BLK22_OMASK.
* To use register names with standard convension, please use CPU2_BLK22_OMASK.
*/


/** \brief FC24, CPUx Redirected Address Base Register 23 */

/** Alias (User Manual Name) for CPU2_BLK23_RABR.
* To use register names with standard convension, please use CPU2_BLK23_RABR.
*/


/** \brief FC28, CPUx Overlay Target Address Register 23 */

/** Alias (User Manual Name) for CPU2_BLK23_OTAR.
* To use register names with standard convension, please use CPU2_BLK23_OTAR.
*/


/** \brief FC2C, CPUx Overlay Mask Register 23 */

/** Alias (User Manual Name) for CPU2_BLK23_OMASK.
* To use register names with standard convension, please use CPU2_BLK23_OMASK.
*/


/** \brief FC30, CPUx Redirected Address Base Register 24 */

/** Alias (User Manual Name) for CPU2_BLK24_RABR.
* To use register names with standard convension, please use CPU2_BLK24_RABR.
*/


/** \brief FC34, CPUx Overlay Target Address Register 24 */

/** Alias (User Manual Name) for CPU2_BLK24_OTAR.
* To use register names with standard convension, please use CPU2_BLK24_OTAR.
*/


/** \brief FC38, CPUx Overlay Mask Register 24 */

/** Alias (User Manual Name) for CPU2_BLK24_OMASK.
* To use register names with standard convension, please use CPU2_BLK24_OMASK.
*/


/** \brief FC3C, CPUx Redirected Address Base Register 25 */

/** Alias (User Manual Name) for CPU2_BLK25_RABR.
* To use register names with standard convension, please use CPU2_BLK25_RABR.
*/


/** \brief FC40, CPUx Overlay Target Address Register 25 */

/** Alias (User Manual Name) for CPU2_BLK25_OTAR.
* To use register names with standard convension, please use CPU2_BLK25_OTAR.
*/


/** \brief FC44, CPUx Overlay Mask Register 25 */

/** Alias (User Manual Name) for CPU2_BLK25_OMASK.
* To use register names with standard convension, please use CPU2_BLK25_OMASK.
*/


/** \brief FC48, CPUx Redirected Address Base Register 26 */

/** Alias (User Manual Name) for CPU2_BLK26_RABR.
* To use register names with standard convension, please use CPU2_BLK26_RABR.
*/


/** \brief FC4C, CPUx Overlay Target Address Register 26 */

/** Alias (User Manual Name) for CPU2_BLK26_OTAR.
* To use register names with standard convension, please use CPU2_BLK26_OTAR.
*/


/** \brief FC50, CPUx Overlay Mask Register 26 */

/** Alias (User Manual Name) for CPU2_BLK26_OMASK.
* To use register names with standard convension, please use CPU2_BLK26_OMASK.
*/


/** \brief FC54, CPUx Redirected Address Base Register 27 */

/** Alias (User Manual Name) for CPU2_BLK27_RABR.
* To use register names with standard convension, please use CPU2_BLK27_RABR.
*/


/** \brief FC58, CPUx Overlay Target Address Register 27 */

/** Alias (User Manual Name) for CPU2_BLK27_OTAR.
* To use register names with standard convension, please use CPU2_BLK27_OTAR.
*/


/** \brief FC5C, CPUx Overlay Mask Register 27 */

/** Alias (User Manual Name) for CPU2_BLK27_OMASK.
* To use register names with standard convension, please use CPU2_BLK27_OMASK.
*/


/** \brief FC60, CPUx Redirected Address Base Register 28 */

/** Alias (User Manual Name) for CPU2_BLK28_RABR.
* To use register names with standard convension, please use CPU2_BLK28_RABR.
*/


/** \brief FC64, CPUx Overlay Target Address Register 28 */

/** Alias (User Manual Name) for CPU2_BLK28_OTAR.
* To use register names with standard convension, please use CPU2_BLK28_OTAR.
*/


/** \brief FC68, CPUx Overlay Mask Register 28 */

/** Alias (User Manual Name) for CPU2_BLK28_OMASK.
* To use register names with standard convension, please use CPU2_BLK28_OMASK.
*/


/** \brief FC6C, CPUx Redirected Address Base Register 29 */

/** Alias (User Manual Name) for CPU2_BLK29_RABR.
* To use register names with standard convension, please use CPU2_BLK29_RABR.
*/


/** \brief FC70, CPUx Overlay Target Address Register 29 */

/** Alias (User Manual Name) for CPU2_BLK29_OTAR.
* To use register names with standard convension, please use CPU2_BLK29_OTAR.
*/


/** \brief FC74, CPUx Overlay Mask Register 29 */

/** Alias (User Manual Name) for CPU2_BLK29_OMASK.
* To use register names with standard convension, please use CPU2_BLK29_OMASK.
*/


/** \brief FC78, CPUx Redirected Address Base Register 30 */

/** Alias (User Manual Name) for CPU2_BLK30_RABR.
* To use register names with standard convension, please use CPU2_BLK30_RABR.
*/


/** \brief FC7C, CPUx Overlay Target Address Register 30 */

/** Alias (User Manual Name) for CPU2_BLK30_OTAR.
* To use register names with standard convension, please use CPU2_BLK30_OTAR.
*/


/** \brief FC80, CPUx Overlay Mask Register 30 */

/** Alias (User Manual Name) for CPU2_BLK30_OMASK.
* To use register names with standard convension, please use CPU2_BLK30_OMASK.
*/


/** \brief FC84, CPUx Redirected Address Base Register 31 */

/** Alias (User Manual Name) for CPU2_BLK31_RABR.
* To use register names with standard convension, please use CPU2_BLK31_RABR.
*/


/** \brief FC88, CPUx Overlay Target Address Register 31 */

/** Alias (User Manual Name) for CPU2_BLK31_OTAR.
* To use register names with standard convension, please use CPU2_BLK31_OTAR.
*/


/** \brief FC8C, CPUx Overlay Mask Register 31 */

/** Alias (User Manual Name) for CPU2_BLK31_OMASK.
* To use register names with standard convension, please use CPU2_BLK31_OMASK.
*/


/** \brief 1030, CPUx SRI Error Generation Register */


/** \brief 8004, CPUx Task Address Space Identifier Register */


/** \brief 8100, CPUx Data Access CacheabilityRegister */


/** \brief 8104, CPUx Code Access CacheabilityRegister */


/** \brief 8108, CPUx  Peripheral Space Identifier register */


/** \brief 9000, CPUx Data Control Register 2 */


/** \brief 900C, CPUx SIST Mode Access Control Register */


/** \brief 9010, CPUx Data Synchronous Trap Register */


/** \brief 9018, CPUx Data Asynchronous Trap Register */


/** \brief 901C, CPUx Data Error Address Register */


/** \brief 9020, CPUx Data Integrity Error Address Register */


/** \brief 9024, CPUx Data Integrity Error Trap Register */


/** \brief 9040, CPUx Data Memory Control Register */


/** \brief 9200, CPUx Program Synchronous Trap Register */


/** \brief 9204, CPUx Program Control 1 */


/** \brief 9208, CPUx Program Control 2 */


/** \brief 920C, CPUx Program Control 0 */


/** \brief 9210, CPUx Program Integrity Error Address Register */


/** \brief 9214, CPUx Program Integrity Error Trap Register */


/** \brief 9400, CPUx Compatibility Control Register */


/** \brief A000, CPUx Trap Control Register */


/** \brief A004, CPUx Trapping Instruction Program Counter Register */


/** \brief A008, CPUx Trapping Instruction Opcode Register */


/** \brief A010, CPUx Trapping Instruction Operand Register */


/** \brief A014, CPUx Trapping Instruction Operand Register */


/** \brief A018, CPUx Trapping Instruction Operand Register */


/** \brief C000, CPUx Data Protection Range 0, Lower Bound Register */


/** \brief C004, CPUx Data Protection Range 0, Upper Bound Register */


/** \brief C008, CPUx Data Protection Range 1, Lower Bound Register */


/** \brief C00C, CPUx Data Protection Range 1, Upper Bound Register */


/** \brief C010, CPUx Data Protection Range 2, Lower Bound Register */


/** \brief C014, CPUx Data Protection Range 2, Upper Bound Register */


/** \brief C018, CPUx Data Protection Range 3, Lower Bound Register */


/** \brief C01C, CPUx Data Protection Range 3, Upper Bound Register */


/** \brief C020, CPUx Data Protection Range 4, Lower Bound Register */


/** \brief C024, CPUx Data Protection Range 4, Upper Bound Register */


/** \brief C028, CPUx Data Protection Range 5, Lower Bound Register */


/** \brief C02C, CPUx Data Protection Range 5, Upper Bound Register */


/** \brief C030, CPUx Data Protection Range 6, Lower Bound Register */


/** \brief C034, CPUx Data Protection Range 6, Upper Bound Register */


/** \brief C038, CPUx Data Protection Range 7, Lower Bound Register */


/** \brief C03C, CPUx Data Protection Range 7, Upper Bound Register */


/** \brief C040, CPUx Data Protection Range 8, Lower Bound Register */


/** \brief C044, CPUx Data Protection Range 8, Upper Bound Register */


/** \brief C048, CPUx Data Protection Range 9, Lower Bound Register */


/** \brief C04C, CPUx Data Protection Range 9, Upper Bound Register */


/** \brief C050, CPUx Data Protection Range 10, Lower Bound Register */


/** \brief C054, CPUx Data Protection Range 10, Upper Bound Register */


/** \brief C058, CPUx Data Protection Range 11, Lower Bound Register */


/** \brief C05C, CPUx Data Protection Range 11, Upper Bound Register */


/** \brief C060, CPUx Data Protection Range 12, Lower Bound Register */


/** \brief C064, CPUx Data Protection Range 12, Upper Bound Register */


/** \brief C068, CPUx Data Protection Range 13, Lower Bound Register */


/** \brief C06C, CPUx Data Protection Range 13, Upper Bound Register */


/** \brief C070, CPUx Data Protection Range 14, Lower Bound Register */


/** \brief C074, CPUx Data Protection Range 14, Upper Bound Register */


/** \brief C078, CPUx Data Protection Range 15, Lower Bound Register */


/** \brief C07C, CPUx Data Protection Range 15, Upper Bound Register */


/** \brief C080, CPUx Data Protection Range 16, Lower Bound Register */


/** \brief C084, CPUx Data Protection Range 16, Upper Bound Register */


/** \brief C088, CPUx Data Protection Range 17, Lower Bound Register */


/** \brief C08C, CPUx Data Protection Range 17, Upper Bound Register */


/** \brief D000, CPUx Code Protection Range 0 Lower Bound Register */


/** \brief D004, CPUx Code Protection Range 0 Upper Bound Register */


/** \brief D008, CPUx Code Protection Range 1 Lower Bound Register */


/** \brief D00C, CPUx Code Protection Range 1 Upper Bound Register */


/** \brief D010, CPUx Code Protection Range 2 Lower Bound Register */


/** \brief D014, CPUx Code Protection Range 2 Upper Bound Register */


/** \brief D018, CPUx Code Protection Range 3 Lower Bound Register */


/** \brief D01C, CPUx Code Protection Range 3 Upper Bound Register */


/** \brief D020, CPUx Code Protection Range 4 Lower Bound Register */


/** \brief D024, CPUx Code Protection Range 4 Upper Bound Register */


/** \brief D028, CPUx Code Protection Range 5 Lower Bound Register */


/** \brief D02C, CPUx Code Protection Range 5 Upper Bound Register */


/** \brief D030, CPUx Code Protection Range 6 Lower Bound Register */


/** \brief D034, CPUx Code Protection Range 6 Upper Bound Register */


/** \brief D038, CPUx Code Protection Range 7 Lower Bound Register */


/** \brief D03C, CPUx Code Protection Range 7 Upper Bound Register */


/** \brief D040, CPUx Code Protection Range 8 Lower Bound Register */


/** \brief D044, CPUx Code Protection Range 8 Upper Bound Register */


/** \brief D048, CPUx Code Protection Range 9 Lower Bound Register */


/** \brief D04C, CPUx Code Protection Range 9 Upper Bound Register */


/** \brief E000, CPUx Code Protection Execute Enable Register Set 0 */


/** \brief E004, CPUx Code Protection Execute Enable Register Set 1 */


/** \brief E008, CPUx Code Protection Execute Enable Register Set 2 */


/** \brief E00C, CPUx Code Protection Execute Enable Register Set 3 */


/** \brief E010, CPUx Data Protection Read Enable Register Set 0 */


/** \brief E014, CPUx Data Protection Read Enable Register Set 1 */


/** \brief E018, CPUx Data Protection Read Enable Register Set 2 */


/** \brief E01C, CPUx Data Protection Read Enable Register Set 3 */


/** \brief E020, CPUx Data Protection Write Enable Register Set 0 */


/** \brief E024, CPUx Data Protection Write Enable Register Set 1 */


/** \brief E028, CPUx Data Protection Write Enable Register Set 2 */


/** \brief E02C, CPUx Data Protection Write Enable Register Set 3 */


/** \brief E040, CPUx Code Protection Execute Enable Register Set 4 */


/** \brief E044, CPUx Code Protection Execute Enable Register Set 5 */


/** \brief E050, CPUx Data Protection Read Enable Register Set 4 */


/** \brief E054, CPUx Data Protection Read Enable Register Set 5 */


/** \brief E060, CPUx Data Protection Write Enable Register Set 4 */


/** \brief E064, CPUx Data Protection Write Enable Register Set 5 */


/** \brief E400, CPUx Temporal Protection System Control Register */


/** \brief E404, CPUx Temporal Protection System Timer Register 0 */


/** \brief E408, CPUx Temporal Protection System Timer Register 1 */


/** \brief E40C, CPUx Temporal Protection System Timer Register 2 */


/** \brief E440, CPUx Exception Entry Timer Load Value */


/** \brief E444, CPUx Exception Entry Timer Current Value */


/** \brief E448, CPUx Exception Exit  Timer Load Value */


/** \brief E44C, CPUx Exception Exit Timer Current Value */


/** \brief E450, CPUx Exception Timer Class Enable Register */


/** \brief E454, CPUx Exception Timer Status Register */


/** \brief E458, CPUx Exception Timer FCX Register */


/** \brief F000, CPUx Trigger Event 0 */

/** Alias (User Manual Name) for CPU2_TR0_EVT.
* To use register names with standard convension, please use CPU2_TR0_EVT.
*/


/** \brief F004, CPUx Trigger Address 0 */

/** Alias (User Manual Name) for CPU2_TR0_ADR.
* To use register names with standard convension, please use CPU2_TR0_ADR.
*/


/** \brief F008, CPUx Trigger Event 1 */

/** Alias (User Manual Name) for CPU2_TR1_EVT.
* To use register names with standard convension, please use CPU2_TR1_EVT.
*/


/** \brief F00C, CPUx Trigger Address 1 */

/** Alias (User Manual Name) for CPU2_TR1_ADR.
* To use register names with standard convension, please use CPU2_TR1_ADR.
*/


/** \brief F010, CPUx Trigger Event 2 */

/** Alias (User Manual Name) for CPU2_TR2_EVT.
* To use register names with standard convension, please use CPU2_TR2_EVT.
*/


/** \brief F014, CPUx Trigger Address 2 */

/** Alias (User Manual Name) for CPU2_TR2_ADR.
* To use register names with standard convension, please use CPU2_TR2_ADR.
*/


/** \brief F018, CPUx Trigger Event 3 */

/** Alias (User Manual Name) for CPU2_TR3_EVT.
* To use register names with standard convension, please use CPU2_TR3_EVT.
*/


/** \brief F01C, CPUx Trigger Address 3 */

/** Alias (User Manual Name) for CPU2_TR3_ADR.
* To use register names with standard convension, please use CPU2_TR3_ADR.
*/


/** \brief F020, CPUx Trigger Event 4 */

/** Alias (User Manual Name) for CPU2_TR4_EVT.
* To use register names with standard convension, please use CPU2_TR4_EVT.
*/


/** \brief F024, CPUx Trigger Address 4 */

/** Alias (User Manual Name) for CPU2_TR4_ADR.
* To use register names with standard convension, please use CPU2_TR4_ADR.
*/


/** \brief F028, CPUx Trigger Event 5 */

/** Alias (User Manual Name) for CPU2_TR5_EVT.
* To use register names with standard convension, please use CPU2_TR5_EVT.
*/


/** \brief F02C, CPUx Trigger Address 5 */

/** Alias (User Manual Name) for CPU2_TR5_ADR.
* To use register names with standard convension, please use CPU2_TR5_ADR.
*/


/** \brief F030, CPUx Trigger Event 6 */

/** Alias (User Manual Name) for CPU2_TR6_EVT.
* To use register names with standard convension, please use CPU2_TR6_EVT.
*/


/** \brief F034, CPUx Trigger Address 6 */

/** Alias (User Manual Name) for CPU2_TR6_ADR.
* To use register names with standard convension, please use CPU2_TR6_ADR.
*/


/** \brief F038, CPUx Trigger Event 7 */

/** Alias (User Manual Name) for CPU2_TR7_EVT.
* To use register names with standard convension, please use CPU2_TR7_EVT.
*/


/** \brief F03C, CPUx Trigger Address 7 */

/** Alias (User Manual Name) for CPU2_TR7_ADR.
* To use register names with standard convension, please use CPU2_TR7_ADR.
*/


/** \brief FC00, CPUx Counter Control */


/** \brief FC04, CPUx CPU Clock Cycle Count */


/** \brief FC08, CPUx Instruction Count */


/** \brief FC0C, CPUx Multi-Count Register 1 */


/** \brief FC10, CPUx Multi-Count Register 2 */


/** \brief FC14, CPUx Multi-Count Register 3 */


/** \brief FD00, CPUx Debug Status Register */


/** \brief FD08, CPUx External Event Register */


/** \brief FD0C, CPUx Core Register Access Event */


/** \brief FD10, CPUx Software Debug Event */


/** \brief FD30, CPUx TriggerAddressx */


/** \brief FD40, CPUx Debug Monitor Start Address */


/** \brief FD44, CPUx Debug Context Save Area Pointer */


/** \brief FD48, CPUx Debug Trap Control Register */


/** \brief FE00, CPUx Previous Context Information Register */


/** \brief FE04, CPUx Program Status Word */


/** \brief FE08, CPUx Program Counter */


/** \brief FE14, CPUx System Configuration Register */


/** \brief FE18, CPUx Identification Register TC1.6.2P */


/** \brief FE1C, CPUx Core Identification Register */


/** \brief FE20, CPUx Base Interrupt Vector Table Pointer */


/** \brief FE24, CPUx Base Trap Vector Table Pointer */


/** \brief FE28, CPUx Interrupt Stack Pointer */


/** \brief FE2C, CPUx Interrupt Control Register */


/** \brief FE38, CPUx Free CSA List Head Pointer */


/** \brief FE3C, CPUx Free CSA List Limit Pointer */


/** \brief FE50, CPUx Customer ID register */


/** \brief FF00, CPUx Data General Purpose Register 0 */


/** \brief FF04, CPUx Data General Purpose Register 1 */


/** \brief FF08, CPUx Data General Purpose Register 2 */


/** \brief FF0C, CPUx Data General Purpose Register 3 */


/** \brief FF10, CPUx Data General Purpose Register 4 */


/** \brief FF14, CPUx Data General Purpose Register 5 */


/** \brief FF18, CPUx Data General Purpose Register 6 */


/** \brief FF1C, CPUx Data General Purpose Register 7 */


/** \brief FF20, CPUx Data General Purpose Register 8 */


/** \brief FF24, CPUx Data General Purpose Register 9 */


/** \brief FF28, CPUx Data General Purpose Register 10 */


/** \brief FF2C, CPUx Data General Purpose Register 11 */


/** \brief FF30, CPUx Data General Purpose Register 12 */


/** \brief FF34, CPUx Data General Purpose Register 13 */


/** \brief FF38, CPUx Data General Purpose Register 14 */


/** \brief FF3C, CPUx Data General Purpose Register 15 */


/** \brief FF80, CPUx Address General Purpose Register 0 */


/** \brief FF84, CPUx Address General Purpose Register 1 */


/** \brief FF88, CPUx Address General Purpose Register 2 */


/** \brief FF8C, CPUx Address General Purpose Register 3 */


/** \brief FF90, CPUx Address General Purpose Register 4 */


/** \brief FF94, CPUx Address General Purpose Register 5 */


/** \brief FF98, CPUx Address General Purpose Register 6 */


/** \brief FF9C, CPUx Address General Purpose Register 7 */


/** \brief FFA0, CPUx Address General Purpose Register 8 */


/** \brief FFA4, CPUx Address General Purpose Register 9 */


/** \brief FFA8, CPUx Address General Purpose Register 10 */


/** \brief FFAC, CPUx Address General Purpose Register 11 */


/** \brief FFB0, CPUx Address General Purpose Register 12 */


/** \brief FFB4, CPUx Address General Purpose Register 13 */


/** \brief FFB8, CPUx Address General Purpose Register 14 */


/** \brief FFBC, CPUx Address General Purpose Register 15 */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_Registers_Cfg_Cpu3
 * \{  */
/** \brief 1100, CPUx Flash Configuration Register 0 */


/** \brief 1104, CPUx Flash Configuration Register 1 */


/** \brief 1108, CPUx Flash Configuration Register 2 */


/** \brief 110C, CPUx Flash Configuration Register 3 */


/** \brief 1110, CPUx Flash Configuration Register 4 */


/** \brief D000, CPUx  Reset Register 0 */


/** \brief D004, CPUx  Reset Register 1 */


/** \brief D008, CPUx Reset Clear Register */


/** \brief E000, CPUx Safety Protection SPR Region Lower Address Register 0 */

/** Alias (User Manual Name) for CPU3_RGN0_LA.
* To use register names with standard convension, please use CPU3_RGN0_LA.
*/


/** \brief E004, CPUx Safety Protection SPR Region Upper Address Register 0 */

/** Alias (User Manual Name) for CPU3_RGN0_UA.
* To use register names with standard convension, please use CPU3_RGN0_UA.
*/


/** \brief E008, CPUx Safety Protection SPR Region Write Access Enable Register A0 */

/** Alias (User Manual Name) for CPU3_RGN0_ACCENA.
* To use register names with standard convension, please use CPU3_RGN0_ACCENA.
*/


/** \brief E00C, CPUx Safety Protection SPR Region Write Access Enable Register B0 */

/** Alias (User Manual Name) for CPU3_RGN0_ACCENB.
* To use register names with standard convension, please use CPU3_RGN0_ACCENB.
*/


/** \brief E010, CPUx Safety Protection SPR Region Lower Address Register 1 */

/** Alias (User Manual Name) for CPU3_RGN1_LA.
* To use register names with standard convension, please use CPU3_RGN1_LA.
*/


/** \brief E014, CPUx Safety Protection SPR Region Upper Address Register 1 */

/** Alias (User Manual Name) for CPU3_RGN1_UA.
* To use register names with standard convension, please use CPU3_RGN1_UA.
*/


/** \brief E018, CPUx Safety Protection SPR Region Write Access Enable Register A1 */

/** Alias (User Manual Name) for CPU3_RGN1_ACCENA.
* To use register names with standard convension, please use CPU3_RGN1_ACCENA.
*/


/** \brief E01C, CPUx Safety Protection SPR Region Write Access Enable Register B1 */

/** Alias (User Manual Name) for CPU3_RGN1_ACCENB.
* To use register names with standard convension, please use CPU3_RGN1_ACCENB.
*/


/** \brief E020, CPUx Safety Protection SPR Region Lower Address Register 2 */

/** Alias (User Manual Name) for CPU3_RGN2_LA.
* To use register names with standard convension, please use CPU3_RGN2_LA.
*/


/** \brief E024, CPUx Safety Protection SPR Region Upper Address Register 2 */

/** Alias (User Manual Name) for CPU3_RGN2_UA.
* To use register names with standard convension, please use CPU3_RGN2_UA.
*/


/** \brief E028, CPUx Safety Protection SPR Region Write Access Enable Register A2 */

/** Alias (User Manual Name) for CPU3_RGN2_ACCENA.
* To use register names with standard convension, please use CPU3_RGN2_ACCENA.
*/


/** \brief E02C, CPUx Safety Protection SPR Region Write Access Enable Register B2 */

/** Alias (User Manual Name) for CPU3_RGN2_ACCENB.
* To use register names with standard convension, please use CPU3_RGN2_ACCENB.
*/


/** \brief E030, CPUx Safety Protection SPR Region Lower Address Register 3 */

/** Alias (User Manual Name) for CPU3_RGN3_LA.
* To use register names with standard convension, please use CPU3_RGN3_LA.
*/


/** \brief E034, CPUx Safety Protection SPR Region Upper Address Register 3 */

/** Alias (User Manual Name) for CPU3_RGN3_UA.
* To use register names with standard convension, please use CPU3_RGN3_UA.
*/


/** \brief E038, CPUx Safety Protection SPR Region Write Access Enable Register A3 */

/** Alias (User Manual Name) for CPU3_RGN3_ACCENA.
* To use register names with standard convension, please use CPU3_RGN3_ACCENA.
*/


/** \brief E03C, CPUx Safety Protection SPR Region Write Access Enable Register B3 */

/** Alias (User Manual Name) for CPU3_RGN3_ACCENB.
* To use register names with standard convension, please use CPU3_RGN3_ACCENB.
*/


/** \brief E040, CPUx Safety Protection SPR Region Lower Address Register 4 */

/** Alias (User Manual Name) for CPU3_RGN4_LA.
* To use register names with standard convension, please use CPU3_RGN4_LA.
*/


/** \brief E044, CPUx Safety Protection SPR Region Upper Address Register 4 */

/** Alias (User Manual Name) for CPU3_RGN4_UA.
* To use register names with standard convension, please use CPU3_RGN4_UA.
*/


/** \brief E048, CPUx Safety Protection SPR Region Write Access Enable Register A4 */

/** Alias (User Manual Name) for CPU3_RGN4_ACCENA.
* To use register names with standard convension, please use CPU3_RGN4_ACCENA.
*/


/** \brief E04C, CPUx Safety Protection SPR Region Write Access Enable Register B4 */

/** Alias (User Manual Name) for CPU3_RGN4_ACCENB.
* To use register names with standard convension, please use CPU3_RGN4_ACCENB.
*/


/** \brief E050, CPUx Safety Protection SPR Region Lower Address Register 5 */

/** Alias (User Manual Name) for CPU3_RGN5_LA.
* To use register names with standard convension, please use CPU3_RGN5_LA.
*/


/** \brief E054, CPUx Safety Protection SPR Region Upper Address Register 5 */

/** Alias (User Manual Name) for CPU3_RGN5_UA.
* To use register names with standard convension, please use CPU3_RGN5_UA.
*/


/** \brief E058, CPUx Safety Protection SPR Region Write Access Enable Register A5 */

/** Alias (User Manual Name) for CPU3_RGN5_ACCENA.
* To use register names with standard convension, please use CPU3_RGN5_ACCENA.
*/


/** \brief E05C, CPUx Safety Protection SPR Region Write Access Enable Register B5 */

/** Alias (User Manual Name) for CPU3_RGN5_ACCENB.
* To use register names with standard convension, please use CPU3_RGN5_ACCENB.
*/


/** \brief E060, CPUx Safety Protection SPR Region Lower Address Register 6 */

/** Alias (User Manual Name) for CPU3_RGN6_LA.
* To use register names with standard convension, please use CPU3_RGN6_LA.
*/


/** \brief E064, CPUx Safety Protection SPR Region Upper Address Register 6 */

/** Alias (User Manual Name) for CPU3_RGN6_UA.
* To use register names with standard convension, please use CPU3_RGN6_UA.
*/


/** \brief E068, CPUx Safety Protection SPR Region Write Access Enable Register A6 */

/** Alias (User Manual Name) for CPU3_RGN6_ACCENA.
* To use register names with standard convension, please use CPU3_RGN6_ACCENA.
*/


/** \brief E06C, CPUx Safety Protection SPR Region Write Access Enable Register B6 */

/** Alias (User Manual Name) for CPU3_RGN6_ACCENB.
* To use register names with standard convension, please use CPU3_RGN6_ACCENB.
*/


/** \brief E070, CPUx Safety Protection SPR Region Lower Address Register 7 */

/** Alias (User Manual Name) for CPU3_RGN7_LA.
* To use register names with standard convension, please use CPU3_RGN7_LA.
*/


/** \brief E074, CPUx Safety Protection SPR Region Upper Address Register 7 */

/** Alias (User Manual Name) for CPU3_RGN7_UA.
* To use register names with standard convension, please use CPU3_RGN7_UA.
*/


/** \brief E078, CPUx Safety Protection SPR Region Write Access Enable Register A7 */

/** Alias (User Manual Name) for CPU3_RGN7_ACCENA.
* To use register names with standard convension, please use CPU3_RGN7_ACCENA.
*/


/** \brief E07C, CPUx Safety Protection SPR Region Write Access Enable Register B7 */

/** Alias (User Manual Name) for CPU3_RGN7_ACCENB.
* To use register names with standard convension, please use CPU3_RGN7_ACCENB.
*/


/** \brief E088, CPUx Safety Protection SPR Region Read Access Enable Register A0 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENA_R0.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENA_R0.
*/


/** \brief E08C, CPUx Safety Protection SPR Region Read Access Enable Register B0 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENB_R0.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENB_R0.
*/


/** \brief E098, CPUx Safety Protection SPR Region Read Access Enable Register A1 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENA_R1.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENA_R1.
*/


/** \brief E09C, CPUx Safety Protection SPR Region Read Access Enable Register B1 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENB_R1.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENB_R1.
*/


/** \brief E0A8, CPUx Safety Protection SPR Region Read Access Enable Register A2 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENA_R2.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENA_R2.
*/


/** \brief E0AC, CPUx Safety Protection SPR Region Read Access Enable Register B2 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENB_R2.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENB_R2.
*/


/** \brief E0B8, CPUx Safety Protection SPR Region Read Access Enable Register A3 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENA_R3.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENA_R3.
*/


/** \brief E0BC, CPUx Safety Protection SPR Region Read Access Enable Register B3 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENB_R3.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENB_R3.
*/


/** \brief E0C8, CPUx Safety Protection SPR Region Read Access Enable Register A4 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENA_R4.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENA_R4.
*/


/** \brief E0CC, CPUx Safety Protection SPR Region Read Access Enable Register B4 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENB_R4.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENB_R4.
*/


/** \brief E0D8, CPUx Safety Protection SPR Region Read Access Enable Register A5 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENA_R5.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENA_R5.
*/


/** \brief E0DC, CPUx Safety Protection SPR Region Read Access Enable Register B5 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENB_R5.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENB_R5.
*/


/** \brief E0E8, CPUx Safety Protection SPR Region Read Access Enable Register A6 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENA_R6.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENA_R6.
*/


/** \brief E0EC, CPUx Safety Protection SPR Region Read Access Enable Register B6 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENB_R6.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENB_R6.
*/


/** \brief E0F8, CPUx Safety Protection SPR Region Read Access Enable Register A7 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENA_R7.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENA_R7.
*/


/** \brief E0FC, CPUx Safety Protection SPR Region Read Access Enable Register B7 */

/** Alias (User Manual Name) for CPU3_SPR_SPROT_RGNACCENB_R7.
* To use register names with standard convension, please use CPU3_SPR_SPROT_RGNACCENB_R7.
*/


/** \brief E100, CPUx Safety Protection Register Access Enable Register A */


/** \brief E104, CPUx Safety Protection Region Access Enable Register B */


/** \brief E110, CPUx Safety Protection Region LPB Read Access Enable Register A */


/** \brief E114, CPUx Safety Protection Region LPB Read Access Enable Register B */


/** \brief E200, CPUx Safety Protection DLMU Region Lower Address Register 0 */


/** \brief E204, CPUx Safety protection DLMU Region Upper Address Register 0 */


/** \brief E208, CPUx Safety Protection Region DLMU Write Access Enable Register A0 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_W0.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_W0.
*/


/** \brief E20C, CPUx Safety Protection Region DLMU Write Access Enable Register B0 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_W0.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_W0.
*/


/** \brief E210, CPUx Safety Protection DLMU Region Lower Address Register 1 */


/** \brief E214, CPUx Safety protection DLMU Region Upper Address Register 1 */


/** \brief E218, CPUx Safety Protection Region DLMU Write Access Enable Register A1 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_W1.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_W1.
*/


/** \brief E21C, CPUx Safety Protection Region DLMU Write Access Enable Register B1 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_W1.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_W1.
*/


/** \brief E220, CPUx Safety Protection DLMU Region Lower Address Register 2 */


/** \brief E224, CPUx Safety protection DLMU Region Upper Address Register 2 */


/** \brief E228, CPUx Safety Protection Region DLMU Write Access Enable Register A2 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_W2.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_W2.
*/


/** \brief E22C, CPUx Safety Protection Region DLMU Write Access Enable Register B2 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_W2.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_W2.
*/


/** \brief E230, CPUx Safety Protection DLMU Region Lower Address Register 3 */


/** \brief E234, CPUx Safety protection DLMU Region Upper Address Register 3 */


/** \brief E238, CPUx Safety Protection Region DLMU Write Access Enable Register A3 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_W3.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_W3.
*/


/** \brief E23C, CPUx Safety Protection Region DLMU Write Access Enable Register B3 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_W3.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_W3.
*/


/** \brief E240, CPUx Safety Protection DLMU Region Lower Address Register 4 */


/** \brief E244, CPUx Safety protection DLMU Region Upper Address Register 4 */


/** \brief E248, CPUx Safety Protection Region DLMU Write Access Enable Register A4 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_W4.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_W4.
*/


/** \brief E24C, CPUx Safety Protection Region DLMU Write Access Enable Register B4 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_W4.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_W4.
*/


/** \brief E250, CPUx Safety Protection DLMU Region Lower Address Register 5 */


/** \brief E254, CPUx Safety protection DLMU Region Upper Address Register 5 */


/** \brief E258, CPUx Safety Protection Region DLMU Write Access Enable Register A5 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_W5.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_W5.
*/


/** \brief E25C, CPUx Safety Protection Region DLMU Write Access Enable Register B5 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_W5.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_W5.
*/


/** \brief E260, CPUx Safety Protection DLMU Region Lower Address Register 6 */


/** \brief E264, CPUx Safety protection DLMU Region Upper Address Register 6 */


/** \brief E268, CPUx Safety Protection Region DLMU Write Access Enable Register A6 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_W6.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_W6.
*/


/** \brief E26C, CPUx Safety Protection Region DLMU Write Access Enable Register B6 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_W6.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_W6.
*/


/** \brief E270, CPUx Safety Protection DLMU Region Lower Address Register 7 */


/** \brief E274, CPUx Safety protection DLMU Region Upper Address Register 7 */


/** \brief E278, CPUx Safety Protection Region DLMU Write Access Enable Register A7 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_W7.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_W7.
*/


/** \brief E27C, CPUx Safety Protection Region DLMU Write Access Enable Register B7 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_W7.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_W7.
*/


/** \brief E288, CPUx Safety Protection Region DLMU Read Access Enable Register A0 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_R0.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_R0.
*/


/** \brief E28C, CPUx Safety Protection Region DLMU Read Access Enable Register B0 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_R0.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_R0.
*/


/** \brief E298, CPUx Safety Protection Region DLMU Read Access Enable Register A1 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_R1.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_R1.
*/


/** \brief E29C, CPUx Safety Protection Region DLMU Read Access Enable Register B1 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_R1.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_R1.
*/


/** \brief E2A8, CPUx Safety Protection Region DLMU Read Access Enable Register A2 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_R2.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_R2.
*/


/** \brief E2AC, CPUx Safety Protection Region DLMU Read Access Enable Register B2 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_R2.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_R2.
*/


/** \brief E2B8, CPUx Safety Protection Region DLMU Read Access Enable Register A3 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_R3.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_R3.
*/


/** \brief E2BC, CPUx Safety Protection Region DLMU Read Access Enable Register B3 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_R3.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_R3.
*/


/** \brief E2C8, CPUx Safety Protection Region DLMU Read Access Enable Register A4 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_R4.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_R4.
*/


/** \brief E2CC, CPUx Safety Protection Region DLMU Read Access Enable Register B4 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_R4.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_R4.
*/


/** \brief E2D8, CPUx Safety Protection Region DLMU Read Access Enable Register A5 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_R5.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_R5.
*/


/** \brief E2DC, CPUx Safety Protection Region DLMU Read Access Enable Register B5 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_R5.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_R5.
*/


/** \brief E2E8, CPUx Safety Protection Region DLMU Read Access Enable Register A6 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_R6.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_R6.
*/


/** \brief E2EC, CPUx Safety Protection Region DLMU Read Access Enable Register B6 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_R6.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_R6.
*/


/** \brief E2F8, CPUx Safety Protection Region DLMU Read Access Enable Register A7 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENA_R7.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENA_R7.
*/


/** \brief E2FC, CPUx Safety Protection Region DLMU Read Access Enable Register B7 */

/** Alias (User Manual Name) for CPU3_DLMU_SPROT_RGNACCENB_R7.
* To use register names with standard convension, please use CPU3_DLMU_SPROT_RGNACCENB_R7.
*/


/** \brief FB00, CPUx  Overlay Range Select Register */


/** \brief FB10, CPUx Redirected Address Base Register 0 */

/** Alias (User Manual Name) for CPU3_BLK0_RABR.
* To use register names with standard convension, please use CPU3_BLK0_RABR.
*/


/** \brief FB14, CPUx Overlay Target Address Register 0 */

/** Alias (User Manual Name) for CPU3_BLK0_OTAR.
* To use register names with standard convension, please use CPU3_BLK0_OTAR.
*/


/** \brief FB18, CPUx Overlay Mask Register 0 */

/** Alias (User Manual Name) for CPU3_BLK0_OMASK.
* To use register names with standard convension, please use CPU3_BLK0_OMASK.
*/


/** \brief FB1C, CPUx Redirected Address Base Register 1 */

/** Alias (User Manual Name) for CPU3_BLK1_RABR.
* To use register names with standard convension, please use CPU3_BLK1_RABR.
*/


/** \brief FB20, CPUx Overlay Target Address Register 1 */

/** Alias (User Manual Name) for CPU3_BLK1_OTAR.
* To use register names with standard convension, please use CPU3_BLK1_OTAR.
*/


/** \brief FB24, CPUx Overlay Mask Register 1 */

/** Alias (User Manual Name) for CPU3_BLK1_OMASK.
* To use register names with standard convension, please use CPU3_BLK1_OMASK.
*/


/** \brief FB28, CPUx Redirected Address Base Register 2 */

/** Alias (User Manual Name) for CPU3_BLK2_RABR.
* To use register names with standard convension, please use CPU3_BLK2_RABR.
*/


/** \brief FB2C, CPUx Overlay Target Address Register 2 */

/** Alias (User Manual Name) for CPU3_BLK2_OTAR.
* To use register names with standard convension, please use CPU3_BLK2_OTAR.
*/


/** \brief FB30, CPUx Overlay Mask Register 2 */

/** Alias (User Manual Name) for CPU3_BLK2_OMASK.
* To use register names with standard convension, please use CPU3_BLK2_OMASK.
*/


/** \brief FB34, CPUx Redirected Address Base Register 3 */

/** Alias (User Manual Name) for CPU3_BLK3_RABR.
* To use register names with standard convension, please use CPU3_BLK3_RABR.
*/


/** \brief FB38, CPUx Overlay Target Address Register 3 */

/** Alias (User Manual Name) for CPU3_BLK3_OTAR.
* To use register names with standard convension, please use CPU3_BLK3_OTAR.
*/


/** \brief FB3C, CPUx Overlay Mask Register 3 */

/** Alias (User Manual Name) for CPU3_BLK3_OMASK.
* To use register names with standard convension, please use CPU3_BLK3_OMASK.
*/


/** \brief FB40, CPUx Redirected Address Base Register 4 */

/** Alias (User Manual Name) for CPU3_BLK4_RABR.
* To use register names with standard convension, please use CPU3_BLK4_RABR.
*/


/** \brief FB44, CPUx Overlay Target Address Register 4 */

/** Alias (User Manual Name) for CPU3_BLK4_OTAR.
* To use register names with standard convension, please use CPU3_BLK4_OTAR.
*/


/** \brief FB48, CPUx Overlay Mask Register 4 */

/** Alias (User Manual Name) for CPU3_BLK4_OMASK.
* To use register names with standard convension, please use CPU3_BLK4_OMASK.
*/


/** \brief FB4C, CPUx Redirected Address Base Register 5 */

/** Alias (User Manual Name) for CPU3_BLK5_RABR.
* To use register names with standard convension, please use CPU3_BLK5_RABR.
*/


/** \brief FB50, CPUx Overlay Target Address Register 5 */

/** Alias (User Manual Name) for CPU3_BLK5_OTAR.
* To use register names with standard convension, please use CPU3_BLK5_OTAR.
*/


/** \brief FB54, CPUx Overlay Mask Register 5 */

/** Alias (User Manual Name) for CPU3_BLK5_OMASK.
* To use register names with standard convension, please use CPU3_BLK5_OMASK.
*/


/** \brief FB58, CPUx Redirected Address Base Register 6 */

/** Alias (User Manual Name) for CPU3_BLK6_RABR.
* To use register names with standard convension, please use CPU3_BLK6_RABR.
*/


/** \brief FB5C, CPUx Overlay Target Address Register 6 */

/** Alias (User Manual Name) for CPU3_BLK6_OTAR.
* To use register names with standard convension, please use CPU3_BLK6_OTAR.
*/


/** \brief FB60, CPUx Overlay Mask Register 6 */

/** Alias (User Manual Name) for CPU3_BLK6_OMASK.
* To use register names with standard convension, please use CPU3_BLK6_OMASK.
*/


/** \brief FB64, CPUx Redirected Address Base Register 7 */

/** Alias (User Manual Name) for CPU3_BLK7_RABR.
* To use register names with standard convension, please use CPU3_BLK7_RABR.
*/


/** \brief FB68, CPUx Overlay Target Address Register 7 */

/** Alias (User Manual Name) for CPU3_BLK7_OTAR.
* To use register names with standard convension, please use CPU3_BLK7_OTAR.
*/


/** \brief FB6C, CPUx Overlay Mask Register 7 */

/** Alias (User Manual Name) for CPU3_BLK7_OMASK.
* To use register names with standard convension, please use CPU3_BLK7_OMASK.
*/


/** \brief FB70, CPUx Redirected Address Base Register 8 */

/** Alias (User Manual Name) for CPU3_BLK8_RABR.
* To use register names with standard convension, please use CPU3_BLK8_RABR.
*/


/** \brief FB74, CPUx Overlay Target Address Register 8 */

/** Alias (User Manual Name) for CPU3_BLK8_OTAR.
* To use register names with standard convension, please use CPU3_BLK8_OTAR.
*/


/** \brief FB78, CPUx Overlay Mask Register 8 */

/** Alias (User Manual Name) for CPU3_BLK8_OMASK.
* To use register names with standard convension, please use CPU3_BLK8_OMASK.
*/


/** \brief FB7C, CPUx Redirected Address Base Register 9 */

/** Alias (User Manual Name) for CPU3_BLK9_RABR.
* To use register names with standard convension, please use CPU3_BLK9_RABR.
*/


/** \brief FB80, CPUx Overlay Target Address Register 9 */

/** Alias (User Manual Name) for CPU3_BLK9_OTAR.
* To use register names with standard convension, please use CPU3_BLK9_OTAR.
*/


/** \brief FB84, CPUx Overlay Mask Register 9 */

/** Alias (User Manual Name) for CPU3_BLK9_OMASK.
* To use register names with standard convension, please use CPU3_BLK9_OMASK.
*/


/** \brief FB88, CPUx Redirected Address Base Register 10 */

/** Alias (User Manual Name) for CPU3_BLK10_RABR.
* To use register names with standard convension, please use CPU3_BLK10_RABR.
*/


/** \brief FB8C, CPUx Overlay Target Address Register 10 */

/** Alias (User Manual Name) for CPU3_BLK10_OTAR.
* To use register names with standard convension, please use CPU3_BLK10_OTAR.
*/


/** \brief FB90, CPUx Overlay Mask Register 10 */

/** Alias (User Manual Name) for CPU3_BLK10_OMASK.
* To use register names with standard convension, please use CPU3_BLK10_OMASK.
*/


/** \brief FB94, CPUx Redirected Address Base Register 11 */

/** Alias (User Manual Name) for CPU3_BLK11_RABR.
* To use register names with standard convension, please use CPU3_BLK11_RABR.
*/


/** \brief FB98, CPUx Overlay Target Address Register 11 */

/** Alias (User Manual Name) for CPU3_BLK11_OTAR.
* To use register names with standard convension, please use CPU3_BLK11_OTAR.
*/


/** \brief FB9C, CPUx Overlay Mask Register 11 */

/** Alias (User Manual Name) for CPU3_BLK11_OMASK.
* To use register names with standard convension, please use CPU3_BLK11_OMASK.
*/


/** \brief FBA0, CPUx Redirected Address Base Register 12 */

/** Alias (User Manual Name) for CPU3_BLK12_RABR.
* To use register names with standard convension, please use CPU3_BLK12_RABR.
*/


/** \brief FBA4, CPUx Overlay Target Address Register 12 */

/** Alias (User Manual Name) for CPU3_BLK12_OTAR.
* To use register names with standard convension, please use CPU3_BLK12_OTAR.
*/


/** \brief FBA8, CPUx Overlay Mask Register 12 */

/** Alias (User Manual Name) for CPU3_BLK12_OMASK.
* To use register names with standard convension, please use CPU3_BLK12_OMASK.
*/


/** \brief FBAC, CPUx Redirected Address Base Register 13 */

/** Alias (User Manual Name) for CPU3_BLK13_RABR.
* To use register names with standard convension, please use CPU3_BLK13_RABR.
*/


/** \brief FBB0, CPUx Overlay Target Address Register 13 */

/** Alias (User Manual Name) for CPU3_BLK13_OTAR.
* To use register names with standard convension, please use CPU3_BLK13_OTAR.
*/


/** \brief FBB4, CPUx Overlay Mask Register 13 */

/** Alias (User Manual Name) for CPU3_BLK13_OMASK.
* To use register names with standard convension, please use CPU3_BLK13_OMASK.
*/


/** \brief FBB8, CPUx Redirected Address Base Register 14 */

/** Alias (User Manual Name) for CPU3_BLK14_RABR.
* To use register names with standard convension, please use CPU3_BLK14_RABR.
*/


/** \brief FBBC, CPUx Overlay Target Address Register 14 */

/** Alias (User Manual Name) for CPU3_BLK14_OTAR.
* To use register names with standard convension, please use CPU3_BLK14_OTAR.
*/


/** \brief FBC0, CPUx Overlay Mask Register 14 */

/** Alias (User Manual Name) for CPU3_BLK14_OMASK.
* To use register names with standard convension, please use CPU3_BLK14_OMASK.
*/


/** \brief FBC4, CPUx Redirected Address Base Register 15 */

/** Alias (User Manual Name) for CPU3_BLK15_RABR.
* To use register names with standard convension, please use CPU3_BLK15_RABR.
*/


/** \brief FBC8, CPUx Overlay Target Address Register 15 */

/** Alias (User Manual Name) for CPU3_BLK15_OTAR.
* To use register names with standard convension, please use CPU3_BLK15_OTAR.
*/


/** \brief FBCC, CPUx Overlay Mask Register 15 */

/** Alias (User Manual Name) for CPU3_BLK15_OMASK.
* To use register names with standard convension, please use CPU3_BLK15_OMASK.
*/


/** \brief FBD0, CPUx Redirected Address Base Register 16 */

/** Alias (User Manual Name) for CPU3_BLK16_RABR.
* To use register names with standard convension, please use CPU3_BLK16_RABR.
*/


/** \brief FBD4, CPUx Overlay Target Address Register 16 */

/** Alias (User Manual Name) for CPU3_BLK16_OTAR.
* To use register names with standard convension, please use CPU3_BLK16_OTAR.
*/


/** \brief FBD8, CPUx Overlay Mask Register 16 */

/** Alias (User Manual Name) for CPU3_BLK16_OMASK.
* To use register names with standard convension, please use CPU3_BLK16_OMASK.
*/


/** \brief FBDC, CPUx Redirected Address Base Register 17 */

/** Alias (User Manual Name) for CPU3_BLK17_RABR.
* To use register names with standard convension, please use CPU3_BLK17_RABR.
*/


/** \brief FBE0, CPUx Overlay Target Address Register 17 */

/** Alias (User Manual Name) for CPU3_BLK17_OTAR.
* To use register names with standard convension, please use CPU3_BLK17_OTAR.
*/


/** \brief FBE4, CPUx Overlay Mask Register 17 */

/** Alias (User Manual Name) for CPU3_BLK17_OMASK.
* To use register names with standard convension, please use CPU3_BLK17_OMASK.
*/


/** \brief FBE8, CPUx Redirected Address Base Register 18 */

/** Alias (User Manual Name) for CPU3_BLK18_RABR.
* To use register names with standard convension, please use CPU3_BLK18_RABR.
*/


/** \brief FBEC, CPUx Overlay Target Address Register 18 */

/** Alias (User Manual Name) for CPU3_BLK18_OTAR.
* To use register names with standard convension, please use CPU3_BLK18_OTAR.
*/


/** \brief FBF0, CPUx Overlay Mask Register 18 */

/** Alias (User Manual Name) for CPU3_BLK18_OMASK.
* To use register names with standard convension, please use CPU3_BLK18_OMASK.
*/


/** \brief FBF4, CPUx Redirected Address Base Register 19 */

/** Alias (User Manual Name) for CPU3_BLK19_RABR.
* To use register names with standard convension, please use CPU3_BLK19_RABR.
*/


/** \brief FBF8, CPUx Overlay Target Address Register 19 */

/** Alias (User Manual Name) for CPU3_BLK19_OTAR.
* To use register names with standard convension, please use CPU3_BLK19_OTAR.
*/


/** \brief FBFC, CPUx Overlay Mask Register 19 */

/** Alias (User Manual Name) for CPU3_BLK19_OMASK.
* To use register names with standard convension, please use CPU3_BLK19_OMASK.
*/


/** \brief FC00, CPUx Redirected Address Base Register 20 */

/** Alias (User Manual Name) for CPU3_BLK20_RABR.
* To use register names with standard convension, please use CPU3_BLK20_RABR.
*/


/** \brief FC04, CPUx Overlay Target Address Register 20 */

/** Alias (User Manual Name) for CPU3_BLK20_OTAR.
* To use register names with standard convension, please use CPU3_BLK20_OTAR.
*/


/** \brief FC08, CPUx Overlay Mask Register 20 */

/** Alias (User Manual Name) for CPU3_BLK20_OMASK.
* To use register names with standard convension, please use CPU3_BLK20_OMASK.
*/


/** \brief FC0C, CPUx Redirected Address Base Register 21 */

/** Alias (User Manual Name) for CPU3_BLK21_RABR.
* To use register names with standard convension, please use CPU3_BLK21_RABR.
*/


/** \brief FC10, CPUx Overlay Target Address Register 21 */

/** Alias (User Manual Name) for CPU3_BLK21_OTAR.
* To use register names with standard convension, please use CPU3_BLK21_OTAR.
*/


/** \brief FC14, CPUx Overlay Mask Register 21 */

/** Alias (User Manual Name) for CPU3_BLK21_OMASK.
* To use register names with standard convension, please use CPU3_BLK21_OMASK.
*/


/** \brief FC18, CPUx Redirected Address Base Register 22 */

/** Alias (User Manual Name) for CPU3_BLK22_RABR.
* To use register names with standard convension, please use CPU3_BLK22_RABR.
*/


/** \brief FC1C, CPUx Overlay Target Address Register 22 */

/** Alias (User Manual Name) for CPU3_BLK22_OTAR.
* To use register names with standard convension, please use CPU3_BLK22_OTAR.
*/


/** \brief FC20, CPUx Overlay Mask Register 22 */

/** Alias (User Manual Name) for CPU3_BLK22_OMASK.
* To use register names with standard convension, please use CPU3_BLK22_OMASK.
*/


/** \brief FC24, CPUx Redirected Address Base Register 23 */

/** Alias (User Manual Name) for CPU3_BLK23_RABR.
* To use register names with standard convension, please use CPU3_BLK23_RABR.
*/


/** \brief FC28, CPUx Overlay Target Address Register 23 */

/** Alias (User Manual Name) for CPU3_BLK23_OTAR.
* To use register names with standard convension, please use CPU3_BLK23_OTAR.
*/


/** \brief FC2C, CPUx Overlay Mask Register 23 */

/** Alias (User Manual Name) for CPU3_BLK23_OMASK.
* To use register names with standard convension, please use CPU3_BLK23_OMASK.
*/


/** \brief FC30, CPUx Redirected Address Base Register 24 */

/** Alias (User Manual Name) for CPU3_BLK24_RABR.
* To use register names with standard convension, please use CPU3_BLK24_RABR.
*/


/** \brief FC34, CPUx Overlay Target Address Register 24 */

/** Alias (User Manual Name) for CPU3_BLK24_OTAR.
* To use register names with standard convension, please use CPU3_BLK24_OTAR.
*/


/** \brief FC38, CPUx Overlay Mask Register 24 */

/** Alias (User Manual Name) for CPU3_BLK24_OMASK.
* To use register names with standard convension, please use CPU3_BLK24_OMASK.
*/


/** \brief FC3C, CPUx Redirected Address Base Register 25 */

/** Alias (User Manual Name) for CPU3_BLK25_RABR.
* To use register names with standard convension, please use CPU3_BLK25_RABR.
*/


/** \brief FC40, CPUx Overlay Target Address Register 25 */

/** Alias (User Manual Name) for CPU3_BLK25_OTAR.
* To use register names with standard convension, please use CPU3_BLK25_OTAR.
*/


/** \brief FC44, CPUx Overlay Mask Register 25 */

/** Alias (User Manual Name) for CPU3_BLK25_OMASK.
* To use register names with standard convension, please use CPU3_BLK25_OMASK.
*/


/** \brief FC48, CPUx Redirected Address Base Register 26 */

/** Alias (User Manual Name) for CPU3_BLK26_RABR.
* To use register names with standard convension, please use CPU3_BLK26_RABR.
*/


/** \brief FC4C, CPUx Overlay Target Address Register 26 */

/** Alias (User Manual Name) for CPU3_BLK26_OTAR.
* To use register names with standard convension, please use CPU3_BLK26_OTAR.
*/


/** \brief FC50, CPUx Overlay Mask Register 26 */

/** Alias (User Manual Name) for CPU3_BLK26_OMASK.
* To use register names with standard convension, please use CPU3_BLK26_OMASK.
*/


/** \brief FC54, CPUx Redirected Address Base Register 27 */

/** Alias (User Manual Name) for CPU3_BLK27_RABR.
* To use register names with standard convension, please use CPU3_BLK27_RABR.
*/


/** \brief FC58, CPUx Overlay Target Address Register 27 */

/** Alias (User Manual Name) for CPU3_BLK27_OTAR.
* To use register names with standard convension, please use CPU3_BLK27_OTAR.
*/


/** \brief FC5C, CPUx Overlay Mask Register 27 */

/** Alias (User Manual Name) for CPU3_BLK27_OMASK.
* To use register names with standard convension, please use CPU3_BLK27_OMASK.
*/


/** \brief FC60, CPUx Redirected Address Base Register 28 */

/** Alias (User Manual Name) for CPU3_BLK28_RABR.
* To use register names with standard convension, please use CPU3_BLK28_RABR.
*/


/** \brief FC64, CPUx Overlay Target Address Register 28 */

/** Alias (User Manual Name) for CPU3_BLK28_OTAR.
* To use register names with standard convension, please use CPU3_BLK28_OTAR.
*/


/** \brief FC68, CPUx Overlay Mask Register 28 */

/** Alias (User Manual Name) for CPU3_BLK28_OMASK.
* To use register names with standard convension, please use CPU3_BLK28_OMASK.
*/


/** \brief FC6C, CPUx Redirected Address Base Register 29 */

/** Alias (User Manual Name) for CPU3_BLK29_RABR.
* To use register names with standard convension, please use CPU3_BLK29_RABR.
*/


/** \brief FC70, CPUx Overlay Target Address Register 29 */

/** Alias (User Manual Name) for CPU3_BLK29_OTAR.
* To use register names with standard convension, please use CPU3_BLK29_OTAR.
*/


/** \brief FC74, CPUx Overlay Mask Register 29 */

/** Alias (User Manual Name) for CPU3_BLK29_OMASK.
* To use register names with standard convension, please use CPU3_BLK29_OMASK.
*/


/** \brief FC78, CPUx Redirected Address Base Register 30 */

/** Alias (User Manual Name) for CPU3_BLK30_RABR.
* To use register names with standard convension, please use CPU3_BLK30_RABR.
*/


/** \brief FC7C, CPUx Overlay Target Address Register 30 */

/** Alias (User Manual Name) for CPU3_BLK30_OTAR.
* To use register names with standard convension, please use CPU3_BLK30_OTAR.
*/


/** \brief FC80, CPUx Overlay Mask Register 30 */

/** Alias (User Manual Name) for CPU3_BLK30_OMASK.
* To use register names with standard convension, please use CPU3_BLK30_OMASK.
*/


/** \brief FC84, CPUx Redirected Address Base Register 31 */

/** Alias (User Manual Name) for CPU3_BLK31_RABR.
* To use register names with standard convension, please use CPU3_BLK31_RABR.
*/


/** \brief FC88, CPUx Overlay Target Address Register 31 */

/** Alias (User Manual Name) for CPU3_BLK31_OTAR.
* To use register names with standard convension, please use CPU3_BLK31_OTAR.
*/


/** \brief FC8C, CPUx Overlay Mask Register 31 */

/** Alias (User Manual Name) for CPU3_BLK31_OMASK.
* To use register names with standard convension, please use CPU3_BLK31_OMASK.
*/


/** \brief 1030, CPUx SRI Error Generation Register */


/** \brief 8004, CPUx Task Address Space Identifier Register */


/** \brief 8100, CPUx Data Access CacheabilityRegister */


/** \brief 8104, CPUx Code Access CacheabilityRegister */


/** \brief 8108, CPUx  Peripheral Space Identifier register */


/** \brief 9000, CPUx Data Control Register 2 */


/** \brief 900C, CPUx SIST Mode Access Control Register */


/** \brief 9010, CPUx Data Synchronous Trap Register */


/** \brief 9018, CPUx Data Asynchronous Trap Register */


/** \brief 901C, CPUx Data Error Address Register */


/** \brief 9020, CPUx Data Integrity Error Address Register */


/** \brief 9024, CPUx Data Integrity Error Trap Register */


/** \brief 9040, CPUx Data Memory Control Register */


/** \brief 9200, CPUx Program Synchronous Trap Register */


/** \brief 9204, CPUx Program Control 1 */


/** \brief 9208, CPUx Program Control 2 */


/** \brief 920C, CPUx Program Control 0 */


/** \brief 9210, CPUx Program Integrity Error Address Register */


/** \brief 9214, CPUx Program Integrity Error Trap Register */


/** \brief 9400, CPUx Compatibility Control Register */


/** \brief A000, CPUx Trap Control Register */


/** \brief A004, CPUx Trapping Instruction Program Counter Register */


/** \brief A008, CPUx Trapping Instruction Opcode Register */


/** \brief A010, CPUx Trapping Instruction Operand Register */


/** \brief A014, CPUx Trapping Instruction Operand Register */


/** \brief A018, CPUx Trapping Instruction Operand Register */


/** \brief C000, CPUx Data Protection Range 0, Lower Bound Register */


/** \brief C004, CPUx Data Protection Range 0, Upper Bound Register */


/** \brief C008, CPUx Data Protection Range 1, Lower Bound Register */


/** \brief C00C, CPUx Data Protection Range 1, Upper Bound Register */


/** \brief C010, CPUx Data Protection Range 2, Lower Bound Register */


/** \brief C014, CPUx Data Protection Range 2, Upper Bound Register */


/** \brief C018, CPUx Data Protection Range 3, Lower Bound Register */


/** \brief C01C, CPUx Data Protection Range 3, Upper Bound Register */


/** \brief C020, CPUx Data Protection Range 4, Lower Bound Register */


/** \brief C024, CPUx Data Protection Range 4, Upper Bound Register */


/** \brief C028, CPUx Data Protection Range 5, Lower Bound Register */


/** \brief C02C, CPUx Data Protection Range 5, Upper Bound Register */


/** \brief C030, CPUx Data Protection Range 6, Lower Bound Register */


/** \brief C034, CPUx Data Protection Range 6, Upper Bound Register */


/** \brief C038, CPUx Data Protection Range 7, Lower Bound Register */


/** \brief C03C, CPUx Data Protection Range 7, Upper Bound Register */


/** \brief C040, CPUx Data Protection Range 8, Lower Bound Register */


/** \brief C044, CPUx Data Protection Range 8, Upper Bound Register */


/** \brief C048, CPUx Data Protection Range 9, Lower Bound Register */


/** \brief C04C, CPUx Data Protection Range 9, Upper Bound Register */


/** \brief C050, CPUx Data Protection Range 10, Lower Bound Register */


/** \brief C054, CPUx Data Protection Range 10, Upper Bound Register */


/** \brief C058, CPUx Data Protection Range 11, Lower Bound Register */


/** \brief C05C, CPUx Data Protection Range 11, Upper Bound Register */


/** \brief C060, CPUx Data Protection Range 12, Lower Bound Register */


/** \brief C064, CPUx Data Protection Range 12, Upper Bound Register */


/** \brief C068, CPUx Data Protection Range 13, Lower Bound Register */


/** \brief C06C, CPUx Data Protection Range 13, Upper Bound Register */


/** \brief C070, CPUx Data Protection Range 14, Lower Bound Register */


/** \brief C074, CPUx Data Protection Range 14, Upper Bound Register */


/** \brief C078, CPUx Data Protection Range 15, Lower Bound Register */


/** \brief C07C, CPUx Data Protection Range 15, Upper Bound Register */


/** \brief C080, CPUx Data Protection Range 16, Lower Bound Register */


/** \brief C084, CPUx Data Protection Range 16, Upper Bound Register */


/** \brief C088, CPUx Data Protection Range 17, Lower Bound Register */


/** \brief C08C, CPUx Data Protection Range 17, Upper Bound Register */


/** \brief D000, CPUx Code Protection Range 0 Lower Bound Register */


/** \brief D004, CPUx Code Protection Range 0 Upper Bound Register */


/** \brief D008, CPUx Code Protection Range 1 Lower Bound Register */


/** \brief D00C, CPUx Code Protection Range 1 Upper Bound Register */


/** \brief D010, CPUx Code Protection Range 2 Lower Bound Register */


/** \brief D014, CPUx Code Protection Range 2 Upper Bound Register */


/** \brief D018, CPUx Code Protection Range 3 Lower Bound Register */


/** \brief D01C, CPUx Code Protection Range 3 Upper Bound Register */


/** \brief D020, CPUx Code Protection Range 4 Lower Bound Register */


/** \brief D024, CPUx Code Protection Range 4 Upper Bound Register */


/** \brief D028, CPUx Code Protection Range 5 Lower Bound Register */


/** \brief D02C, CPUx Code Protection Range 5 Upper Bound Register */


/** \brief D030, CPUx Code Protection Range 6 Lower Bound Register */


/** \brief D034, CPUx Code Protection Range 6 Upper Bound Register */


/** \brief D038, CPUx Code Protection Range 7 Lower Bound Register */


/** \brief D03C, CPUx Code Protection Range 7 Upper Bound Register */


/** \brief D040, CPUx Code Protection Range 8 Lower Bound Register */


/** \brief D044, CPUx Code Protection Range 8 Upper Bound Register */


/** \brief D048, CPUx Code Protection Range 9 Lower Bound Register */


/** \brief D04C, CPUx Code Protection Range 9 Upper Bound Register */


/** \brief E000, CPUx Code Protection Execute Enable Register Set 0 */


/** \brief E004, CPUx Code Protection Execute Enable Register Set 1 */


/** \brief E008, CPUx Code Protection Execute Enable Register Set 2 */


/** \brief E00C, CPUx Code Protection Execute Enable Register Set 3 */


/** \brief E010, CPUx Data Protection Read Enable Register Set 0 */


/** \brief E014, CPUx Data Protection Read Enable Register Set 1 */


/** \brief E018, CPUx Data Protection Read Enable Register Set 2 */


/** \brief E01C, CPUx Data Protection Read Enable Register Set 3 */


/** \brief E020, CPUx Data Protection Write Enable Register Set 0 */


/** \brief E024, CPUx Data Protection Write Enable Register Set 1 */


/** \brief E028, CPUx Data Protection Write Enable Register Set 2 */


/** \brief E02C, CPUx Data Protection Write Enable Register Set 3 */


/** \brief E040, CPUx Code Protection Execute Enable Register Set 4 */


/** \brief E044, CPUx Code Protection Execute Enable Register Set 5 */


/** \brief E050, CPUx Data Protection Read Enable Register Set 4 */


/** \brief E054, CPUx Data Protection Read Enable Register Set 5 */


/** \brief E060, CPUx Data Protection Write Enable Register Set 4 */


/** \brief E064, CPUx Data Protection Write Enable Register Set 5 */


/** \brief E400, CPUx Temporal Protection System Control Register */


/** \brief E404, CPUx Temporal Protection System Timer Register 0 */


/** \brief E408, CPUx Temporal Protection System Timer Register 1 */


/** \brief E40C, CPUx Temporal Protection System Timer Register 2 */


/** \brief E440, CPUx Exception Entry Timer Load Value */


/** \brief E444, CPUx Exception Entry Timer Current Value */


/** \brief E448, CPUx Exception Exit  Timer Load Value */


/** \brief E44C, CPUx Exception Exit Timer Current Value */


/** \brief E450, CPUx Exception Timer Class Enable Register */


/** \brief E454, CPUx Exception Timer Status Register */


/** \brief E458, CPUx Exception Timer FCX Register */


/** \brief F000, CPUx Trigger Event 0 */

/** Alias (User Manual Name) for CPU3_TR0_EVT.
* To use register names with standard convension, please use CPU3_TR0_EVT.
*/


/** \brief F004, CPUx Trigger Address 0 */

/** Alias (User Manual Name) for CPU3_TR0_ADR.
* To use register names with standard convension, please use CPU3_TR0_ADR.
*/


/** \brief F008, CPUx Trigger Event 1 */

/** Alias (User Manual Name) for CPU3_TR1_EVT.
* To use register names with standard convension, please use CPU3_TR1_EVT.
*/


/** \brief F00C, CPUx Trigger Address 1 */

/** Alias (User Manual Name) for CPU3_TR1_ADR.
* To use register names with standard convension, please use CPU3_TR1_ADR.
*/


/** \brief F010, CPUx Trigger Event 2 */

/** Alias (User Manual Name) for CPU3_TR2_EVT.
* To use register names with standard convension, please use CPU3_TR2_EVT.
*/


/** \brief F014, CPUx Trigger Address 2 */

/** Alias (User Manual Name) for CPU3_TR2_ADR.
* To use register names with standard convension, please use CPU3_TR2_ADR.
*/


/** \brief F018, CPUx Trigger Event 3 */

/** Alias (User Manual Name) for CPU3_TR3_EVT.
* To use register names with standard convension, please use CPU3_TR3_EVT.
*/


/** \brief F01C, CPUx Trigger Address 3 */

/** Alias (User Manual Name) for CPU3_TR3_ADR.
* To use register names with standard convension, please use CPU3_TR3_ADR.
*/


/** \brief F020, CPUx Trigger Event 4 */

/** Alias (User Manual Name) for CPU3_TR4_EVT.
* To use register names with standard convension, please use CPU3_TR4_EVT.
*/


/** \brief F024, CPUx Trigger Address 4 */

/** Alias (User Manual Name) for CPU3_TR4_ADR.
* To use register names with standard convension, please use CPU3_TR4_ADR.
*/


/** \brief F028, CPUx Trigger Event 5 */

/** Alias (User Manual Name) for CPU3_TR5_EVT.
* To use register names with standard convension, please use CPU3_TR5_EVT.
*/


/** \brief F02C, CPUx Trigger Address 5 */

/** Alias (User Manual Name) for CPU3_TR5_ADR.
* To use register names with standard convension, please use CPU3_TR5_ADR.
*/


/** \brief F030, CPUx Trigger Event 6 */

/** Alias (User Manual Name) for CPU3_TR6_EVT.
* To use register names with standard convension, please use CPU3_TR6_EVT.
*/


/** \brief F034, CPUx Trigger Address 6 */

/** Alias (User Manual Name) for CPU3_TR6_ADR.
* To use register names with standard convension, please use CPU3_TR6_ADR.
*/


/** \brief F038, CPUx Trigger Event 7 */

/** Alias (User Manual Name) for CPU3_TR7_EVT.
* To use register names with standard convension, please use CPU3_TR7_EVT.
*/


/** \brief F03C, CPUx Trigger Address 7 */

/** Alias (User Manual Name) for CPU3_TR7_ADR.
* To use register names with standard convension, please use CPU3_TR7_ADR.
*/


/** \brief FC00, CPUx Counter Control */


/** \brief FC04, CPUx CPU Clock Cycle Count */


/** \brief FC08, CPUx Instruction Count */


/** \brief FC0C, CPUx Multi-Count Register 1 */


/** \brief FC10, CPUx Multi-Count Register 2 */


/** \brief FC14, CPUx Multi-Count Register 3 */


/** \brief FD00, CPUx Debug Status Register */


/** \brief FD08, CPUx External Event Register */


/** \brief FD0C, CPUx Core Register Access Event */


/** \brief FD10, CPUx Software Debug Event */


/** \brief FD30, CPUx TriggerAddressx */


/** \brief FD40, CPUx Debug Monitor Start Address */


/** \brief FD44, CPUx Debug Context Save Area Pointer */


/** \brief FD48, CPUx Debug Trap Control Register */


/** \brief FE00, CPUx Previous Context Information Register */


/** \brief FE04, CPUx Program Status Word */


/** \brief FE08, CPUx Program Counter */


/** \brief FE14, CPUx System Configuration Register */


/** \brief FE18, CPUx Identification Register TC1.6.2P */


/** \brief FE1C, CPUx Core Identification Register */


/** \brief FE20, CPUx Base Interrupt Vector Table Pointer */


/** \brief FE24, CPUx Base Trap Vector Table Pointer */


/** \brief FE28, CPUx Interrupt Stack Pointer */


/** \brief FE2C, CPUx Interrupt Control Register */


/** \brief FE38, CPUx Free CSA List Head Pointer */


/** \brief FE3C, CPUx Free CSA List Limit Pointer */


/** \brief FE50, CPUx Customer ID register */


/** \brief FF00, CPUx Data General Purpose Register 0 */


/** \brief FF04, CPUx Data General Purpose Register 1 */


/** \brief FF08, CPUx Data General Purpose Register 2 */


/** \brief FF0C, CPUx Data General Purpose Register 3 */


/** \brief FF10, CPUx Data General Purpose Register 4 */


/** \brief FF14, CPUx Data General Purpose Register 5 */


/** \brief FF18, CPUx Data General Purpose Register 6 */


/** \brief FF1C, CPUx Data General Purpose Register 7 */


/** \brief FF20, CPUx Data General Purpose Register 8 */


/** \brief FF24, CPUx Data General Purpose Register 9 */


/** \brief FF28, CPUx Data General Purpose Register 10 */


/** \brief FF2C, CPUx Data General Purpose Register 11 */


/** \brief FF30, CPUx Data General Purpose Register 12 */


/** \brief FF34, CPUx Data General Purpose Register 13 */


/** \brief FF38, CPUx Data General Purpose Register 14 */


/** \brief FF3C, CPUx Data General Purpose Register 15 */


/** \brief FF80, CPUx Address General Purpose Register 0 */


/** \brief FF84, CPUx Address General Purpose Register 1 */


/** \brief FF88, CPUx Address General Purpose Register 2 */


/** \brief FF8C, CPUx Address General Purpose Register 3 */


/** \brief FF90, CPUx Address General Purpose Register 4 */


/** \brief FF94, CPUx Address General Purpose Register 5 */


/** \brief FF98, CPUx Address General Purpose Register 6 */


/** \brief FF9C, CPUx Address General Purpose Register 7 */


/** \brief FFA0, CPUx Address General Purpose Register 8 */


/** \brief FFA4, CPUx Address General Purpose Register 9 */


/** \brief FFA8, CPUx Address General Purpose Register 10 */


/** \brief FFAC, CPUx Address General Purpose Register 11 */


/** \brief FFB0, CPUx Address General Purpose Register 12 */


/** \brief FFB4, CPUx Address General Purpose Register 13 */


/** \brief FFB8, CPUx Address General Purpose Register 14 */


/** \brief FFBC, CPUx Address General Purpose Register 15 */



/** \}  */

/******************************************************************************/

/******************************************************************************/


#line 58 "E:\\Projects\\Erika\\aurix_workspace\\can_erika\\ee\\..\\Libraries\\iLLD\\TC38A\\Tricore\\_Impl\\IfxCpu_cfg.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief CPU count
 */


/** \brief Segment number of cachable flash region
 */


/** \brief Segment number of cachable LMU region
 */


/** \brief All cores (coreIDs) mask. This macro can be defined by the user according to the number of core being enabled.
 * So that can be used for syncronisation among multiple cores. In case user didn't define this macro, by default this
 * mask will be generated for all the available cores of the device.
 * e.g:
 * 1. Check for synchronisation between core 0 and core 5
 * # define 0x41U
 * 2. Check for synchronisation between core 0 to core 5
 * # define 0x5FU
 *
 * Note:
 * Core id values read from CORE_ID register will be as shown below. The value
 * indicates the position of the bit needs to be set while building the macro.
 * Core 0: 0
 * Core 1: 1
 * Core 2: 2
 * Core 3: 3
 * Core 4: 4
 * Core 5: 6
 */




/** \brief
 */










/******************************************************************************/
/*-------------------------------Enumerations---------------------------------*/
/******************************************************************************/

/** \brief Halt status
 */
typedef enum
{
    IfxCpu_DBGST_HALT_run  = 0,
    IfxCpu_DBGST_HALT_halt = 1
} IfxCpu_DBGST_HALT;

/** \brief List of the available CPU ids
 */
typedef enum
{
    IfxCpu_Id_0 = 0,  /**< \brief CPU 0 */
    IfxCpu_Id_1 = 1,  /**< \brief CPU 1 */
    IfxCpu_Id_2 = 2,  /**< \brief CPU 2 */
    IfxCpu_Id_3 = 3,  /**< \brief CPU 3 */
    IfxCpu_Id_none    /**< \brief None of the CPU */
} IfxCpu_Id;

/** \brief List of the available CPU resources
 */
typedef enum
{
    IfxCpu_Index_0 = 0,  /**< \brief CPU 0 */
    IfxCpu_Index_1 = 1,  /**< \brief CPU 1 */
    IfxCpu_Index_2 = 2,  /**< \brief CPU 2 */
    IfxCpu_Index_3 = 3,  /**< \brief CPU 3 */
    IfxCpu_Index_none    /**< \brief None of the CPU */
} IfxCpu_Index;

/** \brief Power management status
 */
typedef enum
{
    IfxCpu_PMCSR_PMST_normalMode         = 1,
    IfxCpu_PMCSR_PMST_idleModeRequest    = 2,
    IfxCpu_PMCSR_PMST_idleMode           = 3,
    IfxCpu_PMCSR_PMST_sleepModeRequest   = 4,
    IfxCpu_PMCSR_PMST_standbyModeRequest = 6
} IfxCpu_PMCSR_PMST;

/** \brief List of the available CPU resources
 */
typedef enum
{
    IfxCpu_ResourceCpu_0    = IfxCpu_Index_0,    /**< \brief CPU 0 */
    IfxCpu_ResourceCpu_1    = IfxCpu_Index_1,    /**< \brief CPU 1 */
    IfxCpu_ResourceCpu_2    = IfxCpu_Index_2,    /**< \brief CPU 2 */
    IfxCpu_ResourceCpu_3    = IfxCpu_Index_3,    /**< \brief CPU 3 */
    IfxCpu_ResourceCpu_none = IfxCpu_Index_none  /**< \brief None of the CPU */
} IfxCpu_ResourceCpu;

/******************************************************************************/
/*-------------------Global Exported Variables/Constants----------------------*/
/******************************************************************************/

extern const IfxModule_IndexMap IfxCpu_cfg_indexMap[(4)];


#line 47 "E:/Projects/Erika/aurix_workspace/can_erika/ee/../Libraries/iLLD/TC38A/Tricore/_Impl/IfxCpu_cfg.c"

/******************************************************************************/
/*-----------------------Exported Variables/Constants-------------------------*/
/******************************************************************************/

const IfxModule_IndexMap IfxCpu_cfg_indexMap[(4)] = {
    {&((*(Ifx_CPU*)0xF8800000u)), (uint32)IfxCpu_ResourceCpu_0},
    {&((*(Ifx_CPU*)0xF8820000u)), (uint32)IfxCpu_ResourceCpu_1},
    {&((*(Ifx_CPU*)0xF8840000u)), (uint32)IfxCpu_ResourceCpu_2},
    {&((*(Ifx_CPU*)0xF8860000u)), (uint32)IfxCpu_ResourceCpu_3}
};
